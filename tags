!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_NIS_TYPE	astyle.h	/^	ARRAY_NIS_TYPE = 64,		\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
ARRAY_TYPE	astyle.h	/^	ARRAY_TYPE = 512,$/;"	e	enum:astyle::BracketType
ASBase	astyle.h	/^		ASBase() : baseFileType(C_TYPE) { }$/;"	f	class:astyle::ASBase	access:protected	signature:()
ASBase	astyle.h	/^class ASBase$/;"	c	namespace:astyle
ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::ASBeautifier()$/;"	f	class:astyle::ASBeautifier	signature:()
ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::ASBeautifier(const ASBeautifier &other) : ASBase(other)$/;"	f	class:astyle::ASBeautifier	signature:(const ASBeautifier &other)
ASBeautifier	astyle.h	/^		ASBeautifier();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
ASBeautifier	astyle.h	/^		ASBeautifier(const ASBeautifier &copy);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const ASBeautifier &copy)
ASBeautifier	astyle.h	/^class ASBeautifier : protected ASResource, protected ASBase$/;"	c	namespace:astyle	inherits:ASResource,ASBase
ASConsole	astyle_main.h	/^		ASConsole(ASFormatter &formatterArg) : formatter(formatterArg) {$/;"	f	class:astyle::ASConsole	access:public	signature:(ASFormatter &formatterArg)
ASConsole	astyle_main.h	/^class ASConsole$/;"	c	namespace:astyle
ASEnhancer	ASEnhancer.cpp	/^ASEnhancer::ASEnhancer()$/;"	f	class:astyle::ASEnhancer	signature:()
ASEnhancer	astyle.h	/^		ASEnhancer();$/;"	p	class:astyle::ASEnhancer	access:public	signature:()
ASEnhancer	astyle.h	/^class ASEnhancer : protected ASBase$/;"	c	namespace:astyle	inherits:ASBase
ASErrorHandler	CFCppTidy.cpp	/^void ASErrorHandler(int \/*errorNumber*\/, const char* errorMessage)$/;"	f	signature:(int , const char* errorMessage)
ASFormatter	ASFormatter.cpp	/^ASFormatter::ASFormatter()$/;"	f	class:astyle::ASFormatter	signature:()
ASFormatter	astyle.h	/^		ASFormatter();$/;"	p	class:astyle::ASFormatter	access:public	signature:()
ASFormatter	astyle.h	/^		ASFormatter(const ASFormatter &copy);       \/\/ copy constructor not to be implemented$/;"	p	class:astyle::ASFormatter	access:private	signature:(const ASFormatter &copy)
ASFormatter	astyle.h	/^class ASFormatter : public ASBeautifier$/;"	c	namespace:astyle	inherits:ASBeautifier
ASLOCALIZER_H	ASLocalizer.h	28;"	d
ASLibrary	astyle_main.h	/^		ASLibrary() {}$/;"	f	class:astyle::ASLibrary	access:public	signature:()
ASLibrary	astyle_main.h	/^class ASLibrary$/;"	c	namespace:astyle
ASLocalizer	ASLocalizer.cpp	/^ASLocalizer::ASLocalizer()$/;"	f	class:astyle::ASLocalizer	signature:()
ASLocalizer	ASLocalizer.h	/^		ASLocalizer();$/;"	p	class:astyle::ASLocalizer	access:public	signature:()
ASLocalizer	ASLocalizer.h	/^class ASLocalizer$/;"	c	namespace:astyle
ASMemoryAlloc	CFCppTidy.cpp	/^char* ASMemoryAlloc(unsigned long memoryNeeded)$/;"	f	signature:(unsigned long memoryNeeded)
ASOptions	astyle_main.h	/^		ASOptions(ASFormatter &formatterArg) : formatter(formatterArg) {}$/;"	f	class:astyle::ASOptions	access:public	signature:(ASFormatter &formatterArg)
ASOptions	astyle_main.h	/^class ASOptions$/;"	c	namespace:astyle
ASResource	astyle.h	/^		ASResource() {}$/;"	f	class:astyle::ASResource	access:public	signature:()
ASResource	astyle.h	/^class ASResource$/;"	c	namespace:astyle
ASSourceIterator	astyle.h	/^		ASSourceIterator() {}$/;"	f	class:astyle::ASSourceIterator	access:public	signature:()
ASSourceIterator	astyle.h	/^class ASSourceIterator$/;"	c	namespace:astyle
ASStreamIterator	astyle_main.cpp	/^ASStreamIterator<T>::ASStreamIterator(T* in)$/;"	f	class:astyle::ASStreamIterator	signature:(T* in)
ASStreamIterator	astyle_main.h	/^		ASStreamIterator(T* in);$/;"	p	class:astyle::ASStreamIterator	access:public	signature:(T* in)
ASStreamIterator	astyle_main.h	/^		ASStreamIterator(const ASStreamIterator &copy);       \/\/ copy constructor not to be implemented$/;"	p	class:astyle::ASStreamIterator	access:private	signature:(const ASStreamIterator &copy)
ASStreamIterator	astyle_main.h	/^class ASStreamIterator : public ASSourceIterator$/;"	c	namespace:astyle	inherits:ASSourceIterator
ASTYLE_H	astyle.h	28;"	d
ASTYLE_LIB	astyle_main.h	57;"	d
ASTYLE_MAIN_H	astyle_main.h	28;"	d
AS_ADD	ASResource.cpp	/^const string ASResource::AS_ADD = string("add");$/;"	m	class:astyle::ASResource	file:
AS_ADD	astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource	access:public
AS_AND	ASResource.cpp	/^const string ASResource::AS_AND = string("&&");$/;"	m	class:astyle::ASResource	file:
AS_AND	astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource	access:public
AS_AND_ASSIGN	ASResource.cpp	/^const string ASResource::AS_AND_ASSIGN = string("&=");$/;"	m	class:astyle::ASResource	file:
AS_AND_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_ARROW	ASResource.cpp	/^const string ASResource::AS_ARROW = string("->");$/;"	m	class:astyle::ASResource	file:
AS_ARROW	astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource	access:public
AS_ASM	ASResource.cpp	/^const string ASResource::AS_ASM = string("asm");$/;"	m	class:astyle::ASResource	file:
AS_ASM	astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource	access:public
AS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_ASSIGN = string("=");$/;"	m	class:astyle::ASResource	file:
AS_ASSIGN	astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_AUTORELEASEPOOL	ASResource.cpp	/^const string ASResource::AS_AUTORELEASEPOOL = string("autoreleasepool");$/;"	m	class:astyle::ASResource	file:
AS_AUTORELEASEPOOL	astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource	access:public
AS_BAR_DEFINE	ASResource.cpp	/^const string ASResource::AS_BAR_DEFINE = string("#define");$/;"	m	class:astyle::ASResource	file:
AS_BAR_DEFINE	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
AS_BAR_EL	ASResource.cpp	/^const string ASResource::AS_BAR_EL = string("#el");$/;"	m	class:astyle::ASResource	file:
AS_BAR_EL	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
AS_BAR_ENDIF	ASResource.cpp	/^const string ASResource::AS_BAR_ENDIF = string("#endif");$/;"	m	class:astyle::ASResource	file:
AS_BAR_ENDIF	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
AS_BAR_IF	ASResource.cpp	/^const string ASResource::AS_BAR_IF = string("#if");$/;"	m	class:astyle::ASResource	file:
AS_BAR_IF	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
AS_BAR_INCLUDE	ASResource.cpp	/^const string ASResource::AS_BAR_INCLUDE = string("#include");$/;"	m	class:astyle::ASResource	file:
AS_BAR_INCLUDE	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
AS_BIT_AND	ASResource.cpp	/^const string ASResource::AS_BIT_AND = string("&");$/;"	m	class:astyle::ASResource	file:
AS_BIT_AND	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
AS_BIT_NOT	ASResource.cpp	/^const string ASResource::AS_BIT_NOT = string("~");$/;"	m	class:astyle::ASResource	file:
AS_BIT_NOT	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
AS_BIT_OR	ASResource.cpp	/^const string ASResource::AS_BIT_OR = string("|");$/;"	m	class:astyle::ASResource	file:
AS_BIT_OR	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
AS_BIT_XOR	ASResource.cpp	/^const string ASResource::AS_BIT_XOR = string("^");$/;"	m	class:astyle::ASResource	file:
AS_BIT_XOR	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
AS_CASE	ASResource.cpp	/^const string ASResource::AS_CASE = string("case");$/;"	m	class:astyle::ASResource	file:
AS_CASE	astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource	access:public
AS_CATCH	ASResource.cpp	/^const string ASResource::AS_CATCH = string("catch");$/;"	m	class:astyle::ASResource	file:
AS_CATCH	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
AS_CERR	ASResource.cpp	/^const string ASResource::AS_CERR = string("cerr");$/;"	m	class:astyle::ASResource	file:
AS_CERR	astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource	access:public
AS_CIN	ASResource.cpp	/^const string ASResource::AS_CIN = string("cin");$/;"	m	class:astyle::ASResource	file:
AS_CIN	astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource	access:public
AS_CLASS	ASResource.cpp	/^const string ASResource::AS_CLASS = string("class");$/;"	m	class:astyle::ASResource	file:
AS_CLASS	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
AS_CLOSE_BRACKET	ASResource.cpp	/^const string ASResource::AS_CLOSE_BRACKET = string("}");$/;"	m	class:astyle::ASResource	file:
AS_CLOSE_BRACKET	astyle.h	/^		static const string AS_OPEN_BRACKET, AS_CLOSE_BRACKET;$/;"	m	class:astyle::ASResource	access:public
AS_CLOSE_COMMENT	ASResource.cpp	/^const string ASResource::AS_CLOSE_COMMENT = string("*\/");$/;"	m	class:astyle::ASResource	file:
AS_CLOSE_COMMENT	astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource	access:public
AS_COLON	ASResource.cpp	/^const string ASResource::AS_COLON = string(":");$/;"	m	class:astyle::ASResource	file:
AS_COLON	astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource	access:public
AS_COMMA	ASResource.cpp	/^const string ASResource::AS_COMMA = string(",");$/;"	m	class:astyle::ASResource	file:
AS_COMMA	astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource	access:public
AS_CONST	ASResource.cpp	/^const string ASResource::AS_CONST = string("const");$/;"	m	class:astyle::ASResource	file:
AS_CONST	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
AS_CONST_CAST	ASResource.cpp	/^const string ASResource::AS_CONST_CAST = string("const_cast");$/;"	m	class:astyle::ASResource	file:
AS_CONST_CAST	astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource	access:public
AS_COUT	ASResource.cpp	/^const string ASResource::AS_COUT = string("cout");$/;"	m	class:astyle::ASResource	file:
AS_COUT	astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource	access:public
AS_DEFAULT	ASResource.cpp	/^const string ASResource::AS_DEFAULT = string("default");$/;"	m	class:astyle::ASResource	file:
AS_DEFAULT	astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource	access:public
AS_DELEGATE	ASResource.cpp	/^const string ASResource::AS_DELEGATE = string("delegate");$/;"	m	class:astyle::ASResource	file:
AS_DELEGATE	astyle.h	/^		static const string AS_DELEGATE, AS_UNCHECKED;$/;"	m	class:astyle::ASResource	access:public
AS_DIV	ASResource.cpp	/^const string ASResource::AS_DIV = string("\/");$/;"	m	class:astyle::ASResource	file:
AS_DIV	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_DIV_ASSIGN	ASResource.cpp	/^const string ASResource::AS_DIV_ASSIGN = string("\/=");$/;"	m	class:astyle::ASResource	file:
AS_DIV_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_DO	ASResource.cpp	/^const string ASResource::AS_DO = string("do");$/;"	m	class:astyle::ASResource	file:
AS_DO	astyle.h	/^		static const string AS_DO, AS_WHILE;$/;"	m	class:astyle::ASResource	access:public
AS_DYNAMIC_CAST	ASResource.cpp	/^const string ASResource::AS_DYNAMIC_CAST = string("dynamic_cast");$/;"	m	class:astyle::ASResource	file:
AS_DYNAMIC_CAST	astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource	access:public
AS_ELSE	ASResource.cpp	/^const string ASResource::AS_ELSE = string("else");$/;"	m	class:astyle::ASResource	file:
AS_ELSE	astyle.h	/^		static const string AS_IF, AS_ELSE;$/;"	m	class:astyle::ASResource	access:public
AS_END	ASResource.cpp	/^const string ASResource::AS_END = string("end");$/;"	m	class:astyle::ASResource	file:
AS_END	astyle.h	/^		static const string AS_END;$/;"	m	class:astyle::ASResource	access:public
AS_ENUM	ASResource.cpp	/^const string ASResource::AS_ENUM = string("enum");$/;"	m	class:astyle::ASResource	file:
AS_ENUM	astyle.h	/^		static const string AS_EXTERN, AS_ENUM;$/;"	m	class:astyle::ASResource	access:public
AS_EQUAL	ASResource.cpp	/^const string ASResource::AS_EQUAL = string("==");$/;"	m	class:astyle::ASResource	file:
AS_EQUAL	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
AS_EXTERN	ASResource.cpp	/^const string ASResource::AS_EXTERN = string("extern");$/;"	m	class:astyle::ASResource	file:
AS_EXTERN	astyle.h	/^		static const string AS_EXTERN, AS_ENUM;$/;"	m	class:astyle::ASResource	access:public
AS_FINALLY	ASResource.cpp	/^const string ASResource::AS_FINALLY = string("finally");$/;"	m	class:astyle::ASResource	file:
AS_FINALLY	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
AS_FIXED	ASResource.cpp	/^const string ASResource::AS_FIXED = string("fixed");$/;"	m	class:astyle::ASResource	file:
AS_FIXED	astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource	access:public
AS_FOR	ASResource.cpp	/^const string ASResource::AS_FOR = string("for");$/;"	m	class:astyle::ASResource	file:
AS_FOR	astyle.h	/^		static const string AS_FOR;$/;"	m	class:astyle::ASResource	access:public
AS_FOREACH	ASResource.cpp	/^const string ASResource::AS_FOREACH = string("foreach");$/;"	m	class:astyle::ASResource	file:
AS_FOREACH	astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource	access:public
AS_FOREVER	ASResource.cpp	/^const string ASResource::AS_FOREVER = string("forever");$/;"	m	class:astyle::ASResource	file:
AS_FOREVER	astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource	access:public
AS_GCC_MAX_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GCC_MAX_ASSIGN = string(">?");$/;"	m	class:astyle::ASResource	file:
AS_GCC_MAX_ASSIGN	astyle.h	/^		static const string AS_GCC_MIN_ASSIGN, AS_GCC_MAX_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_GCC_MIN_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GCC_MIN_ASSIGN = string("<?");$/;"	m	class:astyle::ASResource	file:
AS_GCC_MIN_ASSIGN	astyle.h	/^		static const string AS_GCC_MIN_ASSIGN, AS_GCC_MAX_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_GET	ASResource.cpp	/^const string ASResource::AS_GET = string("get");$/;"	m	class:astyle::ASResource	file:
AS_GET	astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource	access:public
AS_GR	ASResource.cpp	/^const string ASResource::AS_GR = string(">");$/;"	m	class:astyle::ASResource	file:
AS_GR	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_GR_EQUAL	ASResource.cpp	/^const string ASResource::AS_GR_EQUAL = string(">=");$/;"	m	class:astyle::ASResource	file:
AS_GR_EQUAL	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
AS_GR_GR	ASResource.cpp	/^const string ASResource::AS_GR_GR = string(">>");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
AS_GR_GR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GR_GR_ASSIGN = string(">>=");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_ASSIGN	astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_GR_GR_GR	ASResource.cpp	/^const string ASResource::AS_GR_GR_GR = string(">>>");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_GR	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
AS_GR_GR_GR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GR_GR_GR_ASSIGN = string(">>>=");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_GR_ASSIGN	astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_IF	ASResource.cpp	/^const string ASResource::AS_IF = string("if");$/;"	m	class:astyle::ASResource	file:
AS_IF	astyle.h	/^		static const string AS_IF, AS_ELSE;$/;"	m	class:astyle::ASResource	access:public
AS_INTERFACE	ASResource.cpp	/^const string ASResource::AS_INTERFACE = string("interface");$/;"	m	class:astyle::ASResource	file:
AS_INTERFACE	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
AS_INTERRUPT	ASResource.cpp	/^const string ASResource::AS_INTERRUPT = string("interrupt");$/;"	m	class:astyle::ASResource	file:
AS_INTERRUPT	astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource	access:public
AS_LAMBDA	ASResource.cpp	/^const string ASResource::AS_LAMBDA = string("=>");            \/\/ C# lambda expression arrow$/;"	m	class:astyle::ASResource	file:
AS_LAMBDA	astyle.h	/^		static const string AS_QUESTION_QUESTION, AS_LAMBDA;$/;"	m	class:astyle::ASResource	access:public
AS_LET	ASResource.cpp	/^const string ASResource::AS_LET = string("let");$/;"	m	class:astyle::ASResource	file:
AS_LET	astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource	access:public
AS_LOCK	ASResource.cpp	/^const string ASResource::AS_LOCK = string("lock");$/;"	m	class:astyle::ASResource	file:
AS_LOCK	astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource	access:public
AS_LS	ASResource.cpp	/^const string ASResource::AS_LS = string("<");$/;"	m	class:astyle::ASResource	file:
AS_LS	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_LS_EQUAL	ASResource.cpp	/^const string ASResource::AS_LS_EQUAL = string("<=");$/;"	m	class:astyle::ASResource	file:
AS_LS_EQUAL	astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_LS_LS	ASResource.cpp	/^const string ASResource::AS_LS_LS = string("<<");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS	astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_LS_LS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_LS_LS_ASSIGN = string("<<=");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_ASSIGN	astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_LS_LS_LS	ASResource.cpp	/^const string ASResource::AS_LS_LS_LS = string("<<<");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_LS	astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_LS_LS_LS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_LS_LS_LS_ASSIGN = string("<<<=");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_LS_ASSIGN	astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_MINUS	ASResource.cpp	/^const string ASResource::AS_MINUS = string("-");$/;"	m	class:astyle::ASResource	file:
AS_MINUS	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_MINUS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MINUS_ASSIGN = string("-=");$/;"	m	class:astyle::ASResource	file:
AS_MINUS_ASSIGN	astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_MINUS_MINUS	ASResource.cpp	/^const string ASResource::AS_MINUS_MINUS = string("--");$/;"	m	class:astyle::ASResource	file:
AS_MINUS_MINUS	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
AS_MOD	ASResource.cpp	/^const string ASResource::AS_MOD = string("%");$/;"	m	class:astyle::ASResource	file:
AS_MOD	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_MOD_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MOD_ASSIGN = string("%=");$/;"	m	class:astyle::ASResource	file:
AS_MOD_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_MS_ASM	ASResource.cpp	/^const string ASResource::AS_MS_ASM = string("_asm");$/;"	m	class:astyle::ASResource	file:
AS_MS_ASM	astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource	access:public
AS_MS__ASM	ASResource.cpp	/^const string ASResource::AS_MS__ASM = string("__asm");$/;"	m	class:astyle::ASResource	file:
AS_MS__ASM	astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource	access:public
AS_MULT	ASResource.cpp	/^const string ASResource::AS_MULT = string("*");$/;"	m	class:astyle::ASResource	file:
AS_MULT	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_MULT_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MULT_ASSIGN = string("*=");$/;"	m	class:astyle::ASResource	file:
AS_MULT_ASSIGN	astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_NAMESPACE	ASResource.cpp	/^const string ASResource::AS_NAMESPACE = string("namespace");$/;"	m	class:astyle::ASResource	file:
AS_NAMESPACE	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
AS_NEW	ASResource.cpp	/^const string ASResource::AS_NEW = string("new");$/;"	m	class:astyle::ASResource	file:
AS_NEW	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
AS_NOEXCEPT	ASResource.cpp	/^const string ASResource::AS_NOEXCEPT = string("noexcept");$/;"	m	class:astyle::ASResource	file:
AS_NOEXCEPT	astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource	access:public
AS_NOT	ASResource.cpp	/^const string ASResource::AS_NOT = string("!");$/;"	m	class:astyle::ASResource	file:
AS_NOT	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
AS_NOT_EQUAL	ASResource.cpp	/^const string ASResource::AS_NOT_EQUAL = string("!=");$/;"	m	class:astyle::ASResource	file:
AS_NOT_EQUAL	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
AS_NS_DURING	ASResource.cpp	/^const string ASResource::AS_NS_DURING = string("NS_DURING");$/;"	m	class:astyle::ASResource	file:
AS_NS_DURING	astyle.h	/^		static const string AS_NS_DURING, AS_NS_HANDLER;$/;"	m	class:astyle::ASResource	access:public
AS_NS_HANDLER	ASResource.cpp	/^const string ASResource::AS_NS_HANDLER = string("NS_HANDLER");$/;"	m	class:astyle::ASResource	file:
AS_NS_HANDLER	astyle.h	/^		static const string AS_NS_DURING, AS_NS_HANDLER;$/;"	m	class:astyle::ASResource	access:public
AS_OPEN_BRACKET	ASResource.cpp	/^const string ASResource::AS_OPEN_BRACKET = string("{");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_BRACKET	astyle.h	/^		static const string AS_OPEN_BRACKET, AS_CLOSE_BRACKET;$/;"	m	class:astyle::ASResource	access:public
AS_OPEN_COMMENT	ASResource.cpp	/^const string ASResource::AS_OPEN_COMMENT = string("\/*");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_COMMENT	astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource	access:public
AS_OPEN_LINE_COMMENT	ASResource.cpp	/^const string ASResource::AS_OPEN_LINE_COMMENT = string("\/\/");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_LINE_COMMENT	astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource	access:public
AS_OPERATOR	ASResource.cpp	/^const string ASResource::AS_OPERATOR = string("operator");$/;"	m	class:astyle::ASResource	file:
AS_OPERATOR	astyle.h	/^		static const string AS_OPERATOR, AS_TEMPLATE;$/;"	m	class:astyle::ASResource	access:public
AS_OR	ASResource.cpp	/^const string ASResource::AS_OR = string("||");$/;"	m	class:astyle::ASResource	file:
AS_OR	astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource	access:public
AS_OR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_OR_ASSIGN = string("|=");$/;"	m	class:astyle::ASResource	file:
AS_OR_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_OVERRIDE	ASResource.cpp	/^const string ASResource::AS_OVERRIDE = string("override");$/;"	m	class:astyle::ASResource	file:
AS_OVERRIDE	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
AS_PLUS	ASResource.cpp	/^const string ASResource::AS_PLUS = string("+");$/;"	m	class:astyle::ASResource	file:
AS_PLUS	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
AS_PLUS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_PLUS_ASSIGN = string("+=");$/;"	m	class:astyle::ASResource	file:
AS_PLUS_ASSIGN	astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS_PLUS_PLUS	ASResource.cpp	/^const string ASResource::AS_PLUS_PLUS = string("++");$/;"	m	class:astyle::ASResource	file:
AS_PLUS_PLUS	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
AS_PRIVATE	ASResource.cpp	/^const string ASResource::AS_PRIVATE = string("private");$/;"	m	class:astyle::ASResource	file:
AS_PRIVATE	astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource	access:public
AS_PROTECTED	ASResource.cpp	/^const string ASResource::AS_PROTECTED = string("protected");$/;"	m	class:astyle::ASResource	file:
AS_PROTECTED	astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource	access:public
AS_PUBLIC	ASResource.cpp	/^const string ASResource::AS_PUBLIC = string("public");$/;"	m	class:astyle::ASResource	file:
AS_PUBLIC	astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource	access:public
AS_QFOREACH	ASResource.cpp	/^const string ASResource::AS_QFOREACH = string("Q_FOREACH");$/;"	m	class:astyle::ASResource	file:
AS_QFOREACH	astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource	access:public
AS_QFOREVER	ASResource.cpp	/^const string ASResource::AS_QFOREVER = string("Q_FOREVER");$/;"	m	class:astyle::ASResource	file:
AS_QFOREVER	astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource	access:public
AS_QUESTION	ASResource.cpp	/^const string ASResource::AS_QUESTION = string("?");$/;"	m	class:astyle::ASResource	file:
AS_QUESTION	astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource	access:public
AS_QUESTION_QUESTION	ASResource.cpp	/^const string ASResource::AS_QUESTION_QUESTION = string("??");$/;"	m	class:astyle::ASResource	file:
AS_QUESTION_QUESTION	astyle.h	/^		static const string AS_QUESTION_QUESTION, AS_LAMBDA;$/;"	m	class:astyle::ASResource	access:public
AS_REINTERPRET_CAST	ASResource.cpp	/^const string ASResource::AS_REINTERPRET_CAST = string("reinterpret_cast");$/;"	m	class:astyle::ASResource	file:
AS_REINTERPRET_CAST	astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource	access:public
AS_REMOVE	ASResource.cpp	/^const string ASResource::AS_REMOVE = string("remove");$/;"	m	class:astyle::ASResource	file:
AS_REMOVE	astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource	access:public
AS_RETURN	ASResource.cpp	/^const string ASResource::AS_RETURN = string("return");$/;"	m	class:astyle::ASResource	file:
AS_RETURN	astyle.h	/^		static const string AS_RETURN;$/;"	m	class:astyle::ASResource	access:public
AS_SCOPE_RESOLUTION	ASResource.cpp	/^const string ASResource::AS_SCOPE_RESOLUTION = string("::");$/;"	m	class:astyle::ASResource	file:
AS_SCOPE_RESOLUTION	astyle.h	/^		static const string AS_SCOPE_RESOLUTION;$/;"	m	class:astyle::ASResource	access:public
AS_SEALED	ASResource.cpp	/^const string ASResource::AS_SEALED = string("sealed");$/;"	m	class:astyle::ASResource	file:
AS_SEALED	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
AS_SELECTOR	ASResource.cpp	/^const string ASResource::AS_SELECTOR = string("selector");$/;"	m	class:astyle::ASResource	file:
AS_SELECTOR	astyle.h	/^		static const string AS_SELECTOR;$/;"	m	class:astyle::ASResource	access:public
AS_SEMICOLON	ASResource.cpp	/^const string ASResource::AS_SEMICOLON = string(";");$/;"	m	class:astyle::ASResource	file:
AS_SEMICOLON	astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource	access:public
AS_SET	ASResource.cpp	/^const string ASResource::AS_SET = string("set");$/;"	m	class:astyle::ASResource	file:
AS_SET	astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource	access:public
AS_STATIC	ASResource.cpp	/^const string ASResource::AS_STATIC = string("static");$/;"	m	class:astyle::ASResource	file:
AS_STATIC	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
AS_STATIC_CAST	ASResource.cpp	/^const string ASResource::AS_STATIC_CAST = string("static_cast");$/;"	m	class:astyle::ASResource	file:
AS_STATIC_CAST	astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource	access:public
AS_STRUCT	ASResource.cpp	/^const string ASResource::AS_STRUCT = string("struct");$/;"	m	class:astyle::ASResource	file:
AS_STRUCT	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
AS_SWITCH	ASResource.cpp	/^const string ASResource::AS_SWITCH = string("switch");$/;"	m	class:astyle::ASResource	file:
AS_SWITCH	astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource	access:public
AS_SYNCHRONIZED	ASResource.cpp	/^const string ASResource::AS_SYNCHRONIZED = string("synchronized");$/;"	m	class:astyle::ASResource	file:
AS_SYNCHRONIZED	astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource	access:public
AS_TEMPLATE	ASResource.cpp	/^const string ASResource::AS_TEMPLATE = string("template");$/;"	m	class:astyle::ASResource	file:
AS_TEMPLATE	astyle.h	/^		static const string AS_OPERATOR, AS_TEMPLATE;$/;"	m	class:astyle::ASResource	access:public
AS_THROW	ASResource.cpp	/^const string ASResource::AS_THROW = string("throw");$/;"	m	class:astyle::ASResource	file:
AS_THROW	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
AS_THROWS	ASResource.cpp	/^const string ASResource::AS_THROWS = string("throws");$/;"	m	class:astyle::ASResource	file:
AS_THROWS	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
AS_TRY	ASResource.cpp	/^const string ASResource::AS_TRY = string("try");$/;"	m	class:astyle::ASResource	file:
AS_TRY	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
AS_UNCHECKED	ASResource.cpp	/^const string ASResource::AS_UNCHECKED = string("unchecked");$/;"	m	class:astyle::ASResource	file:
AS_UNCHECKED	astyle.h	/^		static const string AS_DELEGATE, AS_UNCHECKED;$/;"	m	class:astyle::ASResource	access:public
AS_UNION	ASResource.cpp	/^const string ASResource::AS_UNION = string("union");$/;"	m	class:astyle::ASResource	file:
AS_UNION	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
AS_UNSAFE	ASResource.cpp	/^const string ASResource::AS_UNSAFE = string("unsafe");$/;"	m	class:astyle::ASResource	file:
AS_UNSAFE	astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource	access:public
AS_VOLATILE	ASResource.cpp	/^const string ASResource::AS_VOLATILE = string("volatile");$/;"	m	class:astyle::ASResource	file:
AS_VOLATILE	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
AS_WHERE	ASResource.cpp	/^const string ASResource::AS_WHERE = string("where");$/;"	m	class:astyle::ASResource	file:
AS_WHERE	astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource	access:public
AS_WHILE	ASResource.cpp	/^const string ASResource::AS_WHILE = string("while");$/;"	m	class:astyle::ASResource	file:
AS_WHILE	astyle.h	/^		static const string AS_DO, AS_WHILE;$/;"	m	class:astyle::ASResource	access:public
AS_XOR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_XOR_ASSIGN = string("^=");$/;"	m	class:astyle::ASResource	file:
AS_XOR_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
AS__ASM__	ASResource.cpp	/^const string ASResource::AS__ASM__ = string("__asm__");$/;"	m	class:astyle::ASResource	file:
AS__ASM__	astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource	access:public
AStyleGetVersion	astyle_main.cpp	/^extern "C" EXPORT const char* STDCALL AStyleGetVersion(void)$/;"	f	signature:(void)
AStyleGetVersion	astyle_main.h	/^extern "C" EXPORT const char* STDCALL AStyleGetVersion(void);$/;"	p	signature:(void)
AStyleMain	astyle_main.cpp	/^extern "C" EXPORT char* STDCALL AStyleMain(const char* pSourceIn,		\/\/ the source to be formatted$/;"	f	signature:(const char* pSourceIn, const char* pOptions, fpError fpErrorHandler, fpAlloc fpMemoryAlloc)
AStyleMain	astyle_main.h	/^extern "C" EXPORT char* STDCALL AStyleMain(const char* sourceIn,$/;"	p	signature:(const char* sourceIn, const char* optionsIn, fpError errorHandler, fpAlloc memoryAlloc)
AStyleMainUtf16	astyle_main.cpp	/^extern "C" EXPORT utf16_t* STDCALL AStyleMainUtf16(const utf16_t* pSourceIn,	\/\/ the source to be formatted$/;"	f	signature:(const utf16_t* pSourceIn, const utf16_t* pOptions, fpError fpErrorHandler, fpAlloc fpMemoryAlloc)
ATTACH_MODE	astyle.h	/^	ATTACH_MODE,$/;"	e	enum:astyle::BracketMode
BREAK_MODE	astyle.h	/^	BREAK_MODE,$/;"	e	enum:astyle::BracketMode
BracketMode	astyle.h	/^enum BracketMode$/;"	g	namespace:astyle
BracketType	astyle.h	/^enum BracketType$/;"	g	namespace:astyle
CCFBaseTidy	CFBaseTidy.cpp	/^CCFBaseTidy::CCFBaseTidy()$/;"	f	class:CCFBaseTidy	signature:()
CCFBaseTidy	CFBaseTidy.h	/^	CCFBaseTidy();$/;"	p	class:CCFBaseTidy	access:public	signature:()
CCFBaseTidy	CFBaseTidy.h	/^class CCFBaseTidy$/;"	c
CCFBaseTidy::CCFBaseTidy	CFBaseTidy.cpp	/^CCFBaseTidy::CCFBaseTidy()$/;"	f	class:CCFBaseTidy	signature:()
CCFBaseTidy::CCFBaseTidy	CFBaseTidy.h	/^	CCFBaseTidy();$/;"	p	class:CCFBaseTidy	access:public	signature:()
CCFBaseTidy::InitTidyDefault	CFBaseTidy.cpp	/^void CCFBaseTidy::InitTidyDefault()$/;"	f	class:CCFBaseTidy	signature:()
CCFBaseTidy::InitTidyDefault	CFBaseTidy.h	/^	virtual void InitTidyDefault();$/;"	p	class:CCFBaseTidy	access:protected	signature:()
CCFBaseTidy::SetTidyFromOptions	CFBaseTidy.cpp	/^void CCFBaseTidy::SetTidyFromOptions(const char* pOptions)$/;"	f	class:CCFBaseTidy	signature:(const char* pOptions)
CCFBaseTidy::SetTidyFromOptions	CFBaseTidy.h	/^	void SetTidyFromOptions(const char* pOptions);$/;"	p	class:CCFBaseTidy	access:protected	signature:(const char* pOptions)
CCFBaseTidy::SetTidyOption	CFBaseTidy.cpp	/^void CCFBaseTidy::SetTidyOption(const char* pOption, int nPos, int nSize)$/;"	f	class:CCFBaseTidy	signature:(const char* pOption, int nPos, int nSize)
CCFBaseTidy::SetTidyOption	CFBaseTidy.h	/^	void SetTidyOption(const char* pOption, int nPos, int nSize);$/;"	p	class:CCFBaseTidy	access:protected	signature:(const char* pOption, int nPos, int nSize)
CCFBaseTidy::SetTidyProp	CFBaseTidy.cpp	/^void CCFBaseTidy::SetTidyProp(const std::string& \/*strParam*\/, int \/*nNumValue*\/, const std::string& \/*strNumValue*\/, const std::string& \/*strTextValue*\/)$/;"	f	class:CCFBaseTidy	signature:(const std::string& , int , const std::string& , const std::string& )
CCFBaseTidy::SetTidyProp	CFBaseTidy.h	/^	virtual void SetTidyProp(const std::string& strParam, int nNumValue, const std::string& strNumValue, const std::string& strTextValue);$/;"	p	class:CCFBaseTidy	access:protected	signature:(const std::string& strParam, int nNumValue, const std::string& strNumValue, const std::string& strTextValue)
CCFBaseTidy::TidyMain	CFBaseTidy.cpp	/^bool CCFBaseTidy::TidyMain(const char* \/*pSourceIn*\/, const char* \/*pOptions*\/, std::string &\/*strOut*\/, std::string &\/*strErr*\/)$/;"	f	class:CCFBaseTidy	signature:(const char* , const char* , std::string & , std::string & )
CCFBaseTidy::TidyMain	CFBaseTidy.h	/^	virtual bool TidyMain(const char* pSourceIn, const char* pOptions, std::string &strOut, std::string &strErr);$/;"	p	class:CCFBaseTidy	access:public	signature:(const char* pSourceIn, const char* pOptions, std::string &strOut, std::string &strErr)
CCFBaseTidy::TidyOptionsSet	CFBaseTidy.cpp	/^void CCFBaseTidy::TidyOptionsSet(void* pTidy, const char* pOptions)$/;"	f	class:CCFBaseTidy	signature:(void* pTidy, const char* pOptions)
CCFBaseTidy::TidyOptionsSet	CFBaseTidy.h	/^	void TidyOptionsSet(void* pTidy, const char* pOptions);$/;"	p	class:CCFBaseTidy	access:protected	signature:(void* pTidy, const char* pOptions)
CCFBaseTidy::tidy	CFBaseTidy.h	/^	void* tidy;$/;"	m	class:CCFBaseTidy	access:protected
CCFBaseTidy::~CCFBaseTidy	CFBaseTidy.cpp	/^CCFBaseTidy::~CCFBaseTidy()$/;"	f	class:CCFBaseTidy	signature:()
CCFBaseTidy::~CCFBaseTidy	CFBaseTidy.h	/^	virtual ~CCFBaseTidy();$/;"	p	class:CCFBaseTidy	access:public	signature:()
CCFCppTidy	CFCppTidy.cpp	/^CCFCppTidy::CCFCppTidy(void)$/;"	f	class:CCFCppTidy	signature:(void)
CCFCppTidy	CFCppTidy.h	/^	CCFCppTidy();$/;"	p	class:CCFCppTidy	access:public	signature:()
CCFCppTidy	CFCppTidy.h	/^class CCFCppTidy : public CCFBaseTidy$/;"	c	inherits:CCFBaseTidy
CCFCppTidy::CCFCppTidy	CFCppTidy.cpp	/^CCFCppTidy::CCFCppTidy(void)$/;"	f	class:CCFCppTidy	signature:(void)
CCFCppTidy::CCFCppTidy	CFCppTidy.h	/^	CCFCppTidy();$/;"	p	class:CCFCppTidy	access:public	signature:()
CCFCppTidy::InitTidyDefault	CFCppTidy.cpp	/^void CCFCppTidy::InitTidyDefault()$/;"	f	class:CCFCppTidy	signature:()
CCFCppTidy::InitTidyDefault	CFCppTidy.h	/^	void InitTidyDefault();$/;"	p	class:CCFCppTidy	access:protected	signature:()
CCFCppTidy::SetTidyProp	CFCppTidy.cpp	/^void CCFCppTidy::SetTidyProp(const std::string& \/*strParam*\/, int \/*nNumValue*\/, const std::string& \/*strNumValue*\/, const std::string& \/*strTextValue*\/)$/;"	f	class:CCFCppTidy	signature:(const std::string& , int , const std::string& , const std::string& )
CCFCppTidy::SetTidyProp	CFCppTidy.h	/^	void SetTidyProp(const std::string& strParam, int nNumValue, const std::string& strNumValue, const std::string& strTextValue);$/;"	p	class:CCFCppTidy	access:protected	signature:(const std::string& strParam, int nNumValue, const std::string& strNumValue, const std::string& strTextValue)
CCFCppTidy::TidyMain	CFCppTidy.cpp	/^bool CCFCppTidy::TidyMain(const char* pSourceIn, const char *pOptions, std::string &strOut, std::string &strErr)$/;"	f	class:CCFCppTidy	signature:(const char* pSourceIn, const char *pOptions, std::string &strOut, std::string &strErr)
CCFCppTidy::TidyMain	CFCppTidy.h	/^	bool TidyMain(const char* pSourceIn, const char* pOptions, std::string &strOut, std::string &strErr);$/;"	p	class:CCFCppTidy	access:public	signature:(const char* pSourceIn, const char* pOptions, std::string &strOut, std::string &strErr)
CCFCppTidy::~CCFCppTidy	CFCppTidy.cpp	/^CCFCppTidy::~CCFCppTidy(void)$/;"	f	class:CCFCppTidy	signature:(void)
CCFCppTidy::~CCFCppTidy	CFCppTidy.h	/^	~CCFCppTidy();$/;"	p	class:CCFCppTidy	access:public	signature:()
CFBASETIDY_H	CFBaseTidy.h	2;"	d
CFCPPTIDY_H	CFCppTidy.h	2;"	d
CInputOutputConfig	TinyFormat.cpp	/^class CInputOutputConfig $/;"	c	file:
CInputOutputConfig::m_strInput	TinyFormat.cpp	/^	std::string m_strInput;$/;"	m	class:CInputOutputConfig	file:	access:public
CInputOutputConfig::m_strOutput	TinyFormat.cpp	/^	std::string m_strOutput;$/;"	m	class:CInputOutputConfig	file:	access:public
CLASS_TYPE	astyle.h	/^	CLASS_TYPE = 2,				\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
CODE_TYPE	TinyFormat.cpp	/^}CODE_TYPE;$/;"	t	typeref:enum:code_type	file:
COLON_PAD_AFTER	astyle.h	/^	COLON_PAD_AFTER,$/;"	e	enum:astyle::ObjCColonPad
COLON_PAD_ALL	astyle.h	/^	COLON_PAD_ALL,$/;"	e	enum:astyle::ObjCColonPad
COLON_PAD_BEFORE	astyle.h	/^	COLON_PAD_BEFORE$/;"	e	enum:astyle::ObjCColonPad
COLON_PAD_NONE	astyle.h	/^	COLON_PAD_NONE,$/;"	e	enum:astyle::ObjCColonPad
COLON_PAD_NO_CHANGE	astyle.h	/^	COLON_PAD_NO_CHANGE,$/;"	e	enum:astyle::ObjCColonPad
COMMAND_TYPE	astyle.h	/^	COMMAND_TYPE = 32,$/;"	e	enum:astyle::BracketType
CXX	makefile	/^CXX=g++$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS=-std=c++11$/;"	m
CXX_TYPE	TinyFormat.cpp	/^	CXX_TYPE,$/;"	e	enum:code_type	file:
C_TYPE	TinyFormat.cpp	/^	C_TYPE,$/;"	e	enum:code_type	file:
C_TYPE	astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
ChineseSimplified	ASLocalizer.cpp	/^ChineseSimplified::ChineseSimplified()	\/\/ 中文（简体）$/;"	f	class:astyle::ChineseSimplified	signature:()
ChineseSimplified	ASLocalizer.h	/^		ChineseSimplified();$/;"	p	class:astyle::ChineseSimplified	access:public	signature:()
ChineseSimplified	ASLocalizer.h	/^class ChineseSimplified : public Translation$/;"	c	namespace:astyle	inherits:Translation
ChineseTraditional	ASLocalizer.cpp	/^ChineseTraditional::ChineseTraditional()	\/\/ 中文（繁體）$/;"	f	class:astyle::ChineseTraditional	signature:()
ChineseTraditional	ASLocalizer.h	/^		ChineseTraditional();$/;"	p	class:astyle::ChineseTraditional	access:public	signature:()
ChineseTraditional	ASLocalizer.h	/^class ChineseTraditional : public Translation$/;"	c	namespace:astyle	inherits:Translation
DEFINITION_TYPE	astyle.h	/^	DEFINITION_TYPE = 16,$/;"	e	enum:astyle::BracketType
Dutch	ASLocalizer.cpp	/^Dutch::Dutch()	\/\/ Nederlandse$/;"	f	class:astyle::Dutch	signature:()
Dutch	ASLocalizer.h	/^		Dutch();$/;"	p	class:astyle::Dutch	access:public	signature:()
Dutch	ASLocalizer.h	/^class Dutch : public Translation$/;"	c	namespace:astyle	inherits:Translation
ENCODING_8BIT	astyle.h	/^	ENCODING_8BIT,$/;"	e	enum:astyle::FileEncoding
ENUM_TYPE	astyle.h	/^	ENUM_TYPE = 128,			\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
EXPORT	astyle_main.h	99;"	d
EXTERN_TYPE	astyle.h	/^	EXTERN_TYPE = 1024,			\/\/ extern "C", not a command type extern$/;"	e	enum:astyle::BracketType
English	ASLocalizer.cpp	/^English::English()$/;"	f	class:astyle::English	signature:()
English	ASLocalizer.h	/^		English();$/;"	p	class:astyle::English	access:public	signature:()
English	ASLocalizer.h	/^class English : public Translation$/;"	c	namespace:astyle	inherits:Translation
FileEncoding	astyle.h	/^enum FileEncoding$/;"	g	namespace:astyle
FileType	astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	g	namespace:astyle
Finnish	ASLocalizer.cpp	/^Finnish::Finnish()	\/\/ Suomeksi$/;"	f	class:astyle::Finnish	signature:()
Finnish	ASLocalizer.h	/^		Finnish();$/;"	p	class:astyle::Finnish	access:public	signature:()
Finnish	ASLocalizer.h	/^class Finnish : public Translation$/;"	c	namespace:astyle	inherits:Translation
FormatCode	TinyFormat.cpp	/^bool FormatCode(const char * srcFile,const char * dstFile,int codeType = 0)$/;"	f	signature:(const char * srcFile,const char * dstFile,int codeType = 0)
FormatStyle	astyle.h	/^enum FormatStyle$/;"	g	namespace:astyle
French	ASLocalizer.cpp	/^French::French()	\/\/ Française$/;"	f	class:astyle::French	signature:()
French	ASLocalizer.h	/^		French();$/;"	p	class:astyle::French	access:public	signature:()
French	ASLocalizer.h	/^class French : public Translation$/;"	c	namespace:astyle	inherits:Translation
German	ASLocalizer.cpp	/^German::German()	\/\/ Deutsch$/;"	f	class:astyle::German	signature:()
German	ASLocalizer.h	/^		German();$/;"	p	class:astyle::German	access:public	signature:()
German	ASLocalizer.h	/^class German : public Translation$/;"	c	namespace:astyle	inherits:Translation
GetFileExtern	TinyFormat.cpp	/^std::string GetFileExtern(const char * pFileName)$/;"	f	signature:(const char * pFileName)
Hindi	ASLocalizer.cpp	/^Hindi::Hindi()	\/\/ हिन्दी$/;"	f	class:astyle::Hindi	signature:()
Hindi	ASLocalizer.h	/^		Hindi();$/;"	p	class:astyle::Hindi	access:public	signature:()
Hindi	ASLocalizer.h	/^class Hindi : public Translation$/;"	c	namespace:astyle	inherits:Translation
INIT_TYPE	astyle.h	/^	INIT_TYPE = 256,			\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
INTERFACE_TYPE	astyle.h	/^	INTERFACE_TYPE = 8,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
InitTidyDefault	CFBaseTidy.cpp	/^void CCFBaseTidy::InitTidyDefault()$/;"	f	class:CCFBaseTidy	signature:()
InitTidyDefault	CFBaseTidy.h	/^	virtual void InitTidyDefault();$/;"	p	class:CCFBaseTidy	access:protected	signature:()
InitTidyDefault	CFCppTidy.cpp	/^void CCFCppTidy::InitTidyDefault()$/;"	f	class:CCFCppTidy	signature:()
InitTidyDefault	CFCppTidy.h	/^	void InitTidyDefault();$/;"	p	class:CCFCppTidy	access:protected	signature:()
IsPathAFolder	TinyFormat.cpp	/^bool IsPathAFolder(const char * pChPath)$/;"	f	signature:(const char * pChPath)
Italian	ASLocalizer.cpp	/^Italian::Italian()	\/\/ Italiano$/;"	f	class:astyle::Italian	signature:()
Italian	ASLocalizer.h	/^		Italian();$/;"	p	class:astyle::Italian	access:public	signature:()
Italian	ASLocalizer.h	/^class Italian : public Translation$/;"	c	namespace:astyle	inherits:Translation
JAVA_TYPE	astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
Japanese	ASLocalizer.cpp	/^Japanese::Japanese()	\/\/ 日本$/;"	f	class:astyle::Japanese	signature:()
Japanese	ASLocalizer.h	/^		Japanese();$/;"	p	class:astyle::Japanese	access:public	signature:()
Japanese	ASLocalizer.h	/^class Japanese : public Translation$/;"	c	namespace:astyle	inherits:Translation
Java_AStyleInterface_AStyleGetVersion	astyle_main.cpp	/^jstring STDCALL Java_AStyleInterface_AStyleGetVersion(JNIEnv* env, jclass)$/;"	f	signature:(JNIEnv* env, jclass)
Java_AStyleInterface_AStyleMain	astyle_main.cpp	/^jstring STDCALL Java_AStyleInterface_AStyleMain(JNIEnv* env,$/;"	f	signature:(JNIEnv* env, jobject obj, jstring textInJava, jstring optionsJava)
Korean	ASLocalizer.cpp	/^Korean::Korean()	\/\/ 한국의$/;"	f	class:astyle::Korean	signature:()
Korean	ASLocalizer.h	/^		Korean();$/;"	p	class:astyle::Korean	access:public	signature:()
Korean	ASLocalizer.h	/^class Korean : public Translation$/;"	c	namespace:astyle	inherits:Translation
LANG_HINDI	ASLocalizer.cpp	/^	const size_t LANG_HINDI = 57;$/;"	v
LINEEND_CR	astyle.h	/^	LINEEND_CR   = LINEEND_MACOLD$/;"	e	enum:astyle::LineEndFormat
LINEEND_CRLF	astyle.h	/^	LINEEND_CRLF = LINEEND_WINDOWS,$/;"	e	enum:astyle::LineEndFormat
LINEEND_DEFAULT	astyle.h	/^	LINEEND_DEFAULT,	\/\/ Use line break that matches most of the file$/;"	e	enum:astyle::LineEndFormat
LINEEND_LF	astyle.h	/^	LINEEND_LF   = LINEEND_LINUX,$/;"	e	enum:astyle::LineEndFormat
LINEEND_LINUX	astyle.h	/^	LINEEND_LINUX,$/;"	e	enum:astyle::LineEndFormat
LINEEND_MACOLD	astyle.h	/^	LINEEND_MACOLD,$/;"	e	enum:astyle::LineEndFormat
LINEEND_WINDOWS	astyle.h	/^	LINEEND_WINDOWS,$/;"	e	enum:astyle::LineEndFormat
LINUX_MODE	astyle.h	/^	LINUX_MODE,$/;"	e	enum:astyle::BracketMode
LineEndFormat	astyle.h	/^enum LineEndFormat$/;"	g	namespace:astyle
MINCOND_END	astyle.h	/^	MINCOND_END$/;"	e	enum:astyle::MinConditional
MINCOND_ONE	astyle.h	/^	MINCOND_ONE,$/;"	e	enum:astyle::MinConditional
MINCOND_ONEHALF	astyle.h	/^	MINCOND_ONEHALF,$/;"	e	enum:astyle::MinConditional
MINCOND_TWO	astyle.h	/^	MINCOND_TWO,$/;"	e	enum:astyle::MinConditional
MINCOND_ZERO	astyle.h	/^	MINCOND_ZERO,$/;"	e	enum:astyle::MinConditional
MinConditional	astyle.h	/^enum MinConditional$/;"	g	namespace:astyle
NAMESPACE_TYPE	astyle.h	/^	NAMESPACE_TYPE = 1,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
NONE_MODE	astyle.h	/^	NONE_MODE,$/;"	e	enum:astyle::BracketMode
NULL_TYPE	astyle.h	/^	NULL_TYPE = 0,$/;"	e	enum:astyle::BracketType
ObjCColonPad	astyle.h	/^enum ObjCColonPad$/;"	g	namespace:astyle
PTR_ALIGN_MIDDLE	astyle.h	/^	PTR_ALIGN_MIDDLE,$/;"	e	enum:astyle::PointerAlign
PTR_ALIGN_NAME	astyle.h	/^	PTR_ALIGN_NAME$/;"	e	enum:astyle::PointerAlign
PTR_ALIGN_NONE	astyle.h	/^	PTR_ALIGN_NONE,$/;"	e	enum:astyle::PointerAlign
PTR_ALIGN_TYPE	astyle.h	/^	PTR_ALIGN_TYPE,$/;"	e	enum:astyle::PointerAlign
ParseInput	TinyFormat.cpp	/^bool ParseInput(int argc,char * argv[],CInputOutputConfig & config)$/;"	f	signature:(int argc,char * argv[],CInputOutputConfig & config)
PointerAlign	astyle.h	/^enum PointerAlign$/;"	g	namespace:astyle
Polish	ASLocalizer.cpp	/^Polish::Polish()	\/\/ Polski$/;"	f	class:astyle::Polish	signature:()
Polish	ASLocalizer.h	/^		Polish();$/;"	p	class:astyle::Polish	access:public	signature:()
Polish	ASLocalizer.h	/^class Polish : public Translation$/;"	c	namespace:astyle	inherits:Translation
Portuguese	ASLocalizer.cpp	/^Portuguese::Portuguese()	\/\/ Português$/;"	f	class:astyle::Portuguese	signature:()
Portuguese	ASLocalizer.h	/^		Portuguese();$/;"	p	class:astyle::Portuguese	access:public	signature:()
Portuguese	ASLocalizer.h	/^class Portuguese : public Translation$/;"	c	namespace:astyle	inherits:Translation
PrintHelpInfo	TinyFormat.cpp	/^void PrintHelpInfo()$/;"	f	signature:()
PrintVersionInfo	TinyFormat.cpp	/^void PrintVersionInfo()$/;"	f	signature:()
REF_ALIGN_MIDDLE	astyle.h	/^	REF_ALIGN_MIDDLE = PTR_ALIGN_MIDDLE,$/;"	e	enum:astyle::ReferenceAlign
REF_ALIGN_NAME	astyle.h	/^	REF_ALIGN_NAME = PTR_ALIGN_NAME,$/;"	e	enum:astyle::ReferenceAlign
REF_ALIGN_NONE	astyle.h	/^	REF_ALIGN_NONE = PTR_ALIGN_NONE,$/;"	e	enum:astyle::ReferenceAlign
REF_ALIGN_TYPE	astyle.h	/^	REF_ALIGN_TYPE = PTR_ALIGN_TYPE,$/;"	e	enum:astyle::ReferenceAlign
REF_SAME_AS_PTR	astyle.h	/^	REF_SAME_AS_PTR$/;"	e	enum:astyle::ReferenceAlign
RUN_IN_MODE	astyle.h	/^	RUN_IN_MODE$/;"	e	enum:astyle::BracketMode
ReadStringFromFile	TinyFormat.cpp	/^bool  ReadStringFromFile(const char * chFileName,std::string & strFileText)$/;"	f	signature:(const char * chFileName,std::string & strFileText)
ReferenceAlign	astyle.h	/^enum ReferenceAlign$/;"	g	namespace:astyle
Russian	ASLocalizer.cpp	/^Russian::Russian()	\/\/ русский$/;"	f	class:astyle::Russian	signature:()
Russian	ASLocalizer.h	/^		Russian();$/;"	p	class:astyle::Russian	access:public	signature:()
Russian	ASLocalizer.h	/^class Russian : public Translation$/;"	c	namespace:astyle	inherits:Translation
SHARP_TYPE	astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
SINGLE_LINE_TYPE	astyle.h	/^	SINGLE_LINE_TYPE = 2048$/;"	e	enum:astyle::BracketType
STDCALL	astyle_main.h	95;"	d
STROUSTRUP_MODE	astyle.h	/^	STROUSTRUP_MODE,$/;"	e	enum:astyle::BracketMode
STRUCT_TYPE	astyle.h	/^	STRUCT_TYPE = 4,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
STR_SHORT_TEXT_FALG	CFBaseTidy.cpp	70;"	d	file:
STYLE_1TBS	astyle.h	/^	STYLE_1TBS,$/;"	e	enum:astyle::FormatStyle
STYLE_ALLMAN	astyle.h	/^	STYLE_ALLMAN,$/;"	e	enum:astyle::FormatStyle
STYLE_BANNER	astyle.h	/^	STYLE_BANNER,$/;"	e	enum:astyle::FormatStyle
STYLE_GNU	astyle.h	/^	STYLE_GNU,$/;"	e	enum:astyle::FormatStyle
STYLE_GOOGLE	astyle.h	/^	STYLE_GOOGLE,$/;"	e	enum:astyle::FormatStyle
STYLE_HORSTMANN	astyle.h	/^	STYLE_HORSTMANN,$/;"	e	enum:astyle::FormatStyle
STYLE_JAVA	astyle.h	/^	STYLE_JAVA,$/;"	e	enum:astyle::FormatStyle
STYLE_KR	astyle.h	/^	STYLE_KR,$/;"	e	enum:astyle::FormatStyle
STYLE_LINUX	astyle.h	/^	STYLE_LINUX,$/;"	e	enum:astyle::FormatStyle
STYLE_LISP	astyle.h	/^	STYLE_LISP$/;"	e	enum:astyle::FormatStyle
STYLE_NONE	astyle.h	/^	STYLE_NONE,$/;"	e	enum:astyle::FormatStyle
STYLE_PICO	astyle.h	/^	STYLE_PICO,$/;"	e	enum:astyle::FormatStyle
STYLE_STROUSTRUP	astyle.h	/^	STYLE_STROUSTRUP,$/;"	e	enum:astyle::FormatStyle
STYLE_VTK	astyle.h	/^	STYLE_VTK,$/;"	e	enum:astyle::FormatStyle
STYLE_WHITESMITH	astyle.h	/^	STYLE_WHITESMITH,$/;"	e	enum:astyle::FormatStyle
SUBLANG_CHINESE_MACAU	ASLocalizer.cpp	/^	const size_t SUBLANG_CHINESE_MACAU = 5;$/;"	v
SURROGATE_FIRST_VALUE	astyle_main.h	/^		enum { SURROGATE_FIRST_VALUE = 0x10000 };$/;"	e	enum:astyle::Utf8_16::__anon5
SURROGATE_LEAD_FIRST	astyle_main.h	/^		enum { SURROGATE_LEAD_FIRST = 0xD800 };$/;"	e	enum:astyle::Utf8_16::__anon1
SURROGATE_LEAD_LAST	astyle_main.h	/^		enum { SURROGATE_LEAD_LAST = 0xDBFF };$/;"	e	enum:astyle::Utf8_16::__anon2
SURROGATE_TRAIL_FIRST	astyle_main.h	/^		enum { SURROGATE_TRAIL_FIRST = 0xDC00 };$/;"	e	enum:astyle::Utf8_16::__anon3
SURROGATE_TRAIL_LAST	astyle_main.h	/^		enum { SURROGATE_TRAIL_LAST = 0xDFFF };$/;"	e	enum:astyle::Utf8_16::__anon4
SetTidyFromOptions	CFBaseTidy.cpp	/^void CCFBaseTidy::SetTidyFromOptions(const char* pOptions)$/;"	f	class:CCFBaseTidy	signature:(const char* pOptions)
SetTidyFromOptions	CFBaseTidy.h	/^	void SetTidyFromOptions(const char* pOptions);$/;"	p	class:CCFBaseTidy	access:protected	signature:(const char* pOptions)
SetTidyOption	CFBaseTidy.cpp	/^void CCFBaseTidy::SetTidyOption(const char* pOption, int nPos, int nSize)$/;"	f	class:CCFBaseTidy	signature:(const char* pOption, int nPos, int nSize)
SetTidyOption	CFBaseTidy.h	/^	void SetTidyOption(const char* pOption, int nPos, int nSize);$/;"	p	class:CCFBaseTidy	access:protected	signature:(const char* pOption, int nPos, int nSize)
SetTidyProp	CFBaseTidy.cpp	/^void CCFBaseTidy::SetTidyProp(const std::string& \/*strParam*\/, int \/*nNumValue*\/, const std::string& \/*strNumValue*\/, const std::string& \/*strTextValue*\/)$/;"	f	class:CCFBaseTidy	signature:(const std::string& , int , const std::string& , const std::string& )
SetTidyProp	CFBaseTidy.h	/^	virtual void SetTidyProp(const std::string& strParam, int nNumValue, const std::string& strNumValue, const std::string& strTextValue);$/;"	p	class:CCFBaseTidy	access:protected	signature:(const std::string& strParam, int nNumValue, const std::string& strNumValue, const std::string& strTextValue)
SetTidyProp	CFCppTidy.cpp	/^void CCFCppTidy::SetTidyProp(const std::string& \/*strParam*\/, int \/*nNumValue*\/, const std::string& \/*strNumValue*\/, const std::string& \/*strTextValue*\/)$/;"	f	class:CCFCppTidy	signature:(const std::string& , int , const std::string& , const std::string& )
SetTidyProp	CFCppTidy.h	/^	void SetTidyProp(const std::string& strParam, int nNumValue, const std::string& strNumValue, const std::string& strTextValue);$/;"	p	class:CCFCppTidy	access:protected	signature:(const std::string& strParam, int nNumValue, const std::string& strNumValue, const std::string& strTextValue)
Spanish	ASLocalizer.cpp	/^Spanish::Spanish()	\/\/ Español$/;"	f	class:astyle::Spanish	signature:()
Spanish	ASLocalizer.h	/^		Spanish();$/;"	p	class:astyle::Spanish	access:public	signature:()
Spanish	ASLocalizer.h	/^class Spanish : public Translation$/;"	c	namespace:astyle	inherits:Translation
Swedish	ASLocalizer.cpp	/^Swedish::Swedish()	\/\/ Svenska$/;"	f	class:astyle::Swedish	signature:()
Swedish	ASLocalizer.h	/^		Swedish();$/;"	p	class:astyle::Swedish	access:public	signature:()
Swedish	ASLocalizer.h	/^class Swedish : public Translation$/;"	c	namespace:astyle	inherits:Translation
TARGET	makefile	/^TARGET=TinyFormat.exe$/;"	m
TidyMain	CFBaseTidy.cpp	/^bool CCFBaseTidy::TidyMain(const char* \/*pSourceIn*\/, const char* \/*pOptions*\/, std::string &\/*strOut*\/, std::string &\/*strErr*\/)$/;"	f	class:CCFBaseTidy	signature:(const char* , const char* , std::string & , std::string & )
TidyMain	CFBaseTidy.h	/^	virtual bool TidyMain(const char* pSourceIn, const char* pOptions, std::string &strOut, std::string &strErr);$/;"	p	class:CCFBaseTidy	access:public	signature:(const char* pSourceIn, const char* pOptions, std::string &strOut, std::string &strErr)
TidyMain	CFCppTidy.cpp	/^bool CCFCppTidy::TidyMain(const char* pSourceIn, const char *pOptions, std::string &strOut, std::string &strErr)$/;"	f	class:CCFCppTidy	signature:(const char* pSourceIn, const char *pOptions, std::string &strOut, std::string &strErr)
TidyMain	CFCppTidy.h	/^	bool TidyMain(const char* pSourceIn, const char* pOptions, std::string &strOut, std::string &strErr);$/;"	p	class:CCFCppTidy	access:public	signature:(const char* pSourceIn, const char* pOptions, std::string &strOut, std::string &strErr)
TidyOptionsSet	CFBaseTidy.cpp	/^void CCFBaseTidy::TidyOptionsSet(void* pTidy, const char* pOptions)$/;"	f	class:CCFBaseTidy	signature:(void* pTidy, const char* pOptions)
TidyOptionsSet	CFBaseTidy.h	/^	void TidyOptionsSet(void* pTidy, const char* pOptions);$/;"	p	class:CCFBaseTidy	access:protected	signature:(void* pTidy, const char* pOptions)
Translation	ASLocalizer.h	/^		Translation() {}$/;"	f	class:astyle::Translation	access:public	signature:()
Translation	ASLocalizer.h	/^class Translation$/;"	c	namespace:astyle
UNICODE	astyle_main.cpp	61;"	d	file:
UTF_16BE	astyle.h	/^	UTF_16BE,$/;"	e	enum:astyle::FileEncoding
UTF_16LE	astyle.h	/^	UTF_16LE,     \/\/ Windows default$/;"	e	enum:astyle::FileEncoding
UTF_32BE	astyle.h	/^	UTF_32BE,$/;"	e	enum:astyle::FileEncoding
UTF_32LE	astyle.h	/^	UTF_32LE$/;"	e	enum:astyle::FileEncoding
Ukrainian	ASLocalizer.cpp	/^Ukrainian::Ukrainian()	\/\/ Український$/;"	f	class:astyle::Ukrainian	signature:()
Ukrainian	ASLocalizer.h	/^		Ukrainian();$/;"	p	class:astyle::Ukrainian	access:public	signature:()
Ukrainian	ASLocalizer.h	/^class Ukrainian : public Translation$/;"	c	namespace:astyle	inherits:Translation
Utf16LengthFromUtf8	astyle_main.cpp	/^size_t Utf8_16::Utf16LengthFromUtf8(const char* utf8In, size_t len) const$/;"	f	class:astyle::Utf8_16	signature:(const char* utf8In, size_t len) const
Utf16LengthFromUtf8	astyle_main.h	/^		size_t Utf16LengthFromUtf8(const char* utf8In, size_t inLen) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(const char* utf8In, size_t inLen) const
Utf16ToUtf8	astyle_main.cpp	/^size_t Utf8_16::Utf16ToUtf8(char* utf16In, size_t inLen, bool isBigEndian,$/;"	f	class:astyle::Utf8_16	signature:(char* utf16In, size_t inLen, bool isBigEndian, bool firstBlock, char* utf8Out) const
Utf16ToUtf8	astyle_main.h	/^		size_t Utf16ToUtf8(char* utf16In, size_t inLen, bool isBigEndian,$/;"	p	class:astyle::Utf8_16	access:public	signature:(char* utf16In, size_t inLen, bool isBigEndian, bool firstBlock, char* utf8Out) const
Utf8LengthFromUtf16	astyle_main.cpp	/^size_t Utf8_16::Utf8LengthFromUtf16(const char* utf16In, size_t inLen, bool isBigEndian) const$/;"	f	class:astyle::Utf8_16	signature:(const char* utf16In, size_t inLen, bool isBigEndian) const
Utf8LengthFromUtf16	astyle_main.h	/^		size_t Utf8LengthFromUtf16(const char* utf16In, size_t inLen, bool isBigEndian) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(const char* utf16In, size_t inLen, bool isBigEndian) const
Utf8ToUtf16	astyle_main.cpp	/^size_t Utf8_16::Utf8ToUtf16(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const$/;"	f	class:astyle::Utf8_16	signature:(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const
Utf8ToUtf16	astyle_main.h	/^		size_t Utf8ToUtf16(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const
Utf8_16	astyle_main.h	/^class Utf8_16$/;"	c	namespace:astyle
WalkDir	TinyFormat.cpp	/^bool WalkDir(const char * dir,std::vector<std::string> & fileVec)$/;"	f	signature:(const char * dir,std::vector<std::string> & fileVec)
WinLangCode	ASLocalizer.cpp	/^struct WinLangCode$/;"	s	namespace:astyle	file:
WriteStringToFile	TinyFormat.cpp	/^bool WriteStringToFile(const std::string strFileText,const char * chFileName)$/;"	f	signature:(const std::string strFileText,const char * chFileName)
_	astyle_main.h	64;"	d
_AS_EXCEPT	ASResource.cpp	/^const string ASResource::_AS_EXCEPT = string("__except");$/;"	m	class:astyle::ASResource	file:
_AS_EXCEPT	astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource	access:public
_AS_FINALLY	ASResource.cpp	/^const string ASResource::_AS_FINALLY = string("__finally");$/;"	m	class:astyle::ASResource	file:
_AS_FINALLY	astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource	access:public
_AS_TRY	ASResource.cpp	/^const string ASResource::_AS_TRY = string("__try");$/;"	m	class:astyle::ASResource	file:
_AS_TRY	astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource	access:public
_CRT_glob	astyle_main.cpp	/^	int _CRT_glob = 0;$/;"	v
__USE_STD_IOSTREAM	ASLocalizer.cpp	58;"	d	file:
__USE_STD_IOSTREAM	astyle.h	31;"	d
_err	astyle_main.cpp	/^	ostream* _err = &cerr;           \/\/ direct error messages to cerr$/;"	m	namespace:astyle	file:
activeBeautifierStack	astyle.h	/^		vector<ASBeautifier*>* activeBeautifierStack;$/;"	m	class:astyle::ASBeautifier	access:private
activeBeautifierStackLengthStack	astyle.h	/^		vector<int>* activeBeautifierStackLengthStack;$/;"	m	class:astyle::ASBeautifier	access:private
addBracketsToStatement	ASFormatter.cpp	/^bool ASFormatter::addBracketsToStatement()$/;"	f	class:astyle::ASFormatter	signature:()
addBracketsToStatement	astyle.h	/^		bool addBracketsToStatement();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
addPair	ASLocalizer.cpp	/^void Translation::addPair(const string &english, const wstring &translated)$/;"	f	class:astyle::Translation	signature:(const string &english, const wstring &translated)
addPair	ASLocalizer.h	/^		void addPair(const string &english, const wstring &translated);$/;"	p	class:astyle::Translation	access:protected	signature:(const string &english, const wstring &translated)
adjustChecksumIn	ASFormatter.cpp	/^bool ASFormatter::adjustChecksumIn(int adjustment)$/;"	f	class:astyle::ASFormatter	signature:(int adjustment)
adjustChecksumIn	astyle.h	/^		bool adjustChecksumIn(int adjustment);$/;"	p	class:astyle::ASFormatter	access:private	signature:(int adjustment)
adjustComments	ASFormatter.cpp	/^void ASFormatter::adjustComments(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
adjustComments	astyle.h	/^		void adjustComments();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
adjustIndentCountForBreakElseIfComments	ASBeautifier.cpp	/^int ASBeautifier::adjustIndentCountForBreakElseIfComments() const$/;"	f	class:astyle::ASBeautifier	signature:() const
adjustIndentCountForBreakElseIfComments	astyle.h	/^		int  adjustIndentCountForBreakElseIfComments() const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:() const
adjustParsedLineIndentation	ASBeautifier.cpp	/^void ASBeautifier::adjustParsedLineIndentation(size_t iPrelim, bool isInExtraHeaderIndent)$/;"	f	class:astyle::ASBeautifier	signature:(size_t iPrelim, bool isInExtraHeaderIndent)
adjustParsedLineIndentation	astyle.h	/^		void adjustParsedLineIndentation(size_t iPrelim, bool isInExtraHeaderIndent);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(size_t iPrelim, bool isInExtraHeaderIndent)
appendChar	ASFormatter.cpp	/^void ASFormatter::appendChar(char ch, bool canBreakLine)$/;"	f	class:astyle::ASFormatter	signature:(char ch, bool canBreakLine)
appendChar	astyle.h	/^		void appendChar(char ch, bool canBreakLine);$/;"	p	class:astyle::ASFormatter	access:private	signature:(char ch, bool canBreakLine)
appendCharInsideComments	ASFormatter.cpp	/^void ASFormatter::appendCharInsideComments(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
appendCharInsideComments	astyle.h	/^		void appendCharInsideComments();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
appendCurrentChar	astyle.h	/^		void appendCurrentChar(bool canBreakLine = true) {$/;"	f	class:astyle::ASFormatter	access:private	signature:(bool canBreakLine = true)
appendOpeningBracket	astyle.h	/^		bool appendOpeningBracket;$/;"	m	class:astyle::ASFormatter	access:private
appendOperator	ASFormatter.cpp	/^void ASFormatter::appendOperator(const string &sequence, bool canBreakLine)$/;"	f	class:astyle::ASFormatter	signature:(const string &sequence, bool canBreakLine)
appendOperator	astyle.h	/^		void appendOperator(const string &sequence, bool canBreakLine = true);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &sequence, bool canBreakLine = true)
appendSequence	ASFormatter.cpp	/^void ASFormatter::appendSequence(const string &sequence, bool canBreakLine)$/;"	f	class:astyle::ASFormatter	signature:(const string &sequence, bool canBreakLine)
appendSequence	astyle.h	/^		void appendSequence(const string &sequence, bool canBreakLine = true);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &sequence, bool canBreakLine = true)
appendSpaceAfter	ASFormatter.cpp	/^void ASFormatter::appendSpaceAfter()$/;"	f	class:astyle::ASFormatter	signature:()
appendSpaceAfter	astyle.h	/^		void appendSpaceAfter();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
appendSpacePad	ASFormatter.cpp	/^void ASFormatter::appendSpacePad()$/;"	f	class:astyle::ASFormatter	signature:()
appendSpacePad	astyle.h	/^		void appendSpacePad();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
assignmentOperators	astyle.h	/^		vector<const string*>* assignmentOperators;$/;"	m	class:astyle::ASBeautifier	access:private
assignmentOperators	astyle.h	/^		vector<const string*>* assignmentOperators;$/;"	m	class:astyle::ASFormatter	access:private
astyle	ASBeautifier.cpp	/^namespace astyle {$/;"	n	file:
astyle	ASEnhancer.cpp	/^namespace astyle {$/;"	n	file:
astyle	ASFormatter.cpp	/^namespace astyle {$/;"	n	file:
astyle	ASLocalizer.cpp	/^namespace astyle {$/;"	n	file:
astyle	ASLocalizer.h	/^namespace astyle {$/;"	n
astyle	ASResource.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle.h	/^namespace astyle {$/;"	n
astyle	astyle_main.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle_main.h	/^namespace astyle {$/;"	n
astyle::ARRAY_NIS_TYPE	astyle.h	/^	ARRAY_NIS_TYPE = 64,		\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
astyle::ARRAY_TYPE	astyle.h	/^	ARRAY_TYPE = 512,$/;"	e	enum:astyle::BracketType
astyle::ASBase	astyle.h	/^class ASBase$/;"	c	namespace:astyle
astyle::ASBase::ASBase	astyle.h	/^		ASBase() : baseFileType(C_TYPE) { }$/;"	f	class:astyle::ASBase	access:protected	signature:()
astyle::ASBase::baseFileType	astyle.h	/^		int baseFileType;      \/\/ a value from enum FileType$/;"	m	class:astyle::ASBase	access:private
astyle::ASBase::findKeyword	ASResource.cpp	/^bool ASBase::findKeyword(const string &line, int i, const string &keyword) const$/;"	f	class:astyle::ASBase	signature:(const string &line, int i, const string &keyword) const
astyle::ASBase::findKeyword	astyle.h	/^		bool findKeyword(const string &line, int i, const string &keyword) const;$/;"	p	class:astyle::ASBase	access:protected	signature:(const string &line, int i, const string &keyword) const
astyle::ASBase::getCurrentWord	ASResource.cpp	/^string ASBase::getCurrentWord(const string &line, size_t index) const$/;"	f	class:astyle::ASBase	signature:(const string &line, size_t index) const
astyle::ASBase::getCurrentWord	astyle.h	/^		string getCurrentWord(const string &line, size_t index) const;$/;"	p	class:astyle::ASBase	access:protected	signature:(const string &line, size_t index) const
astyle::ASBase::init	astyle.h	/^		void init(int fileTypeArg) { baseFileType = fileTypeArg; }$/;"	f	class:astyle::ASBase	access:protected	signature:(int fileTypeArg)
astyle::ASBase::isCStyle	astyle.h	/^		bool isCStyle() const { return (baseFileType == C_TYPE); }$/;"	f	class:astyle::ASBase	access:protected	signature:() const
astyle::ASBase::isCharPotentialHeader	astyle.h	/^		bool isCharPotentialHeader(const string &line, size_t i) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(const string &line, size_t i) const
astyle::ASBase::isCharPotentialOperator	astyle.h	/^		bool isCharPotentialOperator(char ch) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(char ch) const
astyle::ASBase::isDigit	astyle.h	/^		bool isDigit(char ch) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(char ch) const
astyle::ASBase::isJavaStyle	astyle.h	/^		bool isJavaStyle() const { return (baseFileType == JAVA_TYPE); }$/;"	f	class:astyle::ASBase	access:protected	signature:() const
astyle::ASBase::isLegalNameChar	astyle.h	/^		bool isLegalNameChar(char ch) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(char ch) const
astyle::ASBase::isSharpStyle	astyle.h	/^		bool isSharpStyle() const { return (baseFileType == SHARP_TYPE); }$/;"	f	class:astyle::ASBase	access:protected	signature:() const
astyle::ASBase::isWhiteSpace	astyle.h	/^		bool isWhiteSpace(char ch) const { return (ch == ' ' || ch == '\\t'); }$/;"	f	class:astyle::ASBase	access:protected	signature:(char ch) const
astyle::ASBase::peekNextChar	astyle.h	/^		char peekNextChar(const string &line, int i) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(const string &line, int i) const
astyle::ASBase::~ASBase	astyle.h	/^		virtual ~ASBase() {}$/;"	f	class:astyle::ASBase	access:protected	signature:()
astyle::ASBeautifier	astyle.h	/^class ASBeautifier : protected ASResource, protected ASBase$/;"	c	namespace:astyle	inherits:ASResource,ASBase
astyle::ASBeautifier::ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::ASBeautifier()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::ASBeautifier(const ASBeautifier &other) : ASBase(other)$/;"	f	class:astyle::ASBeautifier	signature:(const ASBeautifier &other)
astyle::ASBeautifier::ASBeautifier	astyle.h	/^		ASBeautifier();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
astyle::ASBeautifier::ASBeautifier	astyle.h	/^		ASBeautifier(const ASBeautifier &copy);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const ASBeautifier &copy)
astyle::ASBeautifier::activeBeautifierStack	astyle.h	/^		vector<ASBeautifier*>* activeBeautifierStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::activeBeautifierStackLengthStack	astyle.h	/^		vector<int>* activeBeautifierStackLengthStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::adjustIndentCountForBreakElseIfComments	ASBeautifier.cpp	/^int ASBeautifier::adjustIndentCountForBreakElseIfComments() const$/;"	f	class:astyle::ASBeautifier	signature:() const
astyle::ASBeautifier::adjustIndentCountForBreakElseIfComments	astyle.h	/^		int  adjustIndentCountForBreakElseIfComments() const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:() const
astyle::ASBeautifier::adjustParsedLineIndentation	ASBeautifier.cpp	/^void ASBeautifier::adjustParsedLineIndentation(size_t iPrelim, bool isInExtraHeaderIndent)$/;"	f	class:astyle::ASBeautifier	signature:(size_t iPrelim, bool isInExtraHeaderIndent)
astyle::ASBeautifier::adjustParsedLineIndentation	astyle.h	/^		void adjustParsedLineIndentation(size_t iPrelim, bool isInExtraHeaderIndent);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(size_t iPrelim, bool isInExtraHeaderIndent)
astyle::ASBeautifier::assignmentOperators	astyle.h	/^		vector<const string*>* assignmentOperators;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::backslashEndsPrevLine	astyle.h	/^		bool backslashEndsPrevLine;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::beautifierFileType	astyle.h	/^		int beautifierFileType;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::beautify	ASBeautifier.cpp	/^string ASBeautifier::beautify(const string &originalLine)$/;"	f	class:astyle::ASBeautifier	signature:(const string &originalLine)
astyle::ASBeautifier::beautify	astyle.h	/^		virtual string beautify(const string &line);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(const string &line)
astyle::ASBeautifier::blockCommentNoBeautify	astyle.h	/^		bool blockCommentNoBeautify;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::blockCommentNoIndent	astyle.h	/^		bool blockCommentNoIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::blockIndent	astyle.h	/^		bool blockIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::blockParenDepthStack	astyle.h	/^		vector<int>* blockParenDepthStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::blockStatementStack	astyle.h	/^		vector<bool>* blockStatementStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::blockTabCount	astyle.h	/^		int  blockTabCount;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::bracketBlockStateStack	astyle.h	/^		vector<bool>* bracketBlockStateStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::bracketIndent	astyle.h	/^		bool bracketIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::bracketIndentVtk	astyle.h	/^		bool bracketIndentVtk;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::caseIndent	astyle.h	/^		bool caseIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::classIndent	astyle.h	/^		bool classIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::classInitializerIndents	astyle.h	/^		int  classInitializerIndents;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::clearObjCMethodDefinitionAlignment	ASBeautifier.cpp	/^void ASBeautifier::clearObjCMethodDefinitionAlignment()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::clearObjCMethodDefinitionAlignment	astyle.h	/^		void clearObjCMethodDefinitionAlignment();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
astyle::ASBeautifier::colonIndentObjCMethodDefinition	astyle.h	/^		int  colonIndentObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::computeObjCColonAlignment	ASBeautifier.cpp	/^int ASBeautifier::computeObjCColonAlignment(string &line, int colonAlignPosition) const$/;"	f	class:astyle::ASBeautifier	signature:(string &line, int colonAlignPosition) const
astyle::ASBeautifier::computeObjCColonAlignment	astyle.h	/^		int  computeObjCColonAlignment(string &line, int colonAlignPosition) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(string &line, int colonAlignPosition) const
astyle::ASBeautifier::computePreliminaryIndentation	ASBeautifier.cpp	/^void ASBeautifier::computePreliminaryIndentation()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::computePreliminaryIndentation	astyle.h	/^		void computePreliminaryIndentation();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
astyle::ASBeautifier::computePreprocessorIndent	ASBeautifier.cpp	/^pair<int, int> ASBeautifier::computePreprocessorIndent()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::computePreprocessorIndent	astyle.h	/^		pair<int, int> computePreprocessorIndent();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
astyle::ASBeautifier::convertTabToSpaces	ASBeautifier.cpp	/^int ASBeautifier::convertTabToSpaces(int i, int tabIncrementIn) const$/;"	f	class:astyle::ASBeautifier	signature:(int i, int tabIncrementIn) const
astyle::ASBeautifier::convertTabToSpaces	astyle.h	/^		int  convertTabToSpaces(int i, int tabIncrementIn) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(int i, int tabIncrementIn) const
astyle::ASBeautifier::copyTempStacks	ASBeautifier.cpp	/^vector<vector<const string*>*>* ASBeautifier::copyTempStacks(const ASBeautifier &other) const$/;"	f	class:astyle::ASBeautifier	signature:(const ASBeautifier &other) const
astyle::ASBeautifier::copyTempStacks	astyle.h	/^		vector<vector<const string*>*>* copyTempStacks(const ASBeautifier &other) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const ASBeautifier &other) const
astyle::ASBeautifier::currentHeader	astyle.h	/^		const string* currentHeader;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::currentNonLegalCh	astyle.h	/^		char currentNonLegalCh;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::currentNonSpaceCh	astyle.h	/^		char currentNonSpaceCh;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::defineIndentCount	astyle.h	/^		int  defineIndentCount;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::deleteBeautifierContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteBeautifierContainer(vector<ASBeautifier*>* &container)$/;"	f	class:astyle::ASBeautifier	signature:(vector<ASBeautifier*>* &container)
astyle::ASBeautifier::deleteBeautifierContainer	astyle.h	/^		void deleteBeautifierContainer(vector<ASBeautifier*>* &container);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(vector<ASBeautifier*>* &container)
astyle::ASBeautifier::deleteBeautifierVectors	ASBeautifier.cpp	/^void ASBeautifier::deleteBeautifierVectors()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::deleteBeautifierVectors	astyle.h	/^		void deleteBeautifierVectors();$/;"	p	class:astyle::ASBeautifier	access:protected	signature:()
astyle::ASBeautifier::deleteContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteContainer(T &container)$/;"	f	class:astyle::ASBeautifier	signature:(T &container)
astyle::ASBeautifier::deleteContainer	astyle.h	/^		template<typename T> void deleteContainer(T &container);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(T &container)
astyle::ASBeautifier::deleteTempStacksContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteTempStacksContainer(vector<vector<const string*>*>* &container)$/;"	f	class:astyle::ASBeautifier	signature:(vector<vector<const string*>*>* &container)
astyle::ASBeautifier::deleteTempStacksContainer	astyle.h	/^		void deleteTempStacksContainer(vector<vector<const string*>*>* &container);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(vector<vector<const string*>*>* &container)
astyle::ASBeautifier::emptyLineFill	astyle.h	/^		bool emptyLineFill;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::extractPreprocessorStatement	ASBeautifier.cpp	/^string ASBeautifier::extractPreprocessorStatement(const string &line) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line) const
astyle::ASBeautifier::extractPreprocessorStatement	astyle.h	/^		string extractPreprocessorStatement(const string &line) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &line) const
astyle::ASBeautifier::fileType	astyle.h	/^		int  fileType;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::findHeader	ASBeautifier.cpp	/^const string* ASBeautifier::findHeader(const string &line, int i,$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i, const vector<const string*>* possibleHeaders) const
astyle::ASBeautifier::findHeader	astyle.h	/^		const string* findHeader(const string &line, int i,$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &line, int i, const vector<const string*>* possibleHeaders) const
astyle::ASBeautifier::findOperator	ASBeautifier.cpp	/^const string* ASBeautifier::findOperator(const string &line, int i,$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i, const vector<const string*>* possibleOperators) const
astyle::ASBeautifier::findOperator	astyle.h	/^		const string* findOperator(const string &line, int i,$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &line, int i, const vector<const string*>* possibleOperators) const
astyle::ASBeautifier::foundPreCommandHeader	astyle.h	/^		bool foundPreCommandHeader;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::foundPreCommandMacro	astyle.h	/^		bool foundPreCommandMacro;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::getBeautifierFileType	ASBeautifier.cpp	/^int ASBeautifier::getBeautifierFileType() const$/;"	f	class:astyle::ASBeautifier	signature:() const
astyle::ASBeautifier::getBeautifierFileType	astyle.h	/^		int  getBeautifierFileType() const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:() const
astyle::ASBeautifier::getBlockIndent	ASBeautifier.cpp	/^bool ASBeautifier::getBlockIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getBlockIndent	astyle.h	/^		bool getBlockIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getBracketIndent	ASBeautifier.cpp	/^bool ASBeautifier::getBracketIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getBracketIndent	astyle.h	/^		bool getBracketIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getCaseIndent	ASBeautifier.cpp	/^bool ASBeautifier::getCaseIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getCaseIndent	astyle.h	/^		bool getCaseIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getClassIndent	ASBeautifier.cpp	/^bool ASBeautifier::getClassIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getClassIndent	astyle.h	/^		bool getClassIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getEmptyLineFill	ASBeautifier.cpp	/^bool ASBeautifier::getEmptyLineFill(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getEmptyLineFill	astyle.h	/^		bool getEmptyLineFill(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getFileType	ASBeautifier.cpp	/^int ASBeautifier::getFileType() const$/;"	f	class:astyle::ASBeautifier	signature:() const
astyle::ASBeautifier::getFileType	astyle.h	/^		int  getFileType() const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:() const
astyle::ASBeautifier::getForceTabIndentation	ASBeautifier.cpp	/^bool ASBeautifier::getForceTabIndentation(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getForceTabIndentation	astyle.h	/^		bool getForceTabIndentation(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getInStatementIndentAssign	ASBeautifier.cpp	/^int ASBeautifier::getInStatementIndentAssign(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, size_t currPos) const
astyle::ASBeautifier::getInStatementIndentAssign	astyle.h	/^		int  getInStatementIndentAssign(const string &line, size_t currPos) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, size_t currPos) const
astyle::ASBeautifier::getInStatementIndentComma	ASBeautifier.cpp	/^int ASBeautifier::getInStatementIndentComma(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, size_t currPos) const
astyle::ASBeautifier::getInStatementIndentComma	astyle.h	/^		int  getInStatementIndentComma(const string &line, size_t currPos) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, size_t currPos) const
astyle::ASBeautifier::getIndentLength	ASBeautifier.cpp	/^int ASBeautifier::getIndentLength(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getIndentLength	astyle.h	/^		int  getIndentLength(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getIndentString	ASBeautifier.cpp	/^string ASBeautifier::getIndentString(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getIndentString	astyle.h	/^		string getIndentString(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getIndentedLineReturn	ASBeautifier.cpp	/^string &ASBeautifier::getIndentedLineReturn(string &newLine, const string &originalLine) const$/;"	f	class:astyle::ASBeautifier	signature:(string &newLine, const string &originalLine) const
astyle::ASBeautifier::getIndentedLineReturn	astyle.h	/^		string &getIndentedLineReturn(string &newLine, const string &originalLine) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(string &newLine, const string &originalLine) const
astyle::ASBeautifier::getModeManuallySet	ASBeautifier.cpp	/^bool ASBeautifier::getModeManuallySet() const$/;"	f	class:astyle::ASBeautifier	signature:() const
astyle::ASBeautifier::getModeManuallySet	astyle.h	/^		bool getModeManuallySet(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getModifierIndent	ASBeautifier.cpp	/^bool ASBeautifier::getModifierIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getModifierIndent	astyle.h	/^		bool getModifierIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getNamespaceIndent	ASBeautifier.cpp	/^bool ASBeautifier::getNamespaceIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getNamespaceIndent	astyle.h	/^		bool getNamespaceIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getNextProgramCharDistance	ASBeautifier.cpp	/^int ASBeautifier::getNextProgramCharDistance(const string &line, int i) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i) const
astyle::ASBeautifier::getNextProgramCharDistance	astyle.h	/^		int  getNextProgramCharDistance(const string &line, int i) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &line, int i) const
astyle::ASBeautifier::getNextWord	ASBeautifier.cpp	/^string ASBeautifier::getNextWord(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, size_t currPos) const
astyle::ASBeautifier::getNextWord	astyle.h	/^		string getNextWord(const string &line, size_t currPos) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(const string &line, size_t currPos) const
astyle::ASBeautifier::getPreprocDefineIndent	ASBeautifier.cpp	/^bool ASBeautifier::getPreprocDefineIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getPreprocDefineIndent	astyle.h	/^		bool getPreprocDefineIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getSwitchIndent	ASBeautifier.cpp	/^bool ASBeautifier::getSwitchIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getSwitchIndent	astyle.h	/^		bool getSwitchIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::getTabLength	ASBeautifier.cpp	/^int ASBeautifier::getTabLength(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
astyle::ASBeautifier::getTabLength	astyle.h	/^		int  getTabLength(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
astyle::ASBeautifier::haveLineContinuationChar	astyle.h	/^		bool haveLineContinuationChar;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::headerStack	astyle.h	/^		vector<const string*>* headerStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::headers	astyle.h	/^		vector<const string*>* headers;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::horstmannIndentInStatement	astyle.h	/^		int  horstmannIndentInStatement;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::inLineNumber	astyle.h	/^		int  inLineNumber;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::inStatementIndentStack	astyle.h	/^		vector<int>* inStatementIndentStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::inStatementIndentStackSizeStack	astyle.h	/^		vector<int>* inStatementIndentStackSizeStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::indentCount	astyle.h	/^		int  indentCount;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::indentLength	astyle.h	/^		int  indentLength;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::indentString	astyle.h	/^		string indentString;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::indentableHeaders	astyle.h	/^		vector<const string*>* indentableHeaders;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::indexOf	ASBeautifier.cpp	/^int ASBeautifier::indexOf(vector<const string*> &container, const string* element) const$/;"	f	class:astyle::ASBeautifier	signature:(vector<const string*> &container, const string* element) const
astyle::ASBeautifier::indexOf	astyle.h	/^		int  indexOf(vector<const string*> &container, const string* element) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(vector<const string*> &container, const string* element) const
astyle::ASBeautifier::init	ASBeautifier.cpp	/^void ASBeautifier::init(ASSourceIterator* iter)$/;"	f	class:astyle::ASBeautifier	signature:(ASSourceIterator* iter)
astyle::ASBeautifier::init	astyle.h	/^		virtual void init(ASSourceIterator* iter);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(ASSourceIterator* iter)
astyle::ASBeautifier::initContainer	ASBeautifier.cpp	/^void ASBeautifier::initContainer(T &container, T value)$/;"	f	class:astyle::ASBeautifier	signature:(T &container, T value)
astyle::ASBeautifier::initContainer	astyle.h	/^		template<typename T> void initContainer(T &container, T value);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(T &container, T value)
astyle::ASBeautifier::initTempStacksContainer	ASBeautifier.cpp	/^void ASBeautifier::initTempStacksContainer(vector<vector<const string*>*>* &container,$/;"	f	class:astyle::ASBeautifier	signature:(vector<vector<const string*>*>* &container, vector<vector<const string*>*>* value)
astyle::ASBeautifier::initTempStacksContainer	astyle.h	/^		void initTempStacksContainer(vector<vector<const string*>*>* &container,$/;"	p	class:astyle::ASBeautifier	access:private	signature:(vector<vector<const string*>*>* &container, vector<vector<const string*>*>* value)
astyle::ASBeautifier::initVectors	ASBeautifier.cpp	/^void ASBeautifier::initVectors()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::initVectors	astyle.h	/^		void initVectors();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
astyle::ASBeautifier::isCaseHeaderCommentIndent	astyle.h	/^		bool isCaseHeaderCommentIndent;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::isElseHeaderIndent	astyle.h	/^		bool isElseHeaderIndent;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::isImmediatelyPostObjCMethodDefinition	astyle.h	/^		bool isImmediatelyPostObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInAsm	astyle.h	/^		bool isInAsm;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInAsmBlock	astyle.h	/^		bool isInAsmBlock;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInAsmOneLine	astyle.h	/^		bool isInAsmOneLine;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInBeautifySQL	astyle.h	/^		bool isInBeautifySQL;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::isInCase	astyle.h	/^		bool isInCase;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInClass	astyle.h	/^		bool isInClass;					\/\/ is in a class after the opening bracket$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInClassHeader	astyle.h	/^		bool isInClassHeader;			\/\/ is in a class before the opening bracket$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInClassHeaderTab	astyle.h	/^		bool isInClassHeaderTab;		\/\/ is in an indentable class header line$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInClassInitializer	astyle.h	/^		bool isInClassInitializer;		\/\/ is in a class after the ':' initializer$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInComment	astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInConditional	astyle.h	/^		bool isInConditional;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInDefine	astyle.h	/^		bool isInDefine;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInDefineDefinition	astyle.h	/^		bool isInDefineDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInEnum	astyle.h	/^		bool isInEnum;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInEnumTypeID	astyle.h	/^		bool isInEnumTypeID;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInExternC	astyle.h	/^		bool isInExternC;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::isInHeader	astyle.h	/^		bool isInHeader;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInHorstmannComment	astyle.h	/^		bool isInHorstmannComment;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInIndentablePreproc	astyle.h	/^		bool isInIndentablePreproc;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::isInIndentablePreprocBlock	astyle.h	/^		bool isInIndentablePreprocBlock;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInIndentableStruct	astyle.h	/^		bool isInIndentableStruct;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::isInLet	astyle.h	/^		bool isInLet;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInObjCInterface	astyle.h	/^		bool isInObjCInterface;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInObjCMethodDefinition	astyle.h	/^		bool isInObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInPreprocessorComment	astyle.h	/^		bool isInPreprocessorComment;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInPreprocessorUnterminatedComment	ASBeautifier.cpp	/^bool ASBeautifier::isInPreprocessorUnterminatedComment(const string &line)$/;"	f	class:astyle::ASBeautifier	signature:(const string &line)
astyle::ASBeautifier::isInPreprocessorUnterminatedComment	astyle.h	/^		bool isInPreprocessorUnterminatedComment(const string &line);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line)
astyle::ASBeautifier::isInQuestion	astyle.h	/^		bool isInQuestion;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInQuote	astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInStatement	astyle.h	/^		bool isInStatement;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInSwitch	astyle.h	/^		bool isInSwitch;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInTemplate	astyle.h	/^		bool isInTemplate;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isInVerbatimQuote	astyle.h	/^		bool isInVerbatimQuote;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isIndentModeOff	astyle.h	/^		bool isIndentModeOff;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isIndentedPreprocessor	ASBeautifier.cpp	/^bool ASBeautifier::isIndentedPreprocessor(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, size_t currPos) const
astyle::ASBeautifier::isIndentedPreprocessor	astyle.h	/^		bool isIndentedPreprocessor(const string &line, size_t currPos) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, size_t currPos) const
astyle::ASBeautifier::isLineEndComment	ASBeautifier.cpp	/^bool ASBeautifier::isLineEndComment(const string &line, int startPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int startPos) const
astyle::ASBeautifier::isLineEndComment	astyle.h	/^		bool isLineEndComment(const string &line, int startPos) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, int startPos) const
astyle::ASBeautifier::isModeManuallySet	astyle.h	/^		bool isModeManuallySet;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::isNonInStatementArray	astyle.h	/^		bool isNonInStatementArray;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::isPreprocessorConditionalCplusplus	ASBeautifier.cpp	/^bool ASBeautifier::isPreprocessorConditionalCplusplus(const string &line) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line) const
astyle::ASBeautifier::isPreprocessorConditionalCplusplus	astyle.h	/^		bool isPreprocessorConditionalCplusplus(const string &line) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line) const
astyle::ASBeautifier::isSharpAccessor	astyle.h	/^		bool isSharpAccessor;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::isSharpDelegate	astyle.h	/^		bool isSharpDelegate;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::labelIndent	astyle.h	/^		bool labelIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lastLineHeader	astyle.h	/^		const string* lastLineHeader;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineBeginsWithCloseBracket	astyle.h	/^		bool lineBeginsWithCloseBracket;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineBeginsWithComma	astyle.h	/^		bool lineBeginsWithComma;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineBeginsWithOpenBracket	astyle.h	/^		bool lineBeginsWithOpenBracket;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineClosingBlocksNum	astyle.h	/^		int  lineClosingBlocksNum;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineCommentNoBeautify	astyle.h	/^		bool lineCommentNoBeautify;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::lineIsCommentOnly	astyle.h	/^		bool lineIsCommentOnly;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineIsLineCommentOnly	astyle.h	/^		bool lineIsLineCommentOnly;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineOpeningBlocksNum	astyle.h	/^		int  lineOpeningBlocksNum;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineOpensWithComment	astyle.h	/^		bool lineOpensWithComment;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineOpensWithLineComment	astyle.h	/^		bool lineOpensWithLineComment;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::lineStartsInComment	astyle.h	/^		bool lineStartsInComment;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::maxInStatementIndent	astyle.h	/^		int  maxInStatementIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::minConditionalIndent	astyle.h	/^		int  minConditionalIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::minConditionalOption	astyle.h	/^		int  minConditionalOption;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::modifierIndent	astyle.h	/^		bool modifierIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::namespaceIndent	astyle.h	/^		bool namespaceIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::nonAssignmentOperators	astyle.h	/^		vector<const string*>* nonAssignmentOperators;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::nonInStatementBracket	astyle.h	/^		int  nonInStatementBracket;$/;"	m	class:astyle::ASBeautifier	access:protected
astyle::ASBeautifier::nonParenHeaders	astyle.h	/^		vector<const string*>* nonParenHeaders;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::operator =	astyle.h	/^		ASBeautifier &operator=(ASBeautifier &);       \/\/ not to be implemented$/;"	p	class:astyle::ASBeautifier	access:private	signature:(ASBeautifier &)
astyle::ASBeautifier::parenDepth	astyle.h	/^		int  parenDepth;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::parenIndentStack	astyle.h	/^		vector<int>* parenIndentStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::parenStatementStack	astyle.h	/^		vector<bool>* parenStatementStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::parseCurrentLine	ASBeautifier.cpp	/^void ASBeautifier::parseCurrentLine(const string &line)$/;"	f	class:astyle::ASBeautifier	signature:(const string &line)
astyle::ASBeautifier::parseCurrentLine	astyle.h	/^		void parseCurrentLine(const string &line);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line)
astyle::ASBeautifier::popLastInStatementIndent	ASBeautifier.cpp	/^void ASBeautifier::popLastInStatementIndent()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::popLastInStatementIndent	astyle.h	/^		void popLastInStatementIndent();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
astyle::ASBeautifier::preBlockStatements	astyle.h	/^		vector<const string*>* preBlockStatements;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::preCommandHeaders	astyle.h	/^		vector<const string*>* preCommandHeaders;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::preLineWS	ASBeautifier.cpp	/^string ASBeautifier::preLineWS(int lineIndentCount, int lineSpaceIndentCount) const$/;"	f	class:astyle::ASBeautifier	signature:(int lineIndentCount, int lineSpaceIndentCount) const
astyle::ASBeautifier::preLineWS	astyle.h	/^		string preLineWS(int lineIndentCount, int lineSpaceIndentCount) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(int lineIndentCount, int lineSpaceIndentCount) const
astyle::ASBeautifier::preprocBlockIndent	astyle.h	/^		int  preprocBlockIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::preprocIndentStack	astyle.h	/^		vector<pair<int, int> >* preprocIndentStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::prevFinalLineIndentCount	astyle.h	/^		int  prevFinalLineIndentCount;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::prevFinalLineSpaceIndentCount	astyle.h	/^		int  prevFinalLineSpaceIndentCount;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::prevNonLegalCh	astyle.h	/^		char prevNonLegalCh;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::prevNonSpaceCh	astyle.h	/^		char prevNonSpaceCh;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::previousLastLineHeader	astyle.h	/^		const string* previousLastLineHeader;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::previousLineProbationTab	astyle.h	/^		bool previousLineProbationTab;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::probationHeader	astyle.h	/^		const string* probationHeader;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::processPreprocessor	ASBeautifier.cpp	/^void ASBeautifier::processPreprocessor(const string &preproc, const string &line)$/;"	f	class:astyle::ASBeautifier	signature:(const string &preproc, const string &line)
astyle::ASBeautifier::processPreprocessor	astyle.h	/^		void processPreprocessor(const string &preproc, const string &line);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &preproc, const string &line)
astyle::ASBeautifier::quoteChar	astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::registerInStatementIndent	ASBeautifier.cpp	/^void ASBeautifier::registerInStatementIndent(const string &line, int i, int spaceTabCount_,$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i, int spaceTabCount_, int tabIncrementIn, int minIndent, bool updateParenStack)
astyle::ASBeautifier::registerInStatementIndent	astyle.h	/^		void registerInStatementIndent(const string &line, int i, int spaceIndentCount,$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, int i, int spaceIndentCount, int tabIncrementIn, int minIndent, bool updateParenStack)
astyle::ASBeautifier::registerInStatementIndentColon	ASBeautifier.cpp	/^void ASBeautifier::registerInStatementIndentColon(const string &line, int i, int tabIncrementIn)$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i, int tabIncrementIn)
astyle::ASBeautifier::registerInStatementIndentColon	astyle.h	/^		void registerInStatementIndentColon(const string &line, int i, int tabIncrementIn);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, int i, int tabIncrementIn)
astyle::ASBeautifier::rtrim	ASBeautifier.cpp	/^string ASBeautifier::rtrim(const string &str) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &str) const
astyle::ASBeautifier::rtrim	astyle.h	/^		string rtrim(const string &str) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &str) const
astyle::ASBeautifier::setAlignMethodColon	ASBeautifier.cpp	/^void ASBeautifier::setAlignMethodColon(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setAlignMethodColon	astyle.h	/^		void setAlignMethodColon(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setBlockIndent	ASBeautifier.cpp	/^void ASBeautifier::setBlockIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setBlockIndent	astyle.h	/^		void setBlockIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(bool state)
astyle::ASBeautifier::setBracketIndent	ASBeautifier.cpp	/^void ASBeautifier::setBracketIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setBracketIndent	astyle.h	/^		void setBracketIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(bool state)
astyle::ASBeautifier::setBracketIndentVtk	ASBeautifier.cpp	/^void ASBeautifier::setBracketIndentVtk(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setBracketIndentVtk	astyle.h	/^		void setBracketIndentVtk(bool state);$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(bool state)
astyle::ASBeautifier::setCStyle	ASBeautifier.cpp	/^void ASBeautifier::setCStyle()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::setCStyle	astyle.h	/^		void setCStyle();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
astyle::ASBeautifier::setCaseIndent	ASBeautifier.cpp	/^void ASBeautifier::setCaseIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setCaseIndent	astyle.h	/^		void setCaseIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setClassIndent	ASBeautifier.cpp	/^void ASBeautifier::setClassIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setClassIndent	astyle.h	/^		void setClassIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setDefaultTabLength	ASBeautifier.cpp	/^void ASBeautifier::setDefaultTabLength()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::setDefaultTabLength	astyle.h	/^		void setDefaultTabLength();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
astyle::ASBeautifier::setEmptyLineFill	ASBeautifier.cpp	/^void ASBeautifier::setEmptyLineFill(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setEmptyLineFill	astyle.h	/^		void setEmptyLineFill(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setForceTabXIndentation	ASBeautifier.cpp	/^void ASBeautifier::setForceTabXIndentation(int length)$/;"	f	class:astyle::ASBeautifier	signature:(int length)
astyle::ASBeautifier::setForceTabXIndentation	astyle.h	/^		void setForceTabXIndentation(int length);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int length)
astyle::ASBeautifier::setJavaStyle	ASBeautifier.cpp	/^void ASBeautifier::setJavaStyle()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::setJavaStyle	astyle.h	/^		void setJavaStyle();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
astyle::ASBeautifier::setLabelIndent	ASBeautifier.cpp	/^void ASBeautifier::setLabelIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setLabelIndent	astyle.h	/^		void setLabelIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setMaxInStatementIndentLength	ASBeautifier.cpp	/^void ASBeautifier::setMaxInStatementIndentLength(int max)$/;"	f	class:astyle::ASBeautifier	signature:(int max)
astyle::ASBeautifier::setMaxInStatementIndentLength	astyle.h	/^		void setMaxInStatementIndentLength(int max);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int max)
astyle::ASBeautifier::setMinConditionalIndentLength	ASBeautifier.cpp	/^void ASBeautifier::setMinConditionalIndentLength()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::setMinConditionalIndentLength	astyle.h	/^		void setMinConditionalIndentLength();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
astyle::ASBeautifier::setMinConditionalIndentOption	ASBeautifier.cpp	/^void ASBeautifier::setMinConditionalIndentOption(int min)$/;"	f	class:astyle::ASBeautifier	signature:(int min)
astyle::ASBeautifier::setMinConditionalIndentOption	astyle.h	/^		void setMinConditionalIndentOption(int min);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int min)
astyle::ASBeautifier::setModeManuallySet	ASBeautifier.cpp	/^void ASBeautifier::setModeManuallySet(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setModeManuallySet	astyle.h	/^		void setModeManuallySet(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setModifierIndent	ASBeautifier.cpp	/^void ASBeautifier::setModifierIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setModifierIndent	astyle.h	/^		void setModifierIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setNamespaceIndent	ASBeautifier.cpp	/^void ASBeautifier::setNamespaceIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setNamespaceIndent	astyle.h	/^		void setNamespaceIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setPreprocConditionalIndent	ASBeautifier.cpp	/^void ASBeautifier::setPreprocConditionalIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setPreprocConditionalIndent	astyle.h	/^		void setPreprocConditionalIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setPreprocDefineIndent	ASBeautifier.cpp	/^void ASBeautifier::setPreprocDefineIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setPreprocDefineIndent	astyle.h	/^		void setPreprocDefineIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setSharpStyle	ASBeautifier.cpp	/^void ASBeautifier::setSharpStyle()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::setSharpStyle	astyle.h	/^		void setSharpStyle();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
astyle::ASBeautifier::setSpaceIndentation	ASBeautifier.cpp	/^void ASBeautifier::setSpaceIndentation(int length)$/;"	f	class:astyle::ASBeautifier	signature:(int length)
astyle::ASBeautifier::setSpaceIndentation	astyle.h	/^		void setSpaceIndentation(int length = 4);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int length = 4)
astyle::ASBeautifier::setSwitchIndent	ASBeautifier.cpp	/^void ASBeautifier::setSwitchIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
astyle::ASBeautifier::setSwitchIndent	astyle.h	/^		void setSwitchIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
astyle::ASBeautifier::setTabIndentation	ASBeautifier.cpp	/^void ASBeautifier::setTabIndentation(int length, bool forceTabs)$/;"	f	class:astyle::ASBeautifier	signature:(int length, bool forceTabs)
astyle::ASBeautifier::setTabIndentation	astyle.h	/^		void setTabIndentation(int length = 4, bool forceTabs = false);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int length = 4, bool forceTabs = false)
astyle::ASBeautifier::shouldAlignMethodColon	astyle.h	/^		bool shouldAlignMethodColon;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::shouldForceTabIndentation	astyle.h	/^		bool shouldForceTabIndentation;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::shouldIndentBrackettedLine	astyle.h	/^		bool shouldIndentBrackettedLine;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::shouldIndentPreprocConditional	astyle.h	/^		bool shouldIndentPreprocConditional;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::shouldIndentPreprocDefine	astyle.h	/^		bool shouldIndentPreprocDefine;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::sourceIterator	astyle.h	/^		ASSourceIterator* sourceIterator;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::spaceIndentCount	astyle.h	/^		int  spaceIndentCount;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::spaceIndentObjCMethodDefinition	astyle.h	/^		int  spaceIndentObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::squareBracketCount	astyle.h	/^		int  squareBracketCount;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::statementEndsWithComma	ASBeautifier.cpp	/^bool ASBeautifier::statementEndsWithComma(const string &line, int index) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int index) const
astyle::ASBeautifier::statementEndsWithComma	astyle.h	/^		bool statementEndsWithComma(const string &line, int index) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, int index) const
astyle::ASBeautifier::switchIndent	astyle.h	/^		bool switchIndent;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::tabLength	astyle.h	/^		int  tabLength;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::tempStacks	astyle.h	/^		vector<vector<const string*>* >* tempStacks;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::templateDepth	astyle.h	/^		int  templateDepth;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::trim	ASBeautifier.cpp	/^string ASBeautifier::trim(const string &str) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &str) const
astyle::ASBeautifier::trim	astyle.h	/^		string trim(const string &str) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &str) const
astyle::ASBeautifier::verbatimDelimiter	astyle.h	/^		string verbatimDelimiter;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::waitingBeautifierStack	astyle.h	/^		vector<ASBeautifier*>* waitingBeautifierStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::waitingBeautifierStackLengthStack	astyle.h	/^		vector<int>* waitingBeautifierStackLengthStack;$/;"	m	class:astyle::ASBeautifier	access:private
astyle::ASBeautifier::~ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::~ASBeautifier()$/;"	f	class:astyle::ASBeautifier	signature:()
astyle::ASBeautifier::~ASBeautifier	astyle.h	/^		virtual ~ASBeautifier();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
astyle::ASConsole	astyle_main.h	/^class ASConsole$/;"	c	namespace:astyle
astyle::ASConsole::ASConsole	astyle_main.h	/^		ASConsole(ASFormatter &formatterArg) : formatter(formatterArg) {$/;"	f	class:astyle::ASConsole	access:public	signature:(ASFormatter &formatterArg)
astyle::ASConsole::bypassBrowserOpen	astyle_main.h	/^		bool bypassBrowserOpen;             \/\/ don't open the browser on html options$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::convertLineEnds	astyle_main.cpp	/^void ASConsole::convertLineEnds(ostringstream &out, int lineEnd)$/;"	f	class:astyle::ASConsole	signature:(ostringstream &out, int lineEnd)
astyle::ASConsole::convertLineEnds	astyle_main.h	/^		void convertLineEnds(ostringstream &out, int lineEnd);$/;"	p	class:astyle::ASConsole	access:public	signature:(ostringstream &out, int lineEnd)
astyle::ASConsole::correctMixedLineEnds	astyle_main.cpp	/^void ASConsole::correctMixedLineEnds(ostringstream &out)$/;"	f	class:astyle::ASConsole	signature:(ostringstream &out)
astyle::ASConsole::correctMixedLineEnds	astyle_main.h	/^		void correctMixedLineEnds(ostringstream &out);$/;"	p	class:astyle::ASConsole	access:private	signature:(ostringstream &out)
astyle::ASConsole::detectEncoding	astyle_main.cpp	/^FileEncoding ASConsole::detectEncoding(const char* data, size_t dataSize) const$/;"	f	class:astyle::ASConsole	signature:(const char* data, size_t dataSize) const
astyle::ASConsole::detectEncoding	astyle_main.h	/^		FileEncoding detectEncoding(const char* data, size_t dataSize) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(const char* data, size_t dataSize) const
astyle::ASConsole::displayLastError	astyle_main.cpp	/^void ASConsole::displayLastError()$/;"	f	class:astyle::ASConsole	signature:()
astyle::ASConsole::displayLastError	astyle_main.h	/^		void displayLastError();$/;"	p	class:astyle::ASConsole	access:private	signature:()
astyle::ASConsole::error	astyle_main.cpp	/^void ASConsole::error() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::error	astyle_main.cpp	/^void ASConsole::error(const char* why, const char* what) const$/;"	f	class:astyle::ASConsole	signature:(const char* why, const char* what) const
astyle::ASConsole::error	astyle_main.h	/^		void error() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::error	astyle_main.h	/^		void error(const char* why, const char* what) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(const char* why, const char* what) const
astyle::ASConsole::excludeHitsVector	astyle_main.h	/^		vector<bool>   excludeHitsVector;   \/\/ exclude flags for error reporting$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::excludeVector	astyle_main.h	/^		vector<string> excludeVector;       \/\/ exclude from wildcard hits$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::fileName	astyle_main.h	/^		vector<string> fileName;            \/\/ files to be processed including path$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::fileNameVector	astyle_main.h	/^		vector<string> fileNameVector;      \/\/ file paths and names from the command line$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::fileNameVectorIsEmpty	astyle_main.cpp	/^bool ASConsole::fileNameVectorIsEmpty() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::fileNameVectorIsEmpty	astyle_main.h	/^		bool fileNameVectorIsEmpty() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::fileOptionsVector	astyle_main.h	/^		vector<string> fileOptionsVector;   \/\/ options from the options file$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::filesAreIdentical	astyle_main.h	/^		bool filesAreIdentical;             \/\/ input and output files are identical$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::filesFormatted	astyle_main.h	/^		int  filesFormatted;                \/\/ number of files formatted$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::filesUnchanged	astyle_main.h	/^		int  filesUnchanged;                \/\/ number of files unchanged$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::formatCinToCout	astyle_main.cpp	/^void ASConsole::formatCinToCout()$/;"	f	class:astyle::ASConsole	signature:()
astyle::ASConsole::formatCinToCout	astyle_main.h	/^		void formatCinToCout();$/;"	p	class:astyle::ASConsole	access:public	signature:()
astyle::ASConsole::formatFile	astyle_main.cpp	/^void ASConsole::formatFile(const string &fileName_)$/;"	f	class:astyle::ASConsole	signature:(const string &fileName_)
astyle::ASConsole::formatFile	astyle_main.h	/^		void formatFile(const string &fileName_);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &fileName_)
astyle::ASConsole::formatter	astyle_main.h	/^		ASFormatter &formatter;             \/\/ reference to the ASFormatter object$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::getArgvOptions	astyle_main.cpp	/^vector<string> ASConsole::getArgvOptions(int argc, char** argv) const$/;"	f	class:astyle::ASConsole	signature:(int argc, char** argv) const
astyle::ASConsole::getArgvOptions	astyle_main.h	/^		vector<string> getArgvOptions(int argc, char** argv) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(int argc, char** argv) const
astyle::ASConsole::getCurrentDirectory	astyle_main.cpp	/^string ASConsole::getCurrentDirectory(const string &fileName_) const$/;"	f	class:astyle::ASConsole	signature:(const string &fileName_) const
astyle::ASConsole::getCurrentDirectory	astyle_main.h	/^		string getCurrentDirectory(const string &fileName_) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &fileName_) const
astyle::ASConsole::getExcludeHitsVector	astyle_main.cpp	/^vector<bool> ASConsole::getExcludeHitsVector() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getExcludeHitsVector	astyle_main.h	/^		vector<bool>   getExcludeHitsVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getExcludeVector	astyle_main.cpp	/^vector<string> ASConsole::getExcludeVector() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getExcludeVector	astyle_main.h	/^		vector<string> getExcludeVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getFileName	astyle_main.cpp	/^vector<string> ASConsole::getFileName() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getFileName	astyle_main.h	/^		vector<string> getFileName() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getFileNameVector	astyle_main.cpp	/^vector<string> ASConsole::getFileNameVector() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getFileNameVector	astyle_main.h	/^		vector<string> getFileNameVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getFileNames	astyle_main.cpp	/^void ASConsole::getFileNames(const string &directory, const string &wildcard)$/;"	f	class:astyle::ASConsole	signature:(const string &directory, const string &wildcard)
astyle::ASConsole::getFileNames	astyle_main.h	/^		void getFileNames(const string &directory, const string &wildcard);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &directory, const string &wildcard)
astyle::ASConsole::getFileOptionsVector	astyle_main.cpp	/^vector<string> ASConsole::getFileOptionsVector() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getFileOptionsVector	astyle_main.h	/^		vector<string> getFileOptionsVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getFilePaths	astyle_main.cpp	/^void ASConsole::getFilePaths(string &filePath)$/;"	f	class:astyle::ASConsole	signature:(string &filePath)
astyle::ASConsole::getFilePaths	astyle_main.h	/^		void getFilePaths(string &filePath);$/;"	p	class:astyle::ASConsole	access:private	signature:(string &filePath)
astyle::ASConsole::getFilesAreIdentical	astyle_main.cpp	/^bool ASConsole::getFilesAreIdentical() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getFilesAreIdentical	astyle_main.h	/^		bool getFilesAreIdentical() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getFilesFormatted	astyle_main.cpp	/^int ASConsole::getFilesFormatted() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getFilesFormatted	astyle_main.h	/^		int  getFilesFormatted() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getIgnoreExcludeErrors	astyle_main.cpp	/^bool ASConsole::getIgnoreExcludeErrors() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getIgnoreExcludeErrors	astyle_main.h	/^		bool getIgnoreExcludeErrors() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getIgnoreExcludeErrorsDisplay	astyle_main.cpp	/^bool ASConsole::getIgnoreExcludeErrorsDisplay() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getIgnoreExcludeErrorsDisplay	astyle_main.h	/^		bool getIgnoreExcludeErrorsDisplay() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getIsDryRun	astyle_main.cpp	/^bool ASConsole::getIsDryRun() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getIsDryRun	astyle_main.h	/^		bool getIsDryRun() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getIsFormattedOnly	astyle_main.cpp	/^bool ASConsole::getIsFormattedOnly() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getIsFormattedOnly	astyle_main.h	/^		bool getIsFormattedOnly() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getIsQuiet	astyle_main.cpp	/^bool ASConsole::getIsQuiet() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getIsQuiet	astyle_main.h	/^		bool getIsQuiet() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getIsRecursive	astyle_main.cpp	/^bool ASConsole::getIsRecursive() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getIsRecursive	astyle_main.h	/^		bool getIsRecursive() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getIsVerbose	astyle_main.cpp	/^bool ASConsole::getIsVerbose() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getIsVerbose	astyle_main.h	/^		bool getIsVerbose() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getLanguageID	astyle_main.cpp	/^string ASConsole::getLanguageID() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getLanguageID	astyle_main.h	/^		string getLanguageID() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getLineEndsMixed	astyle_main.cpp	/^bool ASConsole::getLineEndsMixed() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getLineEndsMixed	astyle_main.h	/^		bool getLineEndsMixed() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getNoBackup	astyle_main.cpp	/^bool ASConsole::getNoBackup() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getNoBackup	astyle_main.h	/^		bool getNoBackup() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, const char* groupingArg, const char* separator) const$/;"	f	class:astyle::ASConsole	signature:(int num, const char* groupingArg, const char* separator) const
astyle::ASConsole::getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, size_t lcid) const$/;"	f	class:astyle::ASConsole	signature:(int num, size_t lcid) const
astyle::ASConsole::getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, size_t) const$/;"	f	class:astyle::ASConsole	signature:(int num, size_t) const
astyle::ASConsole::getNumberFormat	astyle_main.h	/^		string getNumberFormat(int num, const char* groupingArg, const char* separator) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(int num, const char* groupingArg, const char* separator) const
astyle::ASConsole::getNumberFormat	astyle_main.h	/^		string getNumberFormat(int num, size_t = 0) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(int num, size_t = 0) const
astyle::ASConsole::getOptionsFileName	astyle_main.cpp	/^string ASConsole::getOptionsFileName() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getOptionsFileName	astyle_main.h	/^		string getOptionsFileName() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getOptionsVector	astyle_main.cpp	/^vector<string> ASConsole::getOptionsVector() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getOptionsVector	astyle_main.h	/^		vector<string> getOptionsVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getOrigSuffix	astyle_main.cpp	/^string ASConsole::getOrigSuffix() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getOrigSuffix	astyle_main.h	/^		string getOrigSuffix() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::getParam	astyle_main.cpp	/^string ASConsole::getParam(const string &arg, const char* op)$/;"	f	class:astyle::ASConsole	signature:(const string &arg, const char* op)
astyle::ASConsole::getParam	astyle_main.h	/^		string getParam(const string &arg, const char* op);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &arg, const char* op)
astyle::ASConsole::getPreserveDate	astyle_main.cpp	/^bool ASConsole::getPreserveDate() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::getPreserveDate	astyle_main.h	/^		bool getPreserveDate() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
astyle::ASConsole::hasWildcard	astyle_main.h	/^		bool hasWildcard;                   \/\/ file name includes a wildcard$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::ignoreExcludeErrors	astyle_main.h	/^		bool ignoreExcludeErrors;           \/\/ don't abort on unmatched excludes$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::ignoreExcludeErrorsDisplay	astyle_main.h	/^		bool ignoreExcludeErrorsDisplay;    \/\/ don't display unmatched excludes$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::initializeOutputEOL	astyle_main.cpp	/^void ASConsole::initializeOutputEOL(LineEndFormat lineEndFormat)$/;"	f	class:astyle::ASConsole	signature:(LineEndFormat lineEndFormat)
astyle::ASConsole::initializeOutputEOL	astyle_main.h	/^		void initializeOutputEOL(LineEndFormat lineEndFormat);$/;"	p	class:astyle::ASConsole	access:private	signature:(LineEndFormat lineEndFormat)
astyle::ASConsole::isDryRun	astyle_main.h	/^		bool isDryRun;                      \/\/ dry-run option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::isFormattedOnly	astyle_main.h	/^		bool isFormattedOnly;               \/\/ formatted lines only option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::isOption	astyle_main.cpp	/^bool ASConsole::isOption(const string &arg, const char* a, const char* b)$/;"	f	class:astyle::ASConsole	signature:(const string &arg, const char* a, const char* b)
astyle::ASConsole::isOption	astyle_main.cpp	/^bool ASConsole::isOption(const string &arg, const char* op)$/;"	f	class:astyle::ASConsole	signature:(const string &arg, const char* op)
astyle::ASConsole::isOption	astyle_main.h	/^		bool isOption(const string &arg, const char* op);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &arg, const char* op)
astyle::ASConsole::isOption	astyle_main.h	/^		bool isOption(const string &arg, const char* op1, const char* op2);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &arg, const char* op1, const char* op2)
astyle::ASConsole::isParamOption	astyle_main.cpp	/^bool ASConsole::isParamOption(const string &arg, const char* option)$/;"	f	class:astyle::ASConsole	signature:(const string &arg, const char* option)
astyle::ASConsole::isParamOption	astyle_main.h	/^		bool isParamOption(const string &arg, const char* option);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &arg, const char* option)
astyle::ASConsole::isPathExclued	astyle_main.cpp	/^bool ASConsole::isPathExclued(const string &subPath)$/;"	f	class:astyle::ASConsole	signature:(const string &subPath)
astyle::ASConsole::isPathExclued	astyle_main.h	/^		bool isPathExclued(const string &subPath);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &subPath)
astyle::ASConsole::isQuiet	astyle_main.h	/^		bool isQuiet;                       \/\/ quiet option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::isRecursive	astyle_main.h	/^		bool isRecursive;                   \/\/ recursive option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::isVerbose	astyle_main.h	/^		bool isVerbose;                     \/\/ verbose option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::launchDefaultBrowser	astyle_main.cpp	/^void ASConsole::launchDefaultBrowser(const char* filePathIn \/*NULL*\/) const$/;"	f	class:astyle::ASConsole	signature:(const char* filePathIn ) const
astyle::ASConsole::launchDefaultBrowser	astyle_main.h	/^		void launchDefaultBrowser(const char* filePathIn = NULL) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* filePathIn = NULL) const
astyle::ASConsole::lineEndsMixed	astyle_main.h	/^		bool lineEndsMixed;                 \/\/ output has mixed line ends$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::linesOut	astyle_main.h	/^		int  linesOut;                      \/\/ number of output lines$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::localizer	astyle_main.h	/^		ASLocalizer localizer;              \/\/ ASLocalizer object$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::mainDirectoryLength	astyle_main.h	/^		size_t mainDirectoryLength;         \/\/ directory length to be excluded in displays$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::noBackup	astyle_main.h	/^		bool noBackup;                      \/\/ suffix=none option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::operator =	astyle_main.h	/^		ASConsole &operator=(ASConsole &);         \/\/ not to be implemented$/;"	p	class:astyle::ASConsole	access:private	signature:(ASConsole &)
astyle::ASConsole::optionsFileName	astyle_main.h	/^		string optionsFileName;             \/\/ file path and name of the options file to use$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::optionsFileRequired	astyle_main.h	/^		bool optionsFileRequired;           \/\/ options= option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::optionsVector	astyle_main.h	/^		vector<string> optionsVector;       \/\/ options from the command line$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::origSuffix	astyle_main.h	/^		string origSuffix;                  \/\/ suffix= option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::outputEOL	astyle_main.h	/^		char outputEOL[4];                  \/\/ current line end$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::preserveDate	astyle_main.h	/^		bool preserveDate;                  \/\/ preserve-date option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::prevEOL	astyle_main.h	/^		char prevEOL[4];                    \/\/ previous line end$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::printHelp	astyle_main.cpp	/^void ASConsole::printHelp() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::printHelp	astyle_main.h	/^		void printHelp() const;$/;"	p	class:astyle::ASConsole	access:private	signature:() const
astyle::ASConsole::printMsg	astyle_main.cpp	/^void ASConsole::printMsg(const char* msg, const string &data) const$/;"	f	class:astyle::ASConsole	signature:(const char* msg, const string &data) const
astyle::ASConsole::printMsg	astyle_main.h	/^		void printMsg(const char* msg, const string &data) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* msg, const string &data) const
astyle::ASConsole::printSeparatingLine	astyle_main.cpp	/^void ASConsole::printSeparatingLine() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::printSeparatingLine	astyle_main.h	/^		void printSeparatingLine() const;$/;"	p	class:astyle::ASConsole	access:private	signature:() const
astyle::ASConsole::printVerboseHeader	astyle_main.cpp	/^void ASConsole::printVerboseHeader() const$/;"	f	class:astyle::ASConsole	signature:() const
astyle::ASConsole::printVerboseHeader	astyle_main.h	/^		void printVerboseHeader() const;$/;"	p	class:astyle::ASConsole	access:private	signature:() const
astyle::ASConsole::printVerboseStats	astyle_main.cpp	/^void ASConsole::printVerboseStats(clock_t startTime) const$/;"	f	class:astyle::ASConsole	signature:(clock_t startTime) const
astyle::ASConsole::printVerboseStats	astyle_main.h	/^		void printVerboseStats(clock_t startTime) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(clock_t startTime) const
astyle::ASConsole::processFiles	astyle_main.cpp	/^void ASConsole::processFiles()$/;"	f	class:astyle::ASConsole	signature:()
astyle::ASConsole::processFiles	astyle_main.h	/^		void processFiles();$/;"	p	class:astyle::ASConsole	access:public	signature:()
astyle::ASConsole::processOptions	astyle_main.cpp	/^void ASConsole::processOptions(vector<string> &argvOptions)$/;"	f	class:astyle::ASConsole	signature:(vector<string> &argvOptions)
astyle::ASConsole::processOptions	astyle_main.h	/^		void processOptions(vector<string> &argvOptions);$/;"	p	class:astyle::ASConsole	access:public	signature:(vector<string> &argvOptions)
astyle::ASConsole::readFile	astyle_main.cpp	/^FileEncoding ASConsole::readFile(const string &fileName_, stringstream &in) const$/;"	f	class:astyle::ASConsole	signature:(const string &fileName_, stringstream &in) const
astyle::ASConsole::readFile	astyle_main.h	/^		FileEncoding readFile(const string &fileName_, stringstream &in) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &fileName_, stringstream &in) const
astyle::ASConsole::removeFile	astyle_main.cpp	/^void ASConsole::removeFile(const char* fileName_, const char* errMsg) const$/;"	f	class:astyle::ASConsole	signature:(const char* fileName_, const char* errMsg) const
astyle::ASConsole::removeFile	astyle_main.h	/^		void removeFile(const char* fileName_, const char* errMsg) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* fileName_, const char* errMsg) const
astyle::ASConsole::renameFile	astyle_main.cpp	/^void ASConsole::renameFile(const char* oldFileName, const char* newFileName, const char* errMsg) const$/;"	f	class:astyle::ASConsole	signature:(const char* oldFileName, const char* newFileName, const char* errMsg) const
astyle::ASConsole::renameFile	astyle_main.h	/^		void renameFile(const char* oldFileName, const char* newFileName, const char* errMsg) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* oldFileName, const char* newFileName, const char* errMsg) const
astyle::ASConsole::setBypassBrowserOpen	astyle_main.cpp	/^void ASConsole::setBypassBrowserOpen(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setBypassBrowserOpen	astyle_main.h	/^		void setBypassBrowserOpen(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setIgnoreExcludeErrors	astyle_main.cpp	/^void ASConsole::setIgnoreExcludeErrors(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setIgnoreExcludeErrors	astyle_main.h	/^		void setIgnoreExcludeErrors(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setIgnoreExcludeErrorsAndDisplay	astyle_main.cpp	/^void ASConsole::setIgnoreExcludeErrorsAndDisplay(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setIgnoreExcludeErrorsAndDisplay	astyle_main.h	/^		void setIgnoreExcludeErrorsAndDisplay(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setIsDryRun	astyle_main.cpp	/^void ASConsole::setIsDryRun(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setIsDryRun	astyle_main.h	/^		void setIsDryRun(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setIsFormattedOnly	astyle_main.cpp	/^void ASConsole::setIsFormattedOnly(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setIsFormattedOnly	astyle_main.h	/^		void setIsFormattedOnly(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setIsQuiet	astyle_main.cpp	/^void ASConsole::setIsQuiet(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setIsQuiet	astyle_main.h	/^		void setIsQuiet(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setIsRecursive	astyle_main.cpp	/^void ASConsole::setIsRecursive(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setIsRecursive	astyle_main.h	/^		void setIsRecursive(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setIsVerbose	astyle_main.cpp	/^void ASConsole::setIsVerbose(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setIsVerbose	astyle_main.h	/^		void setIsVerbose(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setNoBackup	astyle_main.cpp	/^void ASConsole::setNoBackup(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setNoBackup	astyle_main.h	/^		void setNoBackup(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::setOptionsFileName	astyle_main.cpp	/^void ASConsole::setOptionsFileName(string name)$/;"	f	class:astyle::ASConsole	signature:(string name)
astyle::ASConsole::setOptionsFileName	astyle_main.h	/^		void setOptionsFileName(string name);$/;"	p	class:astyle::ASConsole	access:public	signature:(string name)
astyle::ASConsole::setOrigSuffix	astyle_main.cpp	/^void ASConsole::setOrigSuffix(string suffix)$/;"	f	class:astyle::ASConsole	signature:(string suffix)
astyle::ASConsole::setOrigSuffix	astyle_main.h	/^		void setOrigSuffix(string suffix);$/;"	p	class:astyle::ASConsole	access:public	signature:(string suffix)
astyle::ASConsole::setOutputEOL	astyle_main.cpp	/^void ASConsole::setOutputEOL(LineEndFormat lineEndFormat, const char* currentEOL)$/;"	f	class:astyle::ASConsole	signature:(LineEndFormat lineEndFormat, const char* currentEOL)
astyle::ASConsole::setOutputEOL	astyle_main.h	/^		void setOutputEOL(LineEndFormat lineEndFormat, const char* currentEOL);$/;"	p	class:astyle::ASConsole	access:private	signature:(LineEndFormat lineEndFormat, const char* currentEOL)
astyle::ASConsole::setPreserveDate	astyle_main.cpp	/^void ASConsole::setPreserveDate(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
astyle::ASConsole::setPreserveDate	astyle_main.h	/^		void setPreserveDate(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
astyle::ASConsole::sleep	astyle_main.cpp	/^void ASConsole::sleep(int seconds) const$/;"	f	class:astyle::ASConsole	signature:(int seconds) const
astyle::ASConsole::sleep	astyle_main.h	/^		void sleep(int seconds) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(int seconds) const
astyle::ASConsole::standardizePath	astyle_main.cpp	/^void ASConsole::standardizePath(string &path, bool removeBeginningSeparator \/*false*\/) const$/;"	f	class:astyle::ASConsole	signature:(string &path, bool removeBeginningSeparator ) const
astyle::ASConsole::standardizePath	astyle_main.h	/^		void standardizePath(string &path, bool removeBeginningSeparator = false) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(string &path, bool removeBeginningSeparator = false) const
astyle::ASConsole::stringEndsWith	astyle_main.cpp	/^bool ASConsole::stringEndsWith(const string &str, const string &suffix) const$/;"	f	class:astyle::ASConsole	signature:(const string &str, const string &suffix) const
astyle::ASConsole::stringEndsWith	astyle_main.h	/^		bool stringEndsWith(const string &str, const string &suffix) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(const string &str, const string &suffix) const
astyle::ASConsole::targetDirectory	astyle_main.h	/^		string targetDirectory;             \/\/ path to the directory being processed$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::targetFilename	astyle_main.h	/^		string targetFilename;              \/\/ file name being processed$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::updateExcludeVector	astyle_main.cpp	/^void ASConsole::updateExcludeVector(string suffixParam)$/;"	f	class:astyle::ASConsole	signature:(string suffixParam)
astyle::ASConsole::updateExcludeVector	astyle_main.h	/^		void updateExcludeVector(string suffixParam);$/;"	p	class:astyle::ASConsole	access:public	signature:(string suffixParam)
astyle::ASConsole::useAscii	astyle_main.h	/^		bool useAscii;                      \/\/ ascii option$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::utf8_16	astyle_main.h	/^		Utf8_16 utf8_16;                    \/\/ utf8\/16 conversion methods$/;"	m	class:astyle::ASConsole	access:private
astyle::ASConsole::waitForRemove	astyle_main.cpp	/^int ASConsole::waitForRemove(const char* newFileName) const$/;"	f	class:astyle::ASConsole	signature:(const char* newFileName) const
astyle::ASConsole::waitForRemove	astyle_main.h	/^		int  waitForRemove(const char* oldFileName) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* oldFileName) const
astyle::ASConsole::wildcmp	astyle_main.cpp	/^int ASConsole::wildcmp(const char* wild, const char* data) const$/;"	f	class:astyle::ASConsole	signature:(const char* wild, const char* data) const
astyle::ASConsole::wildcmp	astyle_main.h	/^		int  wildcmp(const char* wild, const char* data) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* wild, const char* data) const
astyle::ASConsole::writeFile	astyle_main.cpp	/^void ASConsole::writeFile(const string &fileName_, FileEncoding encoding, ostringstream &out) const$/;"	f	class:astyle::ASConsole	signature:(const string &fileName_, FileEncoding encoding, ostringstream &out) const
astyle::ASConsole::writeFile	astyle_main.h	/^		void writeFile(const string &fileName_, FileEncoding encoding, ostringstream &out) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &fileName_, FileEncoding encoding, ostringstream &out) const
astyle::ASEnhancer	astyle.h	/^class ASEnhancer : protected ASBase$/;"	c	namespace:astyle	inherits:ASBase
astyle::ASEnhancer::ASEnhancer	ASEnhancer.cpp	/^ASEnhancer::ASEnhancer()$/;"	f	class:astyle::ASEnhancer	signature:()
astyle::ASEnhancer::ASEnhancer	astyle.h	/^		ASEnhancer();$/;"	p	class:astyle::ASEnhancer	access:public	signature:()
astyle::ASEnhancer::bracketCount	astyle.h	/^		int  bracketCount;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::caseIndent	astyle.h	/^		bool caseIndent;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::convertForceTabIndentToSpaces	ASEnhancer.cpp	/^void ASEnhancer::convertForceTabIndentToSpaces(string &line) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line) const
astyle::ASEnhancer::convertForceTabIndentToSpaces	astyle.h	/^		void    convertForceTabIndentToSpaces(string  &line) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line) const
astyle::ASEnhancer::convertSpaceIndentToForceTab	ASEnhancer.cpp	/^void ASEnhancer::convertSpaceIndentToForceTab(string &line) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line) const
astyle::ASEnhancer::convertSpaceIndentToForceTab	astyle.h	/^		void    convertSpaceIndentToForceTab(string &line) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line) const
astyle::ASEnhancer::emptyLineFill	astyle.h	/^		bool emptyLineFill;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::enhance	ASEnhancer.cpp	/^void ASEnhancer::enhance(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL)$/;"	f	class:astyle::ASEnhancer	signature:(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL)
astyle::ASEnhancer::enhance	astyle.h	/^		void enhance(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL);$/;"	p	class:astyle::ASEnhancer	access:public	signature:(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL)
astyle::ASEnhancer::eventPreprocDepth	astyle.h	/^		int  eventPreprocDepth;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::findCaseColon	ASEnhancer.cpp	/^size_t ASEnhancer::findCaseColon(string &line, size_t caseIndex) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, size_t caseIndex) const
astyle::ASEnhancer::findCaseColon	astyle.h	/^		size_t  findCaseColon(string  &line, size_t caseIndex) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, size_t caseIndex) const
astyle::ASEnhancer::forceTab	astyle.h	/^		bool forceTab;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::indentLength	astyle.h	/^		int  indentLength;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::indentLine	ASEnhancer.cpp	/^int ASEnhancer::indentLine(string &line, int indent) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, int indent) const
astyle::ASEnhancer::indentLine	astyle.h	/^		int     indentLine(string  &line, int indent) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, int indent) const
astyle::ASEnhancer::indentableMacros	astyle.h	/^		vector<const pair<const string, const string>* >* indentableMacros;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::init	ASEnhancer.cpp	/^void ASEnhancer::init(int  _fileType,$/;"	f	class:astyle::ASEnhancer	signature:(int _fileType, int _indentLength, int _tabLength, bool _useTabs, bool _forceTab, bool _namespaceIndent, bool _caseIndent, bool _preprocBlockIndent, bool _preprocDefineIndent, bool _emptyLineFill, vector<const pair<const string, const string>* >* _indentableMacros)
astyle::ASEnhancer::init	astyle.h	/^		void init(int, int, int, bool, bool, bool, bool, bool, bool, bool,$/;"	p	class:astyle::ASEnhancer	access:public	signature:(int, int, int, bool, bool, bool, bool, bool, bool, bool, vector<const pair<const string, const string>* >*)
astyle::ASEnhancer::isBeginDeclareSectionSQL	ASEnhancer.cpp	/^bool ASEnhancer::isBeginDeclareSectionSQL(string &line, size_t index) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, size_t index) const
astyle::ASEnhancer::isBeginDeclareSectionSQL	astyle.h	/^		bool    isBeginDeclareSectionSQL(string  &line, size_t index) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, size_t index) const
astyle::ASEnhancer::isEndDeclareSectionSQL	ASEnhancer.cpp	/^bool ASEnhancer::isEndDeclareSectionSQL(string &line, size_t index) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, size_t index) const
astyle::ASEnhancer::isEndDeclareSectionSQL	astyle.h	/^		bool    isEndDeclareSectionSQL(string  &line, size_t index) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, size_t index) const
astyle::ASEnhancer::isInComment	astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::isInDeclareSection	astyle.h	/^		bool isInDeclareSection;                \/\/ need to indent a declare section$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::isInEventTable	astyle.h	/^		bool isInEventTable;                    \/\/ need to indent an event table$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::isInQuote	astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::isOneLineBlockReached	ASEnhancer.cpp	/^bool ASEnhancer::isOneLineBlockReached(string &line, int startChar) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, int startChar) const
astyle::ASEnhancer::isOneLineBlockReached	astyle.h	/^		bool    isOneLineBlockReached(string &line, int startChar) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, int startChar) const
astyle::ASEnhancer::lineNumber	astyle.h	/^		int  lineNumber;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::lookingForCaseBracket	astyle.h	/^		bool lookingForCaseBracket;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::namespaceIndent	astyle.h	/^		bool namespaceIndent;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::nextLineIsDeclareIndent	astyle.h	/^		bool nextLineIsDeclareIndent;           \/\/ begin declare section indent is reached$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::nextLineIsEventIndent	astyle.h	/^		bool nextLineIsEventIndent;             \/\/ begin event table indent is reached$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::parseCurrentLine	ASEnhancer.cpp	/^void ASEnhancer::parseCurrentLine(string &line, bool isInPreprocessor, bool isInSQL)$/;"	f	class:astyle::ASEnhancer	signature:(string &line, bool isInPreprocessor, bool isInSQL)
astyle::ASEnhancer::parseCurrentLine	astyle.h	/^		void    parseCurrentLine(string &line, bool isInPreprocessor, bool isInSQL);$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, bool isInPreprocessor, bool isInSQL)
astyle::ASEnhancer::preprocBlockIndent	astyle.h	/^		bool preprocBlockIndent;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::preprocDefineIndent	astyle.h	/^		bool preprocDefineIndent;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::processSwitchBlock	ASEnhancer.cpp	/^size_t ASEnhancer::processSwitchBlock(string &line, size_t index)$/;"	f	class:astyle::ASEnhancer	signature:(string &line, size_t index)
astyle::ASEnhancer::processSwitchBlock	astyle.h	/^		size_t  processSwitchBlock(string  &line, size_t index);$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, size_t index)
astyle::ASEnhancer::quoteChar	astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::shouldUnindentComment	astyle.h	/^		bool shouldUnindentComment;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::shouldUnindentLine	astyle.h	/^		bool shouldUnindentLine;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::sw	astyle.h	/^		switchVariables sw;                      \/\/ switch variables struct$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::switchDepth	astyle.h	/^		int  switchDepth;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::switchStack	astyle.h	/^		vector<switchVariables> switchStack;     \/\/ stack vector of switch variables$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::switchVariables	astyle.h	/^		struct switchVariables$/;"	s	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::switchVariables::switchBracketCount	astyle.h	/^			int  switchBracketCount;$/;"	m	struct:astyle::ASEnhancer::switchVariables	access:public
astyle::ASEnhancer::switchVariables::unindentCase	astyle.h	/^			bool unindentCase;$/;"	m	struct:astyle::ASEnhancer::switchVariables	access:public
astyle::ASEnhancer::switchVariables::unindentDepth	astyle.h	/^			int  unindentDepth;$/;"	m	struct:astyle::ASEnhancer::switchVariables	access:public
astyle::ASEnhancer::tabLength	astyle.h	/^		int  tabLength;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::unindentLine	ASEnhancer.cpp	/^int ASEnhancer::unindentLine(string &line, int unindent) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, int unindent) const
astyle::ASEnhancer::unindentLine	astyle.h	/^		int     unindentLine(string  &line, int unindent) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, int unindent) const
astyle::ASEnhancer::unindentNextLine	astyle.h	/^		bool unindentNextLine;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::useTabs	astyle.h	/^		bool useTabs;$/;"	m	class:astyle::ASEnhancer	access:private
astyle::ASEnhancer::~ASEnhancer	ASEnhancer.cpp	/^ASEnhancer::~ASEnhancer()$/;"	f	class:astyle::ASEnhancer	signature:()
astyle::ASEnhancer::~ASEnhancer	astyle.h	/^		virtual ~ASEnhancer();$/;"	p	class:astyle::ASEnhancer	access:public	signature:()
astyle::ASFormatter	astyle.h	/^class ASFormatter : public ASBeautifier$/;"	c	namespace:astyle	inherits:ASBeautifier
astyle::ASFormatter::ASFormatter	ASFormatter.cpp	/^ASFormatter::ASFormatter()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::ASFormatter	astyle.h	/^		ASFormatter();$/;"	p	class:astyle::ASFormatter	access:public	signature:()
astyle::ASFormatter::ASFormatter	astyle.h	/^		ASFormatter(const ASFormatter &copy);       \/\/ copy constructor not to be implemented$/;"	p	class:astyle::ASFormatter	access:private	signature:(const ASFormatter &copy)
astyle::ASFormatter::addBracketsToStatement	ASFormatter.cpp	/^bool ASFormatter::addBracketsToStatement()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::addBracketsToStatement	astyle.h	/^		bool addBracketsToStatement();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::adjustChecksumIn	ASFormatter.cpp	/^bool ASFormatter::adjustChecksumIn(int adjustment)$/;"	f	class:astyle::ASFormatter	signature:(int adjustment)
astyle::ASFormatter::adjustChecksumIn	astyle.h	/^		bool adjustChecksumIn(int adjustment);$/;"	p	class:astyle::ASFormatter	access:private	signature:(int adjustment)
astyle::ASFormatter::adjustComments	ASFormatter.cpp	/^void ASFormatter::adjustComments(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
astyle::ASFormatter::adjustComments	astyle.h	/^		void adjustComments();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::appendChar	ASFormatter.cpp	/^void ASFormatter::appendChar(char ch, bool canBreakLine)$/;"	f	class:astyle::ASFormatter	signature:(char ch, bool canBreakLine)
astyle::ASFormatter::appendChar	astyle.h	/^		void appendChar(char ch, bool canBreakLine);$/;"	p	class:astyle::ASFormatter	access:private	signature:(char ch, bool canBreakLine)
astyle::ASFormatter::appendCharInsideComments	ASFormatter.cpp	/^void ASFormatter::appendCharInsideComments(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
astyle::ASFormatter::appendCharInsideComments	astyle.h	/^		void appendCharInsideComments();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::appendCurrentChar	astyle.h	/^		void appendCurrentChar(bool canBreakLine = true) {$/;"	f	class:astyle::ASFormatter	access:private	signature:(bool canBreakLine = true)
astyle::ASFormatter::appendOpeningBracket	astyle.h	/^		bool appendOpeningBracket;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::appendOperator	ASFormatter.cpp	/^void ASFormatter::appendOperator(const string &sequence, bool canBreakLine)$/;"	f	class:astyle::ASFormatter	signature:(const string &sequence, bool canBreakLine)
astyle::ASFormatter::appendOperator	astyle.h	/^		void appendOperator(const string &sequence, bool canBreakLine = true);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &sequence, bool canBreakLine = true)
astyle::ASFormatter::appendSequence	ASFormatter.cpp	/^void ASFormatter::appendSequence(const string &sequence, bool canBreakLine)$/;"	f	class:astyle::ASFormatter	signature:(const string &sequence, bool canBreakLine)
astyle::ASFormatter::appendSequence	astyle.h	/^		void appendSequence(const string &sequence, bool canBreakLine = true);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &sequence, bool canBreakLine = true)
astyle::ASFormatter::appendSpaceAfter	ASFormatter.cpp	/^void ASFormatter::appendSpaceAfter()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::appendSpaceAfter	astyle.h	/^		void appendSpaceAfter();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::appendSpacePad	ASFormatter.cpp	/^void ASFormatter::appendSpacePad()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::appendSpacePad	astyle.h	/^		void appendSpacePad();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::assignmentOperators	astyle.h	/^		vector<const string*>* assignmentOperators;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::attachClosingBracketMode	astyle.h	/^		bool attachClosingBracketMode;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::bracketFormatMode	astyle.h	/^		BracketMode bracketFormatMode;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::bracketTypeStack	astyle.h	/^		vector<BracketType>* bracketTypeStack;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::breakCurrentOneLineBlock	astyle.h	/^		bool breakCurrentOneLineBlock;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::breakLine	ASFormatter.cpp	/^void ASFormatter::breakLine(bool isSplitLine \/*false*\/)$/;"	f	class:astyle::ASFormatter	signature:(bool isSplitLine )
astyle::ASFormatter::breakLine	astyle.h	/^		void breakLine(bool isSplitLine = false);$/;"	p	class:astyle::ASFormatter	access:private	signature:(bool isSplitLine = false)
astyle::ASFormatter::buildLanguageVectors	ASFormatter.cpp	/^void ASFormatter::buildLanguageVectors()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::buildLanguageVectors	astyle.h	/^		void buildLanguageVectors();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::caseHeaderFollowsComments	astyle.h	/^		bool caseHeaderFollowsComments;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::castOperators	astyle.h	/^		vector<const string*>* castOperators;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::charNum	astyle.h	/^		int  charNum;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::checkForHeaderFollowingComment	ASFormatter.cpp	/^const string* ASFormatter::checkForHeaderFollowingComment(const string &firstLine) const$/;"	f	class:astyle::ASFormatter	signature:(const string &firstLine) const
astyle::ASFormatter::checkForHeaderFollowingComment	astyle.h	/^		const string* checkForHeaderFollowingComment(const string &firstLine) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &firstLine) const
astyle::ASFormatter::checkIfTemplateOpener	ASFormatter.cpp	/^void ASFormatter::checkIfTemplateOpener()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::checkIfTemplateOpener	astyle.h	/^		void checkIfTemplateOpener();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::checksumIn	astyle.h	/^		size_t checksumIn;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::checksumOut	astyle.h	/^		size_t checksumOut;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::clearFormattedLineSplitPoints	ASFormatter.cpp	/^void ASFormatter::clearFormattedLineSplitPoints()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::clearFormattedLineSplitPoints	astyle.h	/^		void clearFormattedLineSplitPoints();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::commentAndHeaderFollows	ASFormatter.cpp	/^bool ASFormatter::commentAndHeaderFollows()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::commentAndHeaderFollows	astyle.h	/^		bool commentAndHeaderFollows();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::computeChecksumIn	ASFormatter.cpp	/^bool ASFormatter::computeChecksumIn(const string &currentLine_)$/;"	f	class:astyle::ASFormatter	signature:(const string &currentLine_)
astyle::ASFormatter::computeChecksumIn	astyle.h	/^		bool computeChecksumIn(const string &currentLine_);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &currentLine_)
astyle::ASFormatter::computeChecksumOut	ASFormatter.cpp	/^bool ASFormatter::computeChecksumOut(const string &beautifiedLine)$/;"	f	class:astyle::ASFormatter	signature:(const string &beautifiedLine)
astyle::ASFormatter::computeChecksumOut	astyle.h	/^		bool computeChecksumOut(const string &beautifiedLine);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &beautifiedLine)
astyle::ASFormatter::convertTabToSpaces	ASFormatter.cpp	/^void ASFormatter::convertTabToSpaces()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::convertTabToSpaces	astyle.h	/^		void convertTabToSpaces();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::currentChar	astyle.h	/^		char currentChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::currentHeader	astyle.h	/^		const string* currentHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::currentLine	astyle.h	/^		string currentLine;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::currentLineBeginsWithBracket	astyle.h	/^		bool currentLineBeginsWithBracket;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::currentLineFirstBracketNum	astyle.h	/^		size_t currentLineFirstBracketNum;	\/\/ first bracket location on currentLine$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::deleteContainer	ASFormatter.cpp	/^void ASFormatter::deleteContainer(T &container)$/;"	f	class:astyle::ASFormatter	signature:(T &container)
astyle::ASFormatter::deleteContainer	ASFormatter.cpp	/^void ASFormatter::deleteContainer(vector<BracketType>* &container)$/;"	f	class:astyle::ASFormatter	signature:(vector<BracketType>* &container)
astyle::ASFormatter::deleteContainer	astyle.h	/^		template<typename T> void deleteContainer(T &container);$/;"	p	class:astyle::ASFormatter	access:private	signature:(T &container)
astyle::ASFormatter::deleteContainer	astyle.h	/^		void deleteContainer(vector<BracketType>* &container);$/;"	p	class:astyle::ASFormatter	access:private	signature:(vector<BracketType>* &container)
astyle::ASFormatter::doesLineStartComment	astyle.h	/^		bool doesLineStartComment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::elseHeaderFollowsComments	astyle.h	/^		bool elseHeaderFollowsComments;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::endOfAsmReached	astyle.h	/^		bool endOfAsmReached;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::endOfCodeReached	astyle.h	/^		bool endOfCodeReached;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::enhancer	astyle.h	/^		ASEnhancer* enhancer;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::findFormattedLineSplitPoint	ASFormatter.cpp	/^size_t ASFormatter::findFormattedLineSplitPoint() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::findFormattedLineSplitPoint	astyle.h	/^		size_t findFormattedLineSplitPoint() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::findHeader	astyle.h	/^		const string* findHeader(const vector<const string*>* headers_) {$/;"	f	class:astyle::ASFormatter	access:private	signature:(const vector<const string*>* headers_)
astyle::ASFormatter::findNextChar	ASFormatter.cpp	/^size_t ASFormatter::findNextChar(string &line, char searchChar, int searchStart \/*0*\/)$/;"	f	class:astyle::ASFormatter	signature:(string &line, char searchChar, int searchStart )
astyle::ASFormatter::findNextChar	astyle.h	/^		size_t findNextChar(string &line, char searchChar, int searchStart = 0);$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &line, char searchChar, int searchStart = 0)
astyle::ASFormatter::findOperator	astyle.h	/^		const string* findOperator(const vector<const string*>* headers_) {$/;"	f	class:astyle::ASFormatter	access:private	signature:(const vector<const string*>* headers_)
astyle::ASFormatter::fixOptionVariableConflicts	ASFormatter.cpp	/^void ASFormatter::fixOptionVariableConflicts()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::fixOptionVariableConflicts	astyle.h	/^		void fixOptionVariableConflicts();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatArrayBrackets	ASFormatter.cpp	/^void ASFormatter::formatArrayBrackets(BracketType bracketType, bool isOpeningArrayBracket)$/;"	f	class:astyle::ASFormatter	signature:(BracketType bracketType, bool isOpeningArrayBracket)
astyle::ASFormatter::formatArrayBrackets	astyle.h	/^		void formatArrayBrackets(BracketType bracketType, bool isOpeningArrayBracket);$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType bracketType, bool isOpeningArrayBracket)
astyle::ASFormatter::formatArrayRunIn	ASFormatter.cpp	/^void ASFormatter::formatArrayRunIn()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatArrayRunIn	astyle.h	/^		void formatArrayRunIn();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatClosingBracket	ASFormatter.cpp	/^void ASFormatter::formatClosingBracket(BracketType bracketType)$/;"	f	class:astyle::ASFormatter	signature:(BracketType bracketType)
astyle::ASFormatter::formatClosingBracket	astyle.h	/^		void formatClosingBracket(BracketType bracketType);$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType bracketType)
astyle::ASFormatter::formatCommentBody	ASFormatter.cpp	/^void ASFormatter::formatCommentBody()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatCommentBody	astyle.h	/^		void formatCommentBody();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatCommentCloser	ASFormatter.cpp	/^void ASFormatter::formatCommentCloser()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatCommentCloser	astyle.h	/^		void formatCommentCloser();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatCommentOpener	ASFormatter.cpp	/^void ASFormatter::formatCommentOpener()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatCommentOpener	astyle.h	/^		void formatCommentOpener();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatLineCommentBody	ASFormatter.cpp	/^void ASFormatter::formatLineCommentBody()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatLineCommentBody	astyle.h	/^		void formatLineCommentBody();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatLineCommentOpener	ASFormatter.cpp	/^void ASFormatter::formatLineCommentOpener()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatLineCommentOpener	astyle.h	/^		void formatLineCommentOpener();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatOpeningBracket	ASFormatter.cpp	/^void ASFormatter::formatOpeningBracket(BracketType bracketType)$/;"	f	class:astyle::ASFormatter	signature:(BracketType bracketType)
astyle::ASFormatter::formatOpeningBracket	astyle.h	/^		void formatOpeningBracket(BracketType bracketType);$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType bracketType)
astyle::ASFormatter::formatPointerOrReference	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReference(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
astyle::ASFormatter::formatPointerOrReference	astyle.h	/^		void formatPointerOrReference();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatPointerOrReferenceCast	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceCast(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
astyle::ASFormatter::formatPointerOrReferenceCast	astyle.h	/^		void formatPointerOrReferenceCast();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatPointerOrReferenceToMiddle	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToMiddle()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatPointerOrReferenceToMiddle	astyle.h	/^		void formatPointerOrReferenceToMiddle();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatPointerOrReferenceToName	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToName()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatPointerOrReferenceToName	astyle.h	/^		void formatPointerOrReferenceToName();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatPointerOrReferenceToType	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToType()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatPointerOrReferenceToType	astyle.h	/^		void formatPointerOrReferenceToType();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatQuoteBody	ASFormatter.cpp	/^void ASFormatter::formatQuoteBody()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatQuoteBody	astyle.h	/^		void formatQuoteBody();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatQuoteOpener	ASFormatter.cpp	/^void ASFormatter::formatQuoteOpener()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatQuoteOpener	astyle.h	/^		void formatQuoteOpener();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formatRunIn	ASFormatter.cpp	/^void ASFormatter::formatRunIn()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::formatRunIn	astyle.h	/^		void formatRunIn();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::formattedLine	astyle.h	/^		string formattedLine;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::formattedLineCommentNum	astyle.h	/^		size_t formattedLineCommentNum;     \/\/ comment location on formattedLine$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::formatterFileType	astyle.h	/^		int formatterFileType;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::formattingStyle	astyle.h	/^		FormatStyle formattingStyle;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundCastOperator	astyle.h	/^		bool foundCastOperator;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundClassHeader	astyle.h	/^		bool foundClassHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundClosingHeader	astyle.h	/^		bool foundClosingHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundInterfaceHeader	astyle.h	/^		bool foundInterfaceHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundNamespaceHeader	astyle.h	/^		bool foundNamespaceHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundPreCommandHeader	astyle.h	/^		bool foundPreCommandHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundPreCommandMacro	astyle.h	/^		bool foundPreCommandMacro;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundPreDefinitionHeader	astyle.h	/^		bool foundPreDefinitionHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundQuestionMark	astyle.h	/^		bool foundQuestionMark;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::foundStructHeader	astyle.h	/^		bool foundStructHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::getBracketType	ASFormatter.cpp	/^BracketType ASFormatter::getBracketType()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::getBracketType	astyle.h	/^		BracketType getBracketType();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::getChecksumDiff	ASFormatter.cpp	/^int ASFormatter::getChecksumDiff() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::getChecksumDiff	astyle.h	/^		int  getChecksumDiff() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
astyle::ASFormatter::getChecksumIn	ASFormatter.cpp	/^size_t ASFormatter::getChecksumIn() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::getChecksumIn	astyle.h	/^		size_t getChecksumIn() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
astyle::ASFormatter::getChecksumOut	ASFormatter.cpp	/^size_t ASFormatter::getChecksumOut() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::getChecksumOut	astyle.h	/^		size_t getChecksumOut() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
astyle::ASFormatter::getCurrentLineCommentAdjustment	ASFormatter.cpp	/^int ASFormatter::getCurrentLineCommentAdjustment()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::getCurrentLineCommentAdjustment	astyle.h	/^		int  getCurrentLineCommentAdjustment();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::getFollowingOperator	ASFormatter.cpp	/^const string* ASFormatter::getFollowingOperator() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::getFollowingOperator	astyle.h	/^		const string* getFollowingOperator() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::getFormatterFileType	ASFormatter.cpp	/^int ASFormatter::getFormatterFileType() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::getFormatterFileType	astyle.h	/^		int  getFormatterFileType() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
astyle::ASFormatter::getIsLineReady	ASFormatter.cpp	/^bool ASFormatter::getIsLineReady() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::getIsLineReady	astyle.h	/^		bool getIsLineReady() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
astyle::ASFormatter::getLineEndFormat	ASFormatter.cpp	/^LineEndFormat ASFormatter::getLineEndFormat() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::getLineEndFormat	astyle.h	/^		LineEndFormat getLineEndFormat() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
astyle::ASFormatter::getNextChar	ASFormatter.cpp	/^bool ASFormatter::getNextChar()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::getNextChar	astyle.h	/^		bool getNextChar();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::getNextLine	ASFormatter.cpp	/^bool ASFormatter::getNextLine(bool emptyLineWasDeleted \/*false*\/)$/;"	f	class:astyle::ASFormatter	signature:(bool emptyLineWasDeleted )
astyle::ASFormatter::getNextLine	astyle.h	/^		bool getNextLine(bool emptyLineWasDeleted = false);$/;"	p	class:astyle::ASFormatter	access:private	signature:(bool emptyLineWasDeleted = false)
astyle::ASFormatter::getNextLineCommentAdjustment	ASFormatter.cpp	/^int ASFormatter::getNextLineCommentAdjustment()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::getNextLineCommentAdjustment	astyle.h	/^		int  getNextLineCommentAdjustment();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::getPreviousWord	ASFormatter.cpp	/^string ASFormatter::getPreviousWord(const string &line, int currPos) const$/;"	f	class:astyle::ASFormatter	signature:(const string &line, int currPos) const
astyle::ASFormatter::getPreviousWord	astyle.h	/^		string getPreviousWord(const string &line, int currPos) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &line, int currPos) const
astyle::ASFormatter::goForward	ASFormatter.cpp	/^void ASFormatter::goForward(int i)$/;"	f	class:astyle::ASFormatter	signature:(int i)
astyle::ASFormatter::goForward	astyle.h	/^		void goForward(int i);$/;"	p	class:astyle::ASFormatter	access:private	signature:(int i)
astyle::ASFormatter::hasMoreLines	ASFormatter.cpp	/^bool ASFormatter::hasMoreLines() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::hasMoreLines	astyle.h	/^		virtual bool hasMoreLines() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
astyle::ASFormatter::haveLineContinuationChar	astyle.h	/^		bool haveLineContinuationChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::headers	astyle.h	/^		vector<const string*>* headers;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::horstmannIndentChars	astyle.h	/^		int  horstmannIndentChars;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::indentableMacros	astyle.h	/^		vector<const pair<const string, const string>* >* indentableMacros;	\/\/ for ASEnhancer$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::init	ASFormatter.cpp	/^void ASFormatter::init(ASSourceIterator* si)$/;"	f	class:astyle::ASFormatter	signature:(ASSourceIterator* si)
astyle::ASFormatter::init	astyle.h	/^		virtual void init(ASSourceIterator* iter);$/;"	p	class:astyle::ASFormatter	access:public	signature:(ASSourceIterator* iter)
astyle::ASFormatter::initContainer	ASFormatter.cpp	/^void ASFormatter::initContainer(T &container, T value)$/;"	f	class:astyle::ASFormatter	signature:(T &container, T value)
astyle::ASFormatter::initContainer	ASFormatter.cpp	/^void ASFormatter::initContainer(vector<BracketType>* &container, vector<BracketType>* value)$/;"	f	class:astyle::ASFormatter	signature:(vector<BracketType>* &container, vector<BracketType>* value)
astyle::ASFormatter::initContainer	astyle.h	/^		template<typename T> void initContainer(T &container, T value);$/;"	p	class:astyle::ASFormatter	access:private	signature:(T &container, T value)
astyle::ASFormatter::initContainer	astyle.h	/^		void initContainer(vector<BracketType>* &container, vector<BracketType>* value);$/;"	p	class:astyle::ASFormatter	access:private	signature:(vector<BracketType>* &container, vector<BracketType>* value)
astyle::ASFormatter::initNewLine	ASFormatter.cpp	/^void ASFormatter::initNewLine()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::initNewLine	astyle.h	/^		void initNewLine();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::isAppendPostBlockEmptyLineRequested	astyle.h	/^		bool isAppendPostBlockEmptyLineRequested;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isArrayOperator	ASFormatter.cpp	/^bool ASFormatter::isArrayOperator() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isArrayOperator	astyle.h	/^		bool isArrayOperator() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isBeforeAnyComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeAnyComment() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isBeforeAnyComment	astyle.h	/^		bool isBeforeAnyComment() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isBeforeAnyLineEndComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeAnyLineEndComment(int startPos) const$/;"	f	class:astyle::ASFormatter	signature:(int startPos) const
astyle::ASFormatter::isBeforeAnyLineEndComment	astyle.h	/^		bool isBeforeAnyLineEndComment(int startPos) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(int startPos) const
astyle::ASFormatter::isBeforeComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeComment() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isBeforeComment	astyle.h	/^		bool isBeforeComment() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isBeforeMultipleLineEndComments	ASFormatter.cpp	/^bool ASFormatter::isBeforeMultipleLineEndComments(int startPos) const$/;"	f	class:astyle::ASFormatter	signature:(int startPos) const
astyle::ASFormatter::isBeforeMultipleLineEndComments	astyle.h	/^		bool isBeforeMultipleLineEndComments(int startPos) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(int startPos) const
astyle::ASFormatter::isBracketType	ASFormatter.cpp	/^bool ASFormatter::isBracketType(BracketType a, BracketType b) const$/;"	f	class:astyle::ASFormatter	signature:(BracketType a, BracketType b) const
astyle::ASFormatter::isBracketType	astyle.h	/^		bool isBracketType(BracketType a, BracketType b) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType a, BracketType b) const
astyle::ASFormatter::isCharImmediatelyPostCloseBlock	astyle.h	/^		bool isCharImmediatelyPostCloseBlock;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostComment	astyle.h	/^		bool isCharImmediatelyPostComment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostLineComment	astyle.h	/^		bool isCharImmediatelyPostLineComment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostNonInStmt	astyle.h	/^		bool isCharImmediatelyPostNonInStmt;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostOpenBlock	astyle.h	/^		bool isCharImmediatelyPostOpenBlock;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostOperator	astyle.h	/^		bool isCharImmediatelyPostOperator;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostPointerOrReference	astyle.h	/^		bool isCharImmediatelyPostPointerOrReference;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostReturn	astyle.h	/^		bool isCharImmediatelyPostReturn;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostTemplate	astyle.h	/^		bool isCharImmediatelyPostTemplate;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isCharImmediatelyPostThrow	astyle.h	/^		bool isCharImmediatelyPostThrow;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isClassInitializer	ASFormatter.cpp	/^bool ASFormatter::isClassInitializer() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isClassInitializer	astyle.h	/^		bool isClassInitializer() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isClosingHeader	ASFormatter.cpp	/^bool ASFormatter::isClosingHeader(const string* header) const$/;"	f	class:astyle::ASFormatter	signature:(const string* header) const
astyle::ASFormatter::isClosingHeader	astyle.h	/^		bool isClosingHeader(const string* header) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string* header) const
astyle::ASFormatter::isCurrentBracketBroken	ASFormatter.cpp	/^bool ASFormatter::isCurrentBracketBroken() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isCurrentBracketBroken	astyle.h	/^		bool isCurrentBracketBroken() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isDereferenceOrAddressOf	ASFormatter.cpp	/^bool ASFormatter::isDereferenceOrAddressOf() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isDereferenceOrAddressOf	astyle.h	/^		bool isDereferenceOrAddressOf() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isEmptyLine	ASFormatter.cpp	/^bool ASFormatter::isEmptyLine(const string &line) const$/;"	f	class:astyle::ASFormatter	signature:(const string &line) const
astyle::ASFormatter::isEmptyLine	astyle.h	/^		bool isEmptyLine(const string &line) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &line) const
astyle::ASFormatter::isExecSQL	ASFormatter.cpp	/^bool ASFormatter::isExecSQL(string  &line, size_t index) const$/;"	f	class:astyle::ASFormatter	signature:(string &line, size_t index) const
astyle::ASFormatter::isExecSQL	astyle.h	/^		bool isExecSQL(string &line, size_t index) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &line, size_t index) const
astyle::ASFormatter::isExternC	ASFormatter.cpp	/^bool ASFormatter::isExternC() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isExternC	astyle.h	/^		bool isExternC() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isFirstPreprocConditional	astyle.h	/^		bool isFirstPreprocConditional;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isFormattingModeOff	astyle.h	/^		bool isFormattingModeOff;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isHeaderInMultiStatementLine	astyle.h	/^		bool isHeaderInMultiStatementLine;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostCast	ASFormatter.cpp	/^bool ASFormatter::isImmediatelyPostCast() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isImmediatelyPostCast	astyle.h	/^		bool isImmediatelyPostCast() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isImmediatelyPostComment	astyle.h	/^		bool isImmediatelyPostComment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostCommentOnly	astyle.h	/^		bool isImmediatelyPostCommentOnly;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostEmptyBlock	astyle.h	/^		bool isImmediatelyPostEmptyBlock;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostEmptyLine	astyle.h	/^		bool isImmediatelyPostEmptyLine;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostHeader	astyle.h	/^		bool isImmediatelyPostHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostLineComment	astyle.h	/^		bool isImmediatelyPostLineComment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostNonInStmt	astyle.h	/^		bool isImmediatelyPostNonInStmt;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostOperator	astyle.h	/^		bool isImmediatelyPostOperator;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostPointerOrReference	astyle.h	/^		bool isImmediatelyPostPointerOrReference;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostPreprocessor	astyle.h	/^		bool isImmediatelyPostPreprocessor;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostReturn	astyle.h	/^		bool isImmediatelyPostReturn;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostTemplate	astyle.h	/^		bool isImmediatelyPostTemplate;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isImmediatelyPostThrow	astyle.h	/^		bool isImmediatelyPostThrow;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInAsm	astyle.h	/^		bool isInAsm;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInAsmBlock	astyle.h	/^		bool isInAsmBlock;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInAsmOneLine	astyle.h	/^		bool isInAsmOneLine;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInCase	astyle.h	/^		bool isInCase;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInClassInitializer	astyle.h	/^		bool isInClassInitializer;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInComment	astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInCommentStartLine	astyle.h	/^		bool isInCommentStartLine;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInEnum	astyle.h	/^		bool isInEnum;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInExecSQL	astyle.h	/^		bool isInExecSQL;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInExponent	ASFormatter.cpp	/^bool ASFormatter::isInExponent() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isInExponent	astyle.h	/^		bool isInExponent() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isInHeader	astyle.h	/^		bool isInHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInHorstmannRunIn	astyle.h	/^		bool isInHorstmannRunIn;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInLineBreak	astyle.h	/^		bool isInLineBreak;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInLineComment	astyle.h	/^		bool isInLineComment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInObjCInterface	astyle.h	/^		bool isInObjCInterface;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInObjCMethodDefinition	astyle.h	/^		bool isInObjCMethodDefinition;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInObjCSelector	astyle.h	/^		bool isInObjCSelector;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInPotentialCalculation	astyle.h	/^		bool isInPotentialCalculation;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInPreprocessor	astyle.h	/^		bool isInPreprocessor;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInPreprocessorBeautify	astyle.h	/^		bool isInPreprocessorBeautify;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInQuote	astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInQuoteContinuation	astyle.h	/^		bool isInQuoteContinuation;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInSwitchStatement	ASFormatter.cpp	/^bool ASFormatter::isInSwitchStatement() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isInSwitchStatement	astyle.h	/^		bool isInSwitchStatement() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isInTemplate	astyle.h	/^		bool isInTemplate;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isInVerbatimQuote	astyle.h	/^		bool isInVerbatimQuote;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isIndentablePreprocessorBlock	ASFormatter.cpp	/^bool ASFormatter::isIndentablePreprocessorBlock(string &firstLine, size_t index)$/;"	f	class:astyle::ASFormatter	signature:(string &firstLine, size_t index)
astyle::ASFormatter::isIndentablePreprocessorBlock	astyle.h	/^		bool isIndentablePreprocessorBlock(string &firstLine, size_t index);$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &firstLine, size_t index)
astyle::ASFormatter::isIndentableProprocessor	astyle.h	/^		bool isIndentableProprocessor;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isIndentableProprocessorBlock	astyle.h	/^		bool isIndentableProprocessorBlock;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isJavaStaticConstructor	astyle.h	/^		bool isJavaStaticConstructor;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isLineBreakBeforeClosingHeader	ASFormatter.cpp	/^void ASFormatter::isLineBreakBeforeClosingHeader()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::isLineBreakBeforeClosingHeader	astyle.h	/^		void isLineBreakBeforeClosingHeader();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::isLineReady	astyle.h	/^		bool isLineReady;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isNextCharOpeningBracket	ASFormatter.cpp	/^bool ASFormatter::isNextCharOpeningBracket(int startChar) const$/;"	f	class:astyle::ASFormatter	signature:(int startChar) const
astyle::ASFormatter::isNextCharOpeningBracket	astyle.h	/^		bool isNextCharOpeningBracket(int startChar) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(int startChar) const
astyle::ASFormatter::isNextWordSharpNonParenHeader	ASFormatter.cpp	/^bool ASFormatter::isNextWordSharpNonParenHeader(int startChar) const$/;"	f	class:astyle::ASFormatter	signature:(int startChar) const
astyle::ASFormatter::isNextWordSharpNonParenHeader	astyle.h	/^		bool isNextWordSharpNonParenHeader(int startChar) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(int startChar) const
astyle::ASFormatter::isNonInStatementArrayBracket	ASFormatter.cpp	/^bool ASFormatter::isNonInStatementArrayBracket() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isNonInStatementArrayBracket	astyle.h	/^		bool isNonInStatementArrayBracket() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isNonParenHeader	astyle.h	/^		bool isNonParenHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isOkToBreakBlock	ASFormatter.cpp	/^bool ASFormatter::isOkToBreakBlock(BracketType bracketType) const$/;"	f	class:astyle::ASFormatter	signature:(BracketType bracketType) const
astyle::ASFormatter::isOkToBreakBlock	astyle.h	/^		bool isOkToBreakBlock(BracketType bracketType) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType bracketType) const
astyle::ASFormatter::isOkToSplitFormattedLine	ASFormatter.cpp	/^bool ASFormatter::isOkToSplitFormattedLine()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::isOkToSplitFormattedLine	astyle.h	/^		bool isOkToSplitFormattedLine();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::isOneLineBlockReached	ASFormatter.cpp	/^int ASFormatter::isOneLineBlockReached(string &line, int startChar) const$/;"	f	class:astyle::ASFormatter	signature:(string &line, int startChar) const
astyle::ASFormatter::isOneLineBlockReached	astyle.h	/^		int  isOneLineBlockReached(string &line, int startChar) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &line, int startChar) const
astyle::ASFormatter::isOperatorPaddingDisabled	ASFormatter.cpp	/^bool ASFormatter::isOperatorPaddingDisabled() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isOperatorPaddingDisabled	astyle.h	/^		bool isOperatorPaddingDisabled() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isPointerOrReference	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReference() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isPointerOrReference	astyle.h	/^		bool isPointerOrReference() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isPointerOrReferenceCentered	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReferenceCentered() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isPointerOrReferenceCentered	astyle.h	/^		bool isPointerOrReferenceCentered() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isPointerOrReferenceVariable	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReferenceVariable(string &word) const$/;"	f	class:astyle::ASFormatter	signature:(string &word) const
astyle::ASFormatter::isPointerOrReferenceVariable	astyle.h	/^		bool isPointerOrReferenceVariable(string &word) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &word) const
astyle::ASFormatter::isPrependPostBlockEmptyLineRequested	astyle.h	/^		bool isPrependPostBlockEmptyLineRequested;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isPreviousBracketBlockRelated	astyle.h	/^		bool isPreviousBracketBlockRelated;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isPreviousCharPostComment	astyle.h	/^		bool isPreviousCharPostComment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isSequenceReached	astyle.h	/^		bool isSequenceReached(const char* sequence) const {$/;"	f	class:astyle::ASFormatter	access:private	signature:(const char* sequence) const
astyle::ASFormatter::isSharpStyleWithParen	ASFormatter.cpp	/^bool ASFormatter::isSharpStyleWithParen(const string* header) const$/;"	f	class:astyle::ASFormatter	signature:(const string* header) const
astyle::ASFormatter::isSharpStyleWithParen	astyle.h	/^		bool isSharpStyleWithParen(const string* header) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string* header) const
astyle::ASFormatter::isSpecialChar	astyle.h	/^		bool isSpecialChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::isStructAccessModified	ASFormatter.cpp	/^bool ASFormatter::isStructAccessModified(string &firstLine, size_t index) const$/;"	f	class:astyle::ASFormatter	signature:(string &firstLine, size_t index) const
astyle::ASFormatter::isStructAccessModified	astyle.h	/^		bool isStructAccessModified(string &firstLine, size_t index) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &firstLine, size_t index) const
astyle::ASFormatter::isUnaryOperator	ASFormatter.cpp	/^bool ASFormatter::isUnaryOperator() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isUnaryOperator	astyle.h	/^		bool isUnaryOperator() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isUniformInitializerBracket	ASFormatter.cpp	/^bool ASFormatter::isUniformInitializerBracket() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::isUniformInitializerBracket	astyle.h	/^		bool isUniformInitializerBracket() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::isVirgin	astyle.h	/^		bool isVirgin;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::leadingSpaces	astyle.h	/^		size_t leadingSpaces;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::lineCommentNoIndent	astyle.h	/^		bool lineCommentNoIndent;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::lineEnd	astyle.h	/^		LineEndFormat lineEnd;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::lineEndsInCommentOnly	astyle.h	/^		bool lineEndsInCommentOnly;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::lineIsCommentOnly	astyle.h	/^		bool lineIsCommentOnly;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::lineIsEmpty	astyle.h	/^		bool lineIsEmpty;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::lineIsLineCommentOnly	astyle.h	/^		bool lineIsLineCommentOnly;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxAndOr	astyle.h	/^		size_t maxAndOr;		\/\/ probably an 'if' statement$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxAndOrPending	astyle.h	/^		size_t maxAndOrPending;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxCodeLength	astyle.h	/^		size_t maxCodeLength;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxComma	astyle.h	/^		size_t maxComma;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxCommaPending	astyle.h	/^		size_t maxCommaPending;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxParen	astyle.h	/^		size_t maxParen;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxParenPending	astyle.h	/^		size_t maxParenPending;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxSemi	astyle.h	/^		size_t maxSemi;			\/\/ probably a 'for' statement$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxSemiPending	astyle.h	/^		size_t maxSemiPending;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxWhiteSpace	astyle.h	/^		size_t maxWhiteSpace;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::maxWhiteSpacePending	astyle.h	/^		size_t maxWhiteSpacePending;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::needHeaderOpeningBracket	astyle.h	/^		bool needHeaderOpeningBracket;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::nextLine	ASFormatter.cpp	/^string ASFormatter::nextLine()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::nextLine	astyle.h	/^		virtual string nextLine();$/;"	p	class:astyle::ASFormatter	access:public	signature:()
astyle::ASFormatter::nextLineSpacePadNum	astyle.h	/^		int  nextLineSpacePadNum;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::noTrimCommentContinuation	astyle.h	/^		bool noTrimCommentContinuation;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::nonParenHeaders	astyle.h	/^		vector<const string*>* nonParenHeaders;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::objCColonPadMode	astyle.h	/^		ObjCColonPad objCColonPadMode;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::operator =	astyle.h	/^		ASFormatter &operator=(ASFormatter &);      \/\/ assignment operator not to be implemented$/;"	p	class:astyle::ASFormatter	access:private	signature:(ASFormatter &)
astyle::ASFormatter::operators	astyle.h	/^		vector<const string*>* operators;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::padObjCMethodColon	ASFormatter.cpp	/^void ASFormatter::padObjCMethodColon()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::padObjCMethodColon	astyle.h	/^		void padObjCMethodColon();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::padOperators	ASFormatter.cpp	/^void ASFormatter::padOperators(const string* newOperator)$/;"	f	class:astyle::ASFormatter	signature:(const string* newOperator)
astyle::ASFormatter::padOperators	astyle.h	/^		void padOperators(const string* newOperator);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string* newOperator)
astyle::ASFormatter::padParens	ASFormatter.cpp	/^void ASFormatter::padParens(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
astyle::ASFormatter::padParens	astyle.h	/^		void padParens();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::parenStack	astyle.h	/^		vector<int>* parenStack;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::passedColon	astyle.h	/^		bool passedColon;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::passedSemicolon	astyle.h	/^		bool passedSemicolon;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::peekNextChar	ASFormatter.cpp	/^char ASFormatter::peekNextChar() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::peekNextChar	astyle.h	/^		char peekNextChar() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::peekNextText	ASFormatter.cpp	/^string ASFormatter::peekNextText(const string &firstLine, bool endOnEmptyLine \/*false*\/, bool shouldReset \/*false*\/) const$/;"	f	class:astyle::ASFormatter	signature:(const string &firstLine, bool endOnEmptyLine , bool shouldReset ) const
astyle::ASFormatter::peekNextText	astyle.h	/^		string peekNextText(const string &firstLine, bool endOnEmptyLine = false, bool shouldReset = false) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &firstLine, bool endOnEmptyLine = false, bool shouldReset = false) const
astyle::ASFormatter::pointerAlignment	astyle.h	/^		PointerAlign pointerAlignment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::pointerSymbolFollows	ASFormatter.cpp	/^bool ASFormatter::pointerSymbolFollows() const$/;"	f	class:astyle::ASFormatter	signature:() const
astyle::ASFormatter::pointerSymbolFollows	astyle.h	/^		bool pointerSymbolFollows() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
astyle::ASFormatter::preBracketHeaderStack	astyle.h	/^		vector<const string*>* preBracketHeaderStack;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::preCommandHeaders	astyle.h	/^		vector<const string*>* preCommandHeaders;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::preDefinitionHeaders	astyle.h	/^		vector<const string*>* preDefinitionHeaders;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::prependEmptyLine	astyle.h	/^		bool prependEmptyLine;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::preprocBlockEnd	astyle.h	/^		streamoff preprocBlockEnd;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::preprocBracketTypeStackSize	astyle.h	/^		int  preprocBracketTypeStackSize;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::previousBracketType	astyle.h	/^		BracketType previousBracketType;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::previousChar	astyle.h	/^		char previousChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::previousCommandChar	astyle.h	/^		char previousCommandChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::previousNonWSChar	astyle.h	/^		char previousNonWSChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::previousOperator	astyle.h	/^		const string* previousOperator;    \/\/ used ONLY by pad-oper$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::previousReadyFormattedLineLength	astyle.h	/^		size_t previousReadyFormattedLineLength;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::processPreprocessor	ASFormatter.cpp	/^void ASFormatter::processPreprocessor()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::processPreprocessor	astyle.h	/^		void processPreprocessor();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::processedFirstConditional	astyle.h	/^		bool processedFirstConditional;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::questionMarkStack	astyle.h	/^		vector<bool>* questionMarkStack;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::quoteChar	astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::readyFormattedLine	astyle.h	/^		string readyFormattedLine;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::referenceAlignment	astyle.h	/^		ReferenceAlign referenceAlignment;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::removeBracketsFromStatement	ASFormatter.cpp	/^bool ASFormatter::removeBracketsFromStatement()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::removeBracketsFromStatement	astyle.h	/^		bool removeBracketsFromStatement();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::resetEndOfStatement	ASFormatter.cpp	/^void ASFormatter::resetEndOfStatement()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::resetEndOfStatement	astyle.h	/^		void resetEndOfStatement();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::setAddBracketsMode	ASFormatter.cpp	/^void ASFormatter::setAddBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setAddBracketsMode	astyle.h	/^		void setAddBracketsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setAddOneLineBracketsMode	ASFormatter.cpp	/^void ASFormatter::setAddOneLineBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setAddOneLineBracketsMode	astyle.h	/^		void setAddOneLineBracketsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setAttachClass	ASFormatter.cpp	/^void ASFormatter::setAttachClass(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setAttachClass	astyle.h	/^		void setAttachClass(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setAttachClosingBracketMode	ASFormatter.cpp	/^void ASFormatter::setAttachClosingBracketMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setAttachClosingBracketMode	astyle.h	/^		void setAttachClosingBracketMode(bool state);$/;"	p	class:astyle::ASFormatter	access:private	signature:(bool state)
astyle::ASFormatter::setAttachExternC	ASFormatter.cpp	/^void ASFormatter::setAttachExternC(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setAttachExternC	astyle.h	/^		void setAttachExternC(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setAttachInline	ASFormatter.cpp	/^void ASFormatter::setAttachInline(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setAttachInline	astyle.h	/^		void setAttachInline(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setAttachNamespace	ASFormatter.cpp	/^void ASFormatter::setAttachNamespace(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setAttachNamespace	astyle.h	/^		void setAttachNamespace(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setBracketFormatMode	ASFormatter.cpp	/^void ASFormatter::setBracketFormatMode(BracketMode mode)$/;"	f	class:astyle::ASFormatter	signature:(BracketMode mode)
astyle::ASFormatter::setBracketFormatMode	astyle.h	/^		void setBracketFormatMode(BracketMode mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(BracketMode mode)
astyle::ASFormatter::setBreakAfterMode	ASFormatter.cpp	/^void ASFormatter::setBreakAfterMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setBreakAfterMode	astyle.h	/^		void setBreakAfterMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setBreakBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setBreakBlocksMode	astyle.h	/^		void setBreakBlocksMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setBreakBlocksVariables	astyle.h	/^		void setBreakBlocksVariables();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::setBreakClosingHeaderBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setBreakClosingHeaderBlocksMode	astyle.h	/^		void setBreakClosingHeaderBlocksMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setBreakClosingHeaderBracketsMode	ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setBreakClosingHeaderBracketsMode	astyle.h	/^		void setBreakClosingHeaderBracketsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setBreakElseIfsMode	ASFormatter.cpp	/^void ASFormatter::setBreakElseIfsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setBreakElseIfsMode	astyle.h	/^		void setBreakElseIfsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setBreakOneLineBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakOneLineBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setBreakOneLineBlocksMode	astyle.h	/^		void setBreakOneLineBlocksMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setCloseTemplatesMode	ASFormatter.cpp	/^void ASFormatter::setCloseTemplatesMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setCloseTemplatesMode	astyle.h	/^		void setCloseTemplatesMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setDeleteEmptyLinesMode	ASFormatter.cpp	/^void ASFormatter::setDeleteEmptyLinesMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setDeleteEmptyLinesMode	astyle.h	/^		void setDeleteEmptyLinesMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setFormattingStyle	ASFormatter.cpp	/^void ASFormatter::setFormattingStyle(FormatStyle style)$/;"	f	class:astyle::ASFormatter	signature:(FormatStyle style)
astyle::ASFormatter::setFormattingStyle	astyle.h	/^		void setFormattingStyle(FormatStyle style);$/;"	p	class:astyle::ASFormatter	access:public	signature:(FormatStyle style)
astyle::ASFormatter::setIndentCol1CommentsMode	ASFormatter.cpp	/^void ASFormatter::setIndentCol1CommentsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setIndentCol1CommentsMode	astyle.h	/^		void setIndentCol1CommentsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setLineEndFormat	ASFormatter.cpp	/^void ASFormatter::setLineEndFormat(LineEndFormat fmt)$/;"	f	class:astyle::ASFormatter	signature:(LineEndFormat fmt)
astyle::ASFormatter::setLineEndFormat	astyle.h	/^		void setLineEndFormat(LineEndFormat fmt);$/;"	p	class:astyle::ASFormatter	access:public	signature:(LineEndFormat fmt)
astyle::ASFormatter::setMaxCodeLength	ASFormatter.cpp	/^void ASFormatter::setMaxCodeLength(int max)$/;"	f	class:astyle::ASFormatter	signature:(int max)
astyle::ASFormatter::setMaxCodeLength	astyle.h	/^		void setMaxCodeLength(int max);$/;"	p	class:astyle::ASFormatter	access:public	signature:(int max)
astyle::ASFormatter::setMethodPrefixPaddingMode	ASFormatter.cpp	/^void ASFormatter::setMethodPrefixPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setMethodPrefixPaddingMode	astyle.h	/^		void setMethodPrefixPaddingMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setMethodPrefixUnPaddingMode	ASFormatter.cpp	/^void ASFormatter::setMethodPrefixUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setMethodPrefixUnPaddingMode	astyle.h	/^		void setMethodPrefixUnPaddingMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setObjCColonPaddingMode	ASFormatter.cpp	/^void ASFormatter::setObjCColonPaddingMode(ObjCColonPad mode)$/;"	f	class:astyle::ASFormatter	signature:(ObjCColonPad mode)
astyle::ASFormatter::setObjCColonPaddingMode	astyle.h	/^		void setObjCColonPaddingMode(ObjCColonPad mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(ObjCColonPad mode)
astyle::ASFormatter::setOperatorPaddingMode	ASFormatter.cpp	/^void ASFormatter::setOperatorPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setOperatorPaddingMode	astyle.h	/^		void setOperatorPaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
astyle::ASFormatter::setParensFirstPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensFirstPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setParensFirstPaddingMode	astyle.h	/^		void setParensFirstPaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
astyle::ASFormatter::setParensHeaderPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensHeaderPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setParensHeaderPaddingMode	astyle.h	/^		void setParensHeaderPaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
astyle::ASFormatter::setParensInsidePaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensInsidePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setParensInsidePaddingMode	astyle.h	/^		void setParensInsidePaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
astyle::ASFormatter::setParensOutsidePaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensOutsidePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setParensOutsidePaddingMode	astyle.h	/^		void setParensOutsidePaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
astyle::ASFormatter::setParensUnPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setParensUnPaddingMode	astyle.h	/^		void setParensUnPaddingMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setPointerAlignment	ASFormatter.cpp	/^void ASFormatter::setPointerAlignment(PointerAlign alignment)$/;"	f	class:astyle::ASFormatter	signature:(PointerAlign alignment)
astyle::ASFormatter::setPointerAlignment	astyle.h	/^		void setPointerAlignment(PointerAlign alignment);$/;"	p	class:astyle::ASFormatter	access:public	signature:(PointerAlign alignment)
astyle::ASFormatter::setPreprocBlockIndent	ASFormatter.cpp	/^void ASFormatter::setPreprocBlockIndent(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setPreprocBlockIndent	astyle.h	/^		void setPreprocBlockIndent(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setReferenceAlignment	ASFormatter.cpp	/^void ASFormatter::setReferenceAlignment(ReferenceAlign alignment)$/;"	f	class:astyle::ASFormatter	signature:(ReferenceAlign alignment)
astyle::ASFormatter::setReferenceAlignment	astyle.h	/^		void setReferenceAlignment(ReferenceAlign alignment);$/;"	p	class:astyle::ASFormatter	access:public	signature:(ReferenceAlign alignment)
astyle::ASFormatter::setRemoveBracketsMode	ASFormatter.cpp	/^void ASFormatter::setRemoveBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setRemoveBracketsMode	astyle.h	/^		void setRemoveBracketsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setSingleStatementsMode	ASFormatter.cpp	/^void ASFormatter::setSingleStatementsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setSingleStatementsMode	astyle.h	/^		void setSingleStatementsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setStripCommentPrefix	ASFormatter.cpp	/^void ASFormatter::setStripCommentPrefix(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setStripCommentPrefix	astyle.h	/^		void setStripCommentPrefix(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::setTabSpaceConversionMode	ASFormatter.cpp	/^void ASFormatter::setTabSpaceConversionMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
astyle::ASFormatter::setTabSpaceConversionMode	astyle.h	/^		void setTabSpaceConversionMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
astyle::ASFormatter::shouldAddBrackets	astyle.h	/^		bool shouldAddBrackets;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldAddOneLineBrackets	astyle.h	/^		bool shouldAddOneLineBrackets;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldAttachClass	astyle.h	/^		bool shouldAttachClass;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldAttachExternC	astyle.h	/^		bool shouldAttachExternC;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldAttachInline	astyle.h	/^		bool shouldAttachInline;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldAttachNamespace	astyle.h	/^		bool shouldAttachNamespace;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldBreakBlocks	astyle.h	/^		bool shouldBreakBlocks;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldBreakClosingHeaderBlocks	astyle.h	/^		bool shouldBreakClosingHeaderBlocks;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldBreakClosingHeaderBrackets	astyle.h	/^		bool shouldBreakClosingHeaderBrackets;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldBreakElseIfs	astyle.h	/^		bool shouldBreakElseIfs;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldBreakLineAfterLogical	astyle.h	/^		bool shouldBreakLineAfterLogical;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldBreakLineAtNextChar	astyle.h	/^		bool shouldBreakLineAtNextChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldBreakOneLineBlocks	astyle.h	/^		bool shouldBreakOneLineBlocks;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldBreakOneLineStatements	astyle.h	/^		bool shouldBreakOneLineStatements;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldCloseTemplates	astyle.h	/^		bool shouldCloseTemplates;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldConvertTabs	astyle.h	/^		bool shouldConvertTabs;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldDeleteEmptyLines	astyle.h	/^		bool shouldDeleteEmptyLines;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldIndentCol1Comments	astyle.h	/^		bool shouldIndentCol1Comments;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldIndentPreprocBlock	astyle.h	/^		bool shouldIndentPreprocBlock;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldKeepLineUnbroken	astyle.h	/^		bool shouldKeepLineUnbroken;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldPadFirstParen	astyle.h	/^		bool shouldPadFirstParen;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldPadHeader	astyle.h	/^		bool shouldPadHeader;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldPadMethodColon	astyle.h	/^		bool shouldPadMethodColon;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldPadMethodPrefix	astyle.h	/^		bool shouldPadMethodPrefix;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldPadOperators	astyle.h	/^		bool shouldPadOperators;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldPadParensInside	astyle.h	/^		bool shouldPadParensInside;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldPadParensOutside	astyle.h	/^		bool shouldPadParensOutside;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldRemoveBrackets	astyle.h	/^		bool shouldRemoveBrackets;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldRemoveNextClosingBracket	astyle.h	/^		bool shouldRemoveNextClosingBracket;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldReparseCurrentChar	astyle.h	/^		bool shouldReparseCurrentChar;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldStripCommentPrefix	astyle.h	/^		bool shouldStripCommentPrefix;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldUnPadMethodPrefix	astyle.h	/^		bool shouldUnPadMethodPrefix;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::shouldUnPadParens	astyle.h	/^		bool shouldUnPadParens;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::sourceIterator	astyle.h	/^		ASSourceIterator* sourceIterator;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::spacePadNum	astyle.h	/^		int  spacePadNum;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::squareBracketCount	astyle.h	/^		int  squareBracketCount;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::stripCommentPrefix	ASFormatter.cpp	/^void ASFormatter::stripCommentPrefix()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::stripCommentPrefix	astyle.h	/^		void stripCommentPrefix();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::structStack	astyle.h	/^		vector<bool>* structStack;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::tabIncrementIn	astyle.h	/^		int  tabIncrementIn;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::templateDepth	astyle.h	/^		int  templateDepth;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::testForTimeToSplitFormattedLine	ASFormatter.cpp	/^void ASFormatter::testForTimeToSplitFormattedLine()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::testForTimeToSplitFormattedLine	astyle.h	/^		void testForTimeToSplitFormattedLine();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::trimContinuationLine	ASFormatter.cpp	/^void ASFormatter::trimContinuationLine()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::trimContinuationLine	astyle.h	/^		void trimContinuationLine();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
astyle::ASFormatter::updateFormattedLineSplitPoints	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPoints(char appendedChar)$/;"	f	class:astyle::ASFormatter	signature:(char appendedChar)
astyle::ASFormatter::updateFormattedLineSplitPoints	astyle.h	/^		void updateFormattedLineSplitPoints(char appendedChar);$/;"	p	class:astyle::ASFormatter	access:private	signature:(char appendedChar)
astyle::ASFormatter::updateFormattedLineSplitPointsOperator	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPointsOperator(const string &sequence)$/;"	f	class:astyle::ASFormatter	signature:(const string &sequence)
astyle::ASFormatter::updateFormattedLineSplitPointsOperator	astyle.h	/^		void updateFormattedLineSplitPointsOperator(const string &sequence);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &sequence)
astyle::ASFormatter::updateFormattedLineSplitPointsPointerOrReference	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPointsPointerOrReference(size_t index)$/;"	f	class:astyle::ASFormatter	signature:(size_t index)
astyle::ASFormatter::updateFormattedLineSplitPointsPointerOrReference	astyle.h	/^		void updateFormattedLineSplitPointsPointerOrReference(size_t index);$/;"	p	class:astyle::ASFormatter	access:private	signature:(size_t index)
astyle::ASFormatter::verbatimDelimiter	astyle.h	/^		string verbatimDelimiter;$/;"	m	class:astyle::ASFormatter	access:private
astyle::ASFormatter::~ASFormatter	ASFormatter.cpp	/^ASFormatter::~ASFormatter()$/;"	f	class:astyle::ASFormatter	signature:()
astyle::ASFormatter::~ASFormatter	astyle.h	/^		virtual ~ASFormatter();$/;"	p	class:astyle::ASFormatter	access:public	signature:()
astyle::ASLibrary	astyle_main.h	/^class ASLibrary$/;"	c	namespace:astyle
astyle::ASLibrary::ASLibrary	astyle_main.h	/^		ASLibrary() {}$/;"	f	class:astyle::ASLibrary	access:public	signature:()
astyle::ASLibrary::convertUtf16ToUtf8	astyle_main.cpp	/^char* ASLibrary::convertUtf16ToUtf8(const utf16_t* utf16In) const$/;"	f	class:astyle::ASLibrary	signature:(const utf16_t* utf16In) const
astyle::ASLibrary::convertUtf16ToUtf8	astyle_main.h	/^		virtual char* convertUtf16ToUtf8(const utf16_t* pSourceIn) const;$/;"	p	class:astyle::ASLibrary	access:public	signature:(const utf16_t* pSourceIn) const
astyle::ASLibrary::convertUtf8ToUtf16	astyle_main.cpp	/^utf16_t* ASLibrary::convertUtf8ToUtf16(const char* utf8In, fpAlloc fpMemoryAlloc) const$/;"	f	class:astyle::ASLibrary	signature:(const char* utf8In, fpAlloc fpMemoryAlloc) const
astyle::ASLibrary::convertUtf8ToUtf16	astyle_main.h	/^		virtual utf16_t* convertUtf8ToUtf16(const char* utf8In, fpAlloc fpMemoryAlloc) const;$/;"	p	class:astyle::ASLibrary	access:public	signature:(const char* utf8In, fpAlloc fpMemoryAlloc) const
astyle::ASLibrary::formatUtf16	astyle_main.cpp	/^utf16_t* ASLibrary::formatUtf16(const utf16_t* pSourceIn,		\/\/ the source to be formatted$/;"	f	class:astyle::ASLibrary	signature:(const utf16_t* pSourceIn, const utf16_t* pOptions, fpError fpErrorHandler, fpAlloc fpMemoryAlloc) const
astyle::ASLibrary::formatUtf16	astyle_main.h	/^		utf16_t* formatUtf16(const utf16_t*, const utf16_t*, fpError, fpAlloc) const;$/;"	p	class:astyle::ASLibrary	access:public	signature:(const utf16_t*, const utf16_t*, fpError, fpAlloc) const
astyle::ASLibrary::tempMemoryAllocation	astyle_main.cpp	/^char* STDCALL ASLibrary::tempMemoryAllocation(unsigned long memoryNeeded)$/;"	f	class:astyle::ASLibrary	signature:(unsigned long memoryNeeded)
astyle::ASLibrary::tempMemoryAllocation	astyle_main.h	/^		static char* STDCALL tempMemoryAllocation(unsigned long memoryNeeded);$/;"	p	class:astyle::ASLibrary	access:private	signature:(unsigned long memoryNeeded)
astyle::ASLibrary::utf8_16	astyle_main.h	/^		Utf8_16 utf8_16;            \/\/ utf8\/16 conversion methods$/;"	m	class:astyle::ASLibrary	access:private
astyle::ASLibrary::~ASLibrary	astyle_main.h	/^		virtual ~ASLibrary() {}$/;"	f	class:astyle::ASLibrary	access:public	signature:()
astyle::ASLocalizer	ASLocalizer.h	/^class ASLocalizer$/;"	c	namespace:astyle
astyle::ASLocalizer::ASLocalizer	ASLocalizer.cpp	/^ASLocalizer::ASLocalizer()$/;"	f	class:astyle::ASLocalizer	signature:()
astyle::ASLocalizer::ASLocalizer	ASLocalizer.h	/^		ASLocalizer();$/;"	p	class:astyle::ASLocalizer	access:public	signature:()
astyle::ASLocalizer::getLanguageID	ASLocalizer.cpp	/^string ASLocalizer::getLanguageID() const$/;"	f	class:astyle::ASLocalizer	signature:() const
astyle::ASLocalizer::getLanguageID	ASLocalizer.h	/^		string getLanguageID() const;$/;"	p	class:astyle::ASLocalizer	access:public	signature:() const
astyle::ASLocalizer::getTranslationClass	ASLocalizer.cpp	/^const Translation* ASLocalizer::getTranslationClass() const$/;"	f	class:astyle::ASLocalizer	signature:() const
astyle::ASLocalizer::getTranslationClass	ASLocalizer.h	/^		const Translation* getTranslationClass() const;$/;"	p	class:astyle::ASLocalizer	access:public	signature:() const
astyle::ASLocalizer::m_langID	ASLocalizer.h	/^		string m_langID;				\/\/ language identifier from the locale$/;"	m	class:astyle::ASLocalizer	access:private
astyle::ASLocalizer::m_lcid	ASLocalizer.h	/^		size_t m_lcid;					\/\/ LCID of the user locale (Windows only)$/;"	m	class:astyle::ASLocalizer	access:private
astyle::ASLocalizer::m_localeName	ASLocalizer.h	/^		string m_localeName;			\/\/ name of the current locale (Linux only)$/;"	m	class:astyle::ASLocalizer	access:private
astyle::ASLocalizer::m_subLangID	ASLocalizer.h	/^		string m_subLangID;				\/\/ sub language identifier, if needed$/;"	m	class:astyle::ASLocalizer	access:private
astyle::ASLocalizer::m_translation	ASLocalizer.h	/^		Translation* m_translation;		\/\/ pointer to a polymorphic Translation class$/;"	m	class:astyle::ASLocalizer	access:private
astyle::ASLocalizer::setLanguageFromLCID	ASLocalizer.cpp	/^void ASLocalizer::setLanguageFromLCID(size_t lcid)$/;"	f	class:astyle::ASLocalizer	signature:(size_t lcid)
astyle::ASLocalizer::setLanguageFromLCID	ASLocalizer.h	/^		void setLanguageFromLCID(size_t lcid);$/;"	p	class:astyle::ASLocalizer	access:public	signature:(size_t lcid)
astyle::ASLocalizer::setLanguageFromName	ASLocalizer.cpp	/^void ASLocalizer::setLanguageFromName(const char* langID)$/;"	f	class:astyle::ASLocalizer	signature:(const char* langID)
astyle::ASLocalizer::setLanguageFromName	ASLocalizer.h	/^		void setLanguageFromName(const char* langID);$/;"	p	class:astyle::ASLocalizer	access:public	signature:(const char* langID)
astyle::ASLocalizer::setTranslationClass	ASLocalizer.cpp	/^void ASLocalizer::setTranslationClass()$/;"	f	class:astyle::ASLocalizer	signature:()
astyle::ASLocalizer::setTranslationClass	ASLocalizer.h	/^		void setTranslationClass();$/;"	p	class:astyle::ASLocalizer	access:private	signature:()
astyle::ASLocalizer::settext	ASLocalizer.cpp	/^const char* ASLocalizer::settext(const char* textIn) const$/;"	f	class:astyle::ASLocalizer	signature:(const char* textIn) const
astyle::ASLocalizer::settext	ASLocalizer.h	/^		const char* settext(const char* textIn) const;$/;"	p	class:astyle::ASLocalizer	access:public	signature:(const char* textIn) const
astyle::ASLocalizer::~ASLocalizer	ASLocalizer.cpp	/^ASLocalizer::~ASLocalizer()$/;"	f	class:astyle::ASLocalizer	signature:()
astyle::ASLocalizer::~ASLocalizer	ASLocalizer.h	/^		virtual ~ASLocalizer();$/;"	p	class:astyle::ASLocalizer	access:public	signature:()
astyle::ASOptions	astyle_main.h	/^class ASOptions$/;"	c	namespace:astyle
astyle::ASOptions::ASOptions	astyle_main.h	/^		ASOptions(ASFormatter &formatterArg) : formatter(formatterArg) {}$/;"	f	class:astyle::ASOptions	access:public	signature:(ASFormatter &formatterArg)
astyle::ASOptions::formatter	astyle_main.h	/^		ASFormatter &formatter;			\/\/ reference to the ASFormatter object$/;"	m	class:astyle::ASOptions	access:private
astyle::ASOptions::getOptionErrors	astyle_main.cpp	/^string ASOptions::getOptionErrors() const$/;"	f	class:astyle::ASOptions	signature:() const
astyle::ASOptions::getOptionErrors	astyle_main.h	/^		string getOptionErrors() const;$/;"	p	class:astyle::ASOptions	access:public	signature:() const
astyle::ASOptions::getParam	astyle_main.cpp	/^string ASOptions::getParam(const string &arg, const char* op)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* op)
astyle::ASOptions::getParam	astyle_main.cpp	/^string ASOptions::getParam(const string &arg, const char* op1, const char* op2)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* op1, const char* op2)
astyle::ASOptions::getParam	astyle_main.h	/^		string getParam(const string &arg, const char* op);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* op)
astyle::ASOptions::getParam	astyle_main.h	/^		string getParam(const string &arg, const char* op1, const char* op2);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* op1, const char* op2)
astyle::ASOptions::importOptions	astyle_main.cpp	/^void ASOptions::importOptions(istream &in, vector<string> &optionsVector)$/;"	f	class:astyle::ASOptions	signature:(istream &in, vector<string> &optionsVector)
astyle::ASOptions::importOptions	astyle_main.h	/^		void importOptions(istream &in, vector<string> &optionsVector);$/;"	p	class:astyle::ASOptions	access:public	signature:(istream &in, vector<string> &optionsVector)
astyle::ASOptions::isOption	astyle_main.cpp	/^bool ASOptions::isOption(const string &arg, const char* op)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* op)
astyle::ASOptions::isOption	astyle_main.cpp	/^bool ASOptions::isOption(const string &arg, const char* op1, const char* op2)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* op1, const char* op2)
astyle::ASOptions::isOption	astyle_main.h	/^		bool isOption(const string &arg, const char* op);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* op)
astyle::ASOptions::isOption	astyle_main.h	/^		bool isOption(const string &arg, const char* op1, const char* op2);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* op1, const char* op2)
astyle::ASOptions::isOptionError	astyle_main.cpp	/^void ASOptions::isOptionError(const string &arg, const string &errorInfo)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const string &errorInfo)
astyle::ASOptions::isOptionError	astyle_main.h	/^		void isOptionError(const string &arg, const string &errorInfo);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const string &errorInfo)
astyle::ASOptions::isParamOption	astyle_main.cpp	/^bool ASOptions::isParamOption(const string &arg, const char* option)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* option)
astyle::ASOptions::isParamOption	astyle_main.cpp	/^bool ASOptions::isParamOption(const string &arg, const char* option1, const char* option2)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* option1, const char* option2)
astyle::ASOptions::isParamOption	astyle_main.h	/^		bool isParamOption(const string &arg, const char* option);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* option)
astyle::ASOptions::isParamOption	astyle_main.h	/^		bool isParamOption(const string &arg, const char* option1, const char* option2);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* option1, const char* option2)
astyle::ASOptions::operator =	astyle_main.h	/^		ASOptions &operator=(ASOptions &);         \/\/ not to be implemented$/;"	p	class:astyle::ASOptions	access:private	signature:(ASOptions &)
astyle::ASOptions::optionErrors	astyle_main.h	/^		stringstream optionErrors;		\/\/ option error messages$/;"	m	class:astyle::ASOptions	access:private
astyle::ASOptions::parseOption	astyle_main.cpp	/^void ASOptions::parseOption(const string &arg, const string &errorInfo)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const string &errorInfo)
astyle::ASOptions::parseOption	astyle_main.h	/^		void parseOption(const string &arg, const string &errorInfo);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const string &errorInfo)
astyle::ASOptions::parseOptions	astyle_main.cpp	/^bool ASOptions::parseOptions(vector<string> &optionsVector, const string &errorInfo)$/;"	f	class:astyle::ASOptions	signature:(vector<string> &optionsVector, const string &errorInfo)
astyle::ASOptions::parseOptions	astyle_main.h	/^		bool parseOptions(vector<string> &optionsVector, const string &errorInfo);$/;"	p	class:astyle::ASOptions	access:public	signature:(vector<string> &optionsVector, const string &errorInfo)
astyle::ASResource	astyle.h	/^class ASResource$/;"	c	namespace:astyle
astyle::ASResource::ASResource	astyle.h	/^		ASResource() {}$/;"	f	class:astyle::ASResource	access:public	signature:()
astyle::ASResource::AS_ADD	ASResource.cpp	/^const string ASResource::AS_ADD = string("add");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_ADD	astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_AND	ASResource.cpp	/^const string ASResource::AS_AND = string("&&");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_AND	astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_AND_ASSIGN	ASResource.cpp	/^const string ASResource::AS_AND_ASSIGN = string("&=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_AND_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_ARROW	ASResource.cpp	/^const string ASResource::AS_ARROW = string("->");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_ARROW	astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_ASM	ASResource.cpp	/^const string ASResource::AS_ASM = string("asm");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_ASM	astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_ASSIGN = string("=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_ASSIGN	astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_AUTORELEASEPOOL	ASResource.cpp	/^const string ASResource::AS_AUTORELEASEPOOL = string("autoreleasepool");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_AUTORELEASEPOOL	astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BAR_DEFINE	ASResource.cpp	/^const string ASResource::AS_BAR_DEFINE = string("#define");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BAR_DEFINE	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BAR_EL	ASResource.cpp	/^const string ASResource::AS_BAR_EL = string("#el");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BAR_EL	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BAR_ENDIF	ASResource.cpp	/^const string ASResource::AS_BAR_ENDIF = string("#endif");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BAR_ENDIF	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BAR_IF	ASResource.cpp	/^const string ASResource::AS_BAR_IF = string("#if");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BAR_IF	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BAR_INCLUDE	ASResource.cpp	/^const string ASResource::AS_BAR_INCLUDE = string("#include");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BAR_INCLUDE	astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BIT_AND	ASResource.cpp	/^const string ASResource::AS_BIT_AND = string("&");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BIT_AND	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BIT_NOT	ASResource.cpp	/^const string ASResource::AS_BIT_NOT = string("~");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BIT_NOT	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BIT_OR	ASResource.cpp	/^const string ASResource::AS_BIT_OR = string("|");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BIT_OR	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_BIT_XOR	ASResource.cpp	/^const string ASResource::AS_BIT_XOR = string("^");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_BIT_XOR	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CASE	ASResource.cpp	/^const string ASResource::AS_CASE = string("case");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CASE	astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CATCH	ASResource.cpp	/^const string ASResource::AS_CATCH = string("catch");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CATCH	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CERR	ASResource.cpp	/^const string ASResource::AS_CERR = string("cerr");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CERR	astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CIN	ASResource.cpp	/^const string ASResource::AS_CIN = string("cin");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CIN	astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CLASS	ASResource.cpp	/^const string ASResource::AS_CLASS = string("class");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CLASS	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CLOSE_BRACKET	ASResource.cpp	/^const string ASResource::AS_CLOSE_BRACKET = string("}");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CLOSE_BRACKET	astyle.h	/^		static const string AS_OPEN_BRACKET, AS_CLOSE_BRACKET;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CLOSE_COMMENT	ASResource.cpp	/^const string ASResource::AS_CLOSE_COMMENT = string("*\/");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CLOSE_COMMENT	astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_COLON	ASResource.cpp	/^const string ASResource::AS_COLON = string(":");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_COLON	astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_COMMA	ASResource.cpp	/^const string ASResource::AS_COMMA = string(",");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_COMMA	astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CONST	ASResource.cpp	/^const string ASResource::AS_CONST = string("const");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CONST	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_CONST_CAST	ASResource.cpp	/^const string ASResource::AS_CONST_CAST = string("const_cast");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_CONST_CAST	astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_COUT	ASResource.cpp	/^const string ASResource::AS_COUT = string("cout");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_COUT	astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_DEFAULT	ASResource.cpp	/^const string ASResource::AS_DEFAULT = string("default");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_DEFAULT	astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_DELEGATE	ASResource.cpp	/^const string ASResource::AS_DELEGATE = string("delegate");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_DELEGATE	astyle.h	/^		static const string AS_DELEGATE, AS_UNCHECKED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_DIV	ASResource.cpp	/^const string ASResource::AS_DIV = string("\/");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_DIV	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_DIV_ASSIGN	ASResource.cpp	/^const string ASResource::AS_DIV_ASSIGN = string("\/=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_DIV_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_DO	ASResource.cpp	/^const string ASResource::AS_DO = string("do");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_DO	astyle.h	/^		static const string AS_DO, AS_WHILE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_DYNAMIC_CAST	ASResource.cpp	/^const string ASResource::AS_DYNAMIC_CAST = string("dynamic_cast");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_DYNAMIC_CAST	astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_ELSE	ASResource.cpp	/^const string ASResource::AS_ELSE = string("else");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_ELSE	astyle.h	/^		static const string AS_IF, AS_ELSE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_END	ASResource.cpp	/^const string ASResource::AS_END = string("end");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_END	astyle.h	/^		static const string AS_END;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_ENUM	ASResource.cpp	/^const string ASResource::AS_ENUM = string("enum");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_ENUM	astyle.h	/^		static const string AS_EXTERN, AS_ENUM;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_EQUAL	ASResource.cpp	/^const string ASResource::AS_EQUAL = string("==");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_EQUAL	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_EXTERN	ASResource.cpp	/^const string ASResource::AS_EXTERN = string("extern");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_EXTERN	astyle.h	/^		static const string AS_EXTERN, AS_ENUM;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_FINALLY	ASResource.cpp	/^const string ASResource::AS_FINALLY = string("finally");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_FINALLY	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_FIXED	ASResource.cpp	/^const string ASResource::AS_FIXED = string("fixed");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_FIXED	astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_FOR	ASResource.cpp	/^const string ASResource::AS_FOR = string("for");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_FOR	astyle.h	/^		static const string AS_FOR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_FOREACH	ASResource.cpp	/^const string ASResource::AS_FOREACH = string("foreach");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_FOREACH	astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_FOREVER	ASResource.cpp	/^const string ASResource::AS_FOREVER = string("forever");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_FOREVER	astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GCC_MAX_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GCC_MAX_ASSIGN = string(">?");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GCC_MAX_ASSIGN	astyle.h	/^		static const string AS_GCC_MIN_ASSIGN, AS_GCC_MAX_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GCC_MIN_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GCC_MIN_ASSIGN = string("<?");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GCC_MIN_ASSIGN	astyle.h	/^		static const string AS_GCC_MIN_ASSIGN, AS_GCC_MAX_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GET	ASResource.cpp	/^const string ASResource::AS_GET = string("get");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GET	astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GR	ASResource.cpp	/^const string ASResource::AS_GR = string(">");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GR	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GR_EQUAL	ASResource.cpp	/^const string ASResource::AS_GR_EQUAL = string(">=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GR_EQUAL	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GR_GR	ASResource.cpp	/^const string ASResource::AS_GR_GR = string(">>");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GR_GR	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GR_GR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GR_GR_ASSIGN = string(">>=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GR_GR_ASSIGN	astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GR_GR_GR	ASResource.cpp	/^const string ASResource::AS_GR_GR_GR = string(">>>");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GR_GR_GR	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_GR_GR_GR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GR_GR_GR_ASSIGN = string(">>>=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_GR_GR_GR_ASSIGN	astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_IF	ASResource.cpp	/^const string ASResource::AS_IF = string("if");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_IF	astyle.h	/^		static const string AS_IF, AS_ELSE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_INTERFACE	ASResource.cpp	/^const string ASResource::AS_INTERFACE = string("interface");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_INTERFACE	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_INTERRUPT	ASResource.cpp	/^const string ASResource::AS_INTERRUPT = string("interrupt");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_INTERRUPT	astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LAMBDA	ASResource.cpp	/^const string ASResource::AS_LAMBDA = string("=>");            \/\/ C# lambda expression arrow$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LAMBDA	astyle.h	/^		static const string AS_QUESTION_QUESTION, AS_LAMBDA;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LET	ASResource.cpp	/^const string ASResource::AS_LET = string("let");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LET	astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LOCK	ASResource.cpp	/^const string ASResource::AS_LOCK = string("lock");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LOCK	astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LS	ASResource.cpp	/^const string ASResource::AS_LS = string("<");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LS	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LS_EQUAL	ASResource.cpp	/^const string ASResource::AS_LS_EQUAL = string("<=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LS_EQUAL	astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LS_LS	ASResource.cpp	/^const string ASResource::AS_LS_LS = string("<<");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LS_LS	astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LS_LS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_LS_LS_ASSIGN = string("<<=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LS_LS_ASSIGN	astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LS_LS_LS	ASResource.cpp	/^const string ASResource::AS_LS_LS_LS = string("<<<");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LS_LS_LS	astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_LS_LS_LS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_LS_LS_LS_ASSIGN = string("<<<=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_LS_LS_LS_ASSIGN	astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MINUS	ASResource.cpp	/^const string ASResource::AS_MINUS = string("-");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MINUS	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MINUS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MINUS_ASSIGN = string("-=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MINUS_ASSIGN	astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MINUS_MINUS	ASResource.cpp	/^const string ASResource::AS_MINUS_MINUS = string("--");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MINUS_MINUS	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MOD	ASResource.cpp	/^const string ASResource::AS_MOD = string("%");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MOD	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MOD_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MOD_ASSIGN = string("%=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MOD_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MS_ASM	ASResource.cpp	/^const string ASResource::AS_MS_ASM = string("_asm");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MS_ASM	astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MS__ASM	ASResource.cpp	/^const string ASResource::AS_MS__ASM = string("__asm");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MS__ASM	astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MULT	ASResource.cpp	/^const string ASResource::AS_MULT = string("*");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MULT	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_MULT_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MULT_ASSIGN = string("*=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_MULT_ASSIGN	astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_NAMESPACE	ASResource.cpp	/^const string ASResource::AS_NAMESPACE = string("namespace");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_NAMESPACE	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_NEW	ASResource.cpp	/^const string ASResource::AS_NEW = string("new");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_NEW	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_NOEXCEPT	ASResource.cpp	/^const string ASResource::AS_NOEXCEPT = string("noexcept");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_NOEXCEPT	astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_NOT	ASResource.cpp	/^const string ASResource::AS_NOT = string("!");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_NOT	astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_NOT_EQUAL	ASResource.cpp	/^const string ASResource::AS_NOT_EQUAL = string("!=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_NOT_EQUAL	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_NS_DURING	ASResource.cpp	/^const string ASResource::AS_NS_DURING = string("NS_DURING");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_NS_DURING	astyle.h	/^		static const string AS_NS_DURING, AS_NS_HANDLER;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_NS_HANDLER	ASResource.cpp	/^const string ASResource::AS_NS_HANDLER = string("NS_HANDLER");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_NS_HANDLER	astyle.h	/^		static const string AS_NS_DURING, AS_NS_HANDLER;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_OPEN_BRACKET	ASResource.cpp	/^const string ASResource::AS_OPEN_BRACKET = string("{");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_OPEN_BRACKET	astyle.h	/^		static const string AS_OPEN_BRACKET, AS_CLOSE_BRACKET;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_OPEN_COMMENT	ASResource.cpp	/^const string ASResource::AS_OPEN_COMMENT = string("\/*");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_OPEN_COMMENT	astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_OPEN_LINE_COMMENT	ASResource.cpp	/^const string ASResource::AS_OPEN_LINE_COMMENT = string("\/\/");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_OPEN_LINE_COMMENT	astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_OPERATOR	ASResource.cpp	/^const string ASResource::AS_OPERATOR = string("operator");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_OPERATOR	astyle.h	/^		static const string AS_OPERATOR, AS_TEMPLATE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_OR	ASResource.cpp	/^const string ASResource::AS_OR = string("||");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_OR	astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_OR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_OR_ASSIGN = string("|=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_OR_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_OVERRIDE	ASResource.cpp	/^const string ASResource::AS_OVERRIDE = string("override");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_OVERRIDE	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_PLUS	ASResource.cpp	/^const string ASResource::AS_PLUS = string("+");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_PLUS	astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_PLUS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_PLUS_ASSIGN = string("+=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_PLUS_ASSIGN	astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_PLUS_PLUS	ASResource.cpp	/^const string ASResource::AS_PLUS_PLUS = string("++");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_PLUS_PLUS	astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_PRIVATE	ASResource.cpp	/^const string ASResource::AS_PRIVATE = string("private");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_PRIVATE	astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_PROTECTED	ASResource.cpp	/^const string ASResource::AS_PROTECTED = string("protected");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_PROTECTED	astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_PUBLIC	ASResource.cpp	/^const string ASResource::AS_PUBLIC = string("public");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_PUBLIC	astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_QFOREACH	ASResource.cpp	/^const string ASResource::AS_QFOREACH = string("Q_FOREACH");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_QFOREACH	astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_QFOREVER	ASResource.cpp	/^const string ASResource::AS_QFOREVER = string("Q_FOREVER");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_QFOREVER	astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_QUESTION	ASResource.cpp	/^const string ASResource::AS_QUESTION = string("?");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_QUESTION	astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_QUESTION_QUESTION	ASResource.cpp	/^const string ASResource::AS_QUESTION_QUESTION = string("??");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_QUESTION_QUESTION	astyle.h	/^		static const string AS_QUESTION_QUESTION, AS_LAMBDA;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_REINTERPRET_CAST	ASResource.cpp	/^const string ASResource::AS_REINTERPRET_CAST = string("reinterpret_cast");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_REINTERPRET_CAST	astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_REMOVE	ASResource.cpp	/^const string ASResource::AS_REMOVE = string("remove");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_REMOVE	astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_RETURN	ASResource.cpp	/^const string ASResource::AS_RETURN = string("return");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_RETURN	astyle.h	/^		static const string AS_RETURN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_SCOPE_RESOLUTION	ASResource.cpp	/^const string ASResource::AS_SCOPE_RESOLUTION = string("::");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_SCOPE_RESOLUTION	astyle.h	/^		static const string AS_SCOPE_RESOLUTION;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_SEALED	ASResource.cpp	/^const string ASResource::AS_SEALED = string("sealed");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_SEALED	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_SELECTOR	ASResource.cpp	/^const string ASResource::AS_SELECTOR = string("selector");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_SELECTOR	astyle.h	/^		static const string AS_SELECTOR;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_SEMICOLON	ASResource.cpp	/^const string ASResource::AS_SEMICOLON = string(";");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_SEMICOLON	astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_SET	ASResource.cpp	/^const string ASResource::AS_SET = string("set");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_SET	astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_STATIC	ASResource.cpp	/^const string ASResource::AS_STATIC = string("static");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_STATIC	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_STATIC_CAST	ASResource.cpp	/^const string ASResource::AS_STATIC_CAST = string("static_cast");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_STATIC_CAST	astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_STRUCT	ASResource.cpp	/^const string ASResource::AS_STRUCT = string("struct");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_STRUCT	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_SWITCH	ASResource.cpp	/^const string ASResource::AS_SWITCH = string("switch");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_SWITCH	astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_SYNCHRONIZED	ASResource.cpp	/^const string ASResource::AS_SYNCHRONIZED = string("synchronized");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_SYNCHRONIZED	astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_TEMPLATE	ASResource.cpp	/^const string ASResource::AS_TEMPLATE = string("template");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_TEMPLATE	astyle.h	/^		static const string AS_OPERATOR, AS_TEMPLATE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_THROW	ASResource.cpp	/^const string ASResource::AS_THROW = string("throw");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_THROW	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_THROWS	ASResource.cpp	/^const string ASResource::AS_THROWS = string("throws");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_THROWS	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_TRY	ASResource.cpp	/^const string ASResource::AS_TRY = string("try");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_TRY	astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_UNCHECKED	ASResource.cpp	/^const string ASResource::AS_UNCHECKED = string("unchecked");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_UNCHECKED	astyle.h	/^		static const string AS_DELEGATE, AS_UNCHECKED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_UNION	ASResource.cpp	/^const string ASResource::AS_UNION = string("union");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_UNION	astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_UNSAFE	ASResource.cpp	/^const string ASResource::AS_UNSAFE = string("unsafe");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_UNSAFE	astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_VOLATILE	ASResource.cpp	/^const string ASResource::AS_VOLATILE = string("volatile");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_VOLATILE	astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_WHERE	ASResource.cpp	/^const string ASResource::AS_WHERE = string("where");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_WHERE	astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_WHILE	ASResource.cpp	/^const string ASResource::AS_WHILE = string("while");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_WHILE	astyle.h	/^		static const string AS_DO, AS_WHILE;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS_XOR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_XOR_ASSIGN = string("^=");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS_XOR_ASSIGN	astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::AS__ASM__	ASResource.cpp	/^const string ASResource::AS__ASM__ = string("__asm__");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::AS__ASM__	astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::_AS_EXCEPT	ASResource.cpp	/^const string ASResource::_AS_EXCEPT = string("__except");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::_AS_EXCEPT	astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::_AS_FINALLY	ASResource.cpp	/^const string ASResource::_AS_FINALLY = string("__finally");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::_AS_FINALLY	astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::_AS_TRY	ASResource.cpp	/^const string ASResource::_AS_TRY = string("__try");$/;"	m	class:astyle::ASResource	file:
astyle::ASResource::_AS_TRY	astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource	access:public
astyle::ASResource::buildAssignmentOperators	ASResource.cpp	/^void ASResource::buildAssignmentOperators(vector<const string*>* assignmentOperators)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* assignmentOperators)
astyle::ASResource::buildAssignmentOperators	astyle.h	/^		void buildAssignmentOperators(vector<const string*>* assignmentOperators);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* assignmentOperators)
astyle::ASResource::buildCastOperators	ASResource.cpp	/^void ASResource::buildCastOperators(vector<const string*>* castOperators)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* castOperators)
astyle::ASResource::buildCastOperators	astyle.h	/^		void buildCastOperators(vector<const string*>* castOperators);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* castOperators)
astyle::ASResource::buildHeaders	ASResource.cpp	/^void ASResource::buildHeaders(vector<const string*>* headers, int fileType, bool beautifier)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* headers, int fileType, bool beautifier)
astyle::ASResource::buildHeaders	astyle.h	/^		void buildHeaders(vector<const string*>* headers, int fileType, bool beautifier = false);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* headers, int fileType, bool beautifier = false)
astyle::ASResource::buildIndentableHeaders	ASResource.cpp	/^void ASResource::buildIndentableHeaders(vector<const string*>* indentableHeaders)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* indentableHeaders)
astyle::ASResource::buildIndentableHeaders	astyle.h	/^		void buildIndentableHeaders(vector<const string*>* indentableHeaders);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* indentableHeaders)
astyle::ASResource::buildIndentableMacros	ASResource.cpp	/^void ASResource::buildIndentableMacros(vector<const pair<const string, const string>* >* indentableMacros)$/;"	f	class:astyle::ASResource	signature:(vector<const pair<const string, const string>* >* indentableMacros)
astyle::ASResource::buildIndentableMacros	astyle.h	/^		void buildIndentableMacros(vector<const pair<const string, const string>* >* indentableMacros);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const pair<const string, const string>* >* indentableMacros)
astyle::ASResource::buildNonAssignmentOperators	ASResource.cpp	/^void ASResource::buildNonAssignmentOperators(vector<const string*>* nonAssignmentOperators)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* nonAssignmentOperators)
astyle::ASResource::buildNonAssignmentOperators	astyle.h	/^		void buildNonAssignmentOperators(vector<const string*>* nonAssignmentOperators);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* nonAssignmentOperators)
astyle::ASResource::buildNonParenHeaders	ASResource.cpp	/^void ASResource::buildNonParenHeaders(vector<const string*>* nonParenHeaders, int fileType, bool beautifier)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* nonParenHeaders, int fileType, bool beautifier)
astyle::ASResource::buildNonParenHeaders	astyle.h	/^		void buildNonParenHeaders(vector<const string*>* nonParenHeaders, int fileType, bool beautifier = false);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* nonParenHeaders, int fileType, bool beautifier = false)
astyle::ASResource::buildOperators	ASResource.cpp	/^void ASResource::buildOperators(vector<const string*>* operators, int fileType)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* operators, int fileType)
astyle::ASResource::buildOperators	astyle.h	/^		void buildOperators(vector<const string*>* operators, int fileType);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* operators, int fileType)
astyle::ASResource::buildPreBlockStatements	ASResource.cpp	/^void ASResource::buildPreBlockStatements(vector<const string*>* preBlockStatements, int fileType)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* preBlockStatements, int fileType)
astyle::ASResource::buildPreBlockStatements	astyle.h	/^		void buildPreBlockStatements(vector<const string*>* preBlockStatements, int fileType);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* preBlockStatements, int fileType)
astyle::ASResource::buildPreCommandHeaders	ASResource.cpp	/^void ASResource::buildPreCommandHeaders(vector<const string*>* preCommandHeaders, int fileType)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* preCommandHeaders, int fileType)
astyle::ASResource::buildPreCommandHeaders	astyle.h	/^		void buildPreCommandHeaders(vector<const string*>* preCommandHeaders, int fileType);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* preCommandHeaders, int fileType)
astyle::ASResource::buildPreDefinitionHeaders	ASResource.cpp	/^void ASResource::buildPreDefinitionHeaders(vector<const string*>* preDefinitionHeaders, int fileType)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* preDefinitionHeaders, int fileType)
astyle::ASResource::buildPreDefinitionHeaders	astyle.h	/^		void buildPreDefinitionHeaders(vector<const string*>* preDefinitionHeaders, int fileType);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* preDefinitionHeaders, int fileType)
astyle::ASResource::~ASResource	astyle.h	/^		virtual ~ASResource() {}$/;"	f	class:astyle::ASResource	access:public	signature:()
astyle::ASSourceIterator	astyle.h	/^class ASSourceIterator$/;"	c	namespace:astyle
astyle::ASSourceIterator::ASSourceIterator	astyle.h	/^		ASSourceIterator() {}$/;"	f	class:astyle::ASSourceIterator	access:public	signature:()
astyle::ASSourceIterator::getStreamLength	astyle.h	/^		virtual int getStreamLength() const = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:() const
astyle::ASSourceIterator::hasMoreLines	astyle.h	/^		virtual bool hasMoreLines() const = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:() const
astyle::ASSourceIterator::nextLine	astyle.h	/^		virtual string nextLine(bool emptyLineWasDeleted = false) = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:(bool emptyLineWasDeleted = false)
astyle::ASSourceIterator::peekNextLine	astyle.h	/^		virtual string peekNextLine() = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:()
astyle::ASSourceIterator::peekReset	astyle.h	/^		virtual void peekReset() = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:()
astyle::ASSourceIterator::tellg	astyle.h	/^		virtual streamoff tellg() = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:()
astyle::ASSourceIterator::~ASSourceIterator	astyle.h	/^		virtual ~ASSourceIterator() {}$/;"	f	class:astyle::ASSourceIterator	access:public	signature:()
astyle::ASStreamIterator	astyle_main.h	/^class ASStreamIterator : public ASSourceIterator$/;"	c	namespace:astyle	inherits:ASSourceIterator
astyle::ASStreamIterator::ASStreamIterator	astyle_main.cpp	/^ASStreamIterator<T>::ASStreamIterator(T* in)$/;"	f	class:astyle::ASStreamIterator	signature:(T* in)
astyle::ASStreamIterator::ASStreamIterator	astyle_main.h	/^		ASStreamIterator(T* in);$/;"	p	class:astyle::ASStreamIterator	access:public	signature:(T* in)
astyle::ASStreamIterator::ASStreamIterator	astyle_main.h	/^		ASStreamIterator(const ASStreamIterator &copy);       \/\/ copy constructor not to be implemented$/;"	p	class:astyle::ASStreamIterator	access:private	signature:(const ASStreamIterator &copy)
astyle::ASStreamIterator::buffer	astyle_main.h	/^		string buffer;          \/\/ current input line$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::checkForEmptyLine	astyle_main.h	/^		bool checkForEmptyLine;$/;"	m	class:astyle::ASStreamIterator	access:public
astyle::ASStreamIterator::compareToInputBuffer	astyle_main.h	/^		bool compareToInputBuffer(const string &nextLine_) const$/;"	f	class:astyle::ASStreamIterator	access:public	signature:(const string &nextLine_) const
astyle::ASStreamIterator::eolLinux	astyle_main.h	/^		int eolLinux;           \/\/ number of Linux line endings, LF$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::eolMacOld	astyle_main.h	/^		int eolMacOld;          \/\/ number of old Mac line endings. CR$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::eolWindows	astyle_main.h	/^		int eolWindows;         \/\/ number of Windows line endings, CRLF$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::getLineEndChange	astyle_main.cpp	/^bool ASStreamIterator<T>::getLineEndChange(int lineEndFormat) const$/;"	f	class:astyle::ASStreamIterator	signature:(int lineEndFormat) const
astyle::ASStreamIterator::getLineEndChange	astyle_main.h	/^		bool getLineEndChange(int lineEndFormat) const;$/;"	p	class:astyle::ASStreamIterator	access:public	signature:(int lineEndFormat) const
astyle::ASStreamIterator::getOutputEOL	astyle_main.h	/^		const char* getOutputEOL() const { return outputEOL; }$/;"	f	class:astyle::ASStreamIterator	access:public	signature:() const
astyle::ASStreamIterator::getStreamLength	astyle_main.cpp	/^int ASStreamIterator<T>::getStreamLength() const$/;"	f	class:astyle::ASStreamIterator	signature:() const
astyle::ASStreamIterator::getStreamLength	astyle_main.h	/^		int  getStreamLength() const;$/;"	p	class:astyle::ASStreamIterator	access:public	signature:() const
astyle::ASStreamIterator::hasMoreLines	astyle_main.h	/^		bool hasMoreLines() const { return !inStream->eof(); }$/;"	f	class:astyle::ASStreamIterator	access:public	signature:() const
astyle::ASStreamIterator::inStream	astyle_main.h	/^		T* inStream;            \/\/ pointer to the input stream$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::nextLine	astyle_main.cpp	/^string ASStreamIterator<T>::nextLine(bool emptyLineWasDeleted)$/;"	f	class:astyle::ASStreamIterator	signature:(bool emptyLineWasDeleted)
astyle::ASStreamIterator::nextLine	astyle_main.h	/^		string nextLine(bool emptyLineWasDeleted);$/;"	p	class:astyle::ASStreamIterator	access:public	signature:(bool emptyLineWasDeleted)
astyle::ASStreamIterator::operator =	astyle_main.h	/^		ASStreamIterator &operator=(ASStreamIterator &);      \/\/ assignment operator not to be implemented$/;"	p	class:astyle::ASStreamIterator	access:private	signature:(ASStreamIterator &)
astyle::ASStreamIterator::outputEOL	astyle_main.h	/^		char outputEOL[4];      \/\/ next output end of line char$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::peekNextLine	astyle_main.cpp	/^string ASStreamIterator<T>::peekNextLine()$/;"	f	class:astyle::ASStreamIterator	signature:()
astyle::ASStreamIterator::peekNextLine	astyle_main.h	/^		string peekNextLine();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
astyle::ASStreamIterator::peekReset	astyle_main.cpp	/^void ASStreamIterator<T>::peekReset()$/;"	f	class:astyle::ASStreamIterator	signature:()
astyle::ASStreamIterator::peekReset	astyle_main.h	/^		void peekReset();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
astyle::ASStreamIterator::peekStart	astyle_main.h	/^		streamoff peekStart;    \/\/ starting position for peekNextLine$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::prevBuffer	astyle_main.h	/^		string prevBuffer;      \/\/ previous input line$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::prevLineDeleted	astyle_main.h	/^		bool prevLineDeleted;   \/\/ the previous input line was deleted$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::saveLastInputLine	astyle_main.cpp	/^void ASStreamIterator<T>::saveLastInputLine()$/;"	f	class:astyle::ASStreamIterator	signature:()
astyle::ASStreamIterator::saveLastInputLine	astyle_main.h	/^		void saveLastInputLine();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
astyle::ASStreamIterator::streamLength	astyle_main.h	/^		streamoff streamLength; \/\/ length of the input file stream$/;"	m	class:astyle::ASStreamIterator	access:private
astyle::ASStreamIterator::tellg	astyle_main.cpp	/^streamoff ASStreamIterator<T>::tellg()$/;"	f	class:astyle::ASStreamIterator	signature:()
astyle::ASStreamIterator::tellg	astyle_main.h	/^		streamoff tellg();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
astyle::ASStreamIterator::~ASStreamIterator	astyle_main.cpp	/^ASStreamIterator<T>::~ASStreamIterator()$/;"	f	class:astyle::ASStreamIterator	signature:()
astyle::ASStreamIterator::~ASStreamIterator	astyle_main.h	/^		virtual ~ASStreamIterator();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
astyle::ATTACH_MODE	astyle.h	/^	ATTACH_MODE,$/;"	e	enum:astyle::BracketMode
astyle::BREAK_MODE	astyle.h	/^	BREAK_MODE,$/;"	e	enum:astyle::BracketMode
astyle::BracketMode	astyle.h	/^enum BracketMode$/;"	g	namespace:astyle
astyle::BracketType	astyle.h	/^enum BracketType$/;"	g	namespace:astyle
astyle::CLASS_TYPE	astyle.h	/^	CLASS_TYPE = 2,				\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
astyle::COLON_PAD_AFTER	astyle.h	/^	COLON_PAD_AFTER,$/;"	e	enum:astyle::ObjCColonPad
astyle::COLON_PAD_ALL	astyle.h	/^	COLON_PAD_ALL,$/;"	e	enum:astyle::ObjCColonPad
astyle::COLON_PAD_BEFORE	astyle.h	/^	COLON_PAD_BEFORE$/;"	e	enum:astyle::ObjCColonPad
astyle::COLON_PAD_NONE	astyle.h	/^	COLON_PAD_NONE,$/;"	e	enum:astyle::ObjCColonPad
astyle::COLON_PAD_NO_CHANGE	astyle.h	/^	COLON_PAD_NO_CHANGE,$/;"	e	enum:astyle::ObjCColonPad
astyle::COMMAND_TYPE	astyle.h	/^	COMMAND_TYPE = 32,$/;"	e	enum:astyle::BracketType
astyle::C_TYPE	astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
astyle::ChineseSimplified	ASLocalizer.h	/^class ChineseSimplified : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::ChineseSimplified::ChineseSimplified	ASLocalizer.cpp	/^ChineseSimplified::ChineseSimplified()	\/\/ 中文（简体）$/;"	f	class:astyle::ChineseSimplified	signature:()
astyle::ChineseSimplified::ChineseSimplified	ASLocalizer.h	/^		ChineseSimplified();$/;"	p	class:astyle::ChineseSimplified	access:public	signature:()
astyle::ChineseTraditional	ASLocalizer.h	/^class ChineseTraditional : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::ChineseTraditional::ChineseTraditional	ASLocalizer.cpp	/^ChineseTraditional::ChineseTraditional()	\/\/ 中文（繁體）$/;"	f	class:astyle::ChineseTraditional	signature:()
astyle::ChineseTraditional::ChineseTraditional	ASLocalizer.h	/^		ChineseTraditional();$/;"	p	class:astyle::ChineseTraditional	access:public	signature:()
astyle::DEFINITION_TYPE	astyle.h	/^	DEFINITION_TYPE = 16,$/;"	e	enum:astyle::BracketType
astyle::Dutch	ASLocalizer.h	/^class Dutch : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Dutch::Dutch	ASLocalizer.cpp	/^Dutch::Dutch()	\/\/ Nederlandse$/;"	f	class:astyle::Dutch	signature:()
astyle::Dutch::Dutch	ASLocalizer.h	/^		Dutch();$/;"	p	class:astyle::Dutch	access:public	signature:()
astyle::ENCODING_8BIT	astyle.h	/^	ENCODING_8BIT,$/;"	e	enum:astyle::FileEncoding
astyle::ENUM_TYPE	astyle.h	/^	ENUM_TYPE = 128,			\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
astyle::EXTERN_TYPE	astyle.h	/^	EXTERN_TYPE = 1024,			\/\/ extern "C", not a command type extern$/;"	e	enum:astyle::BracketType
astyle::English	ASLocalizer.h	/^class English : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::English::English	ASLocalizer.cpp	/^English::English()$/;"	f	class:astyle::English	signature:()
astyle::English::English	ASLocalizer.h	/^		English();$/;"	p	class:astyle::English	access:public	signature:()
astyle::FileEncoding	astyle.h	/^enum FileEncoding$/;"	g	namespace:astyle
astyle::FileType	astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	g	namespace:astyle
astyle::Finnish	ASLocalizer.h	/^class Finnish : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Finnish::Finnish	ASLocalizer.cpp	/^Finnish::Finnish()	\/\/ Suomeksi$/;"	f	class:astyle::Finnish	signature:()
astyle::Finnish::Finnish	ASLocalizer.h	/^		Finnish();$/;"	p	class:astyle::Finnish	access:public	signature:()
astyle::FormatStyle	astyle.h	/^enum FormatStyle$/;"	g	namespace:astyle
astyle::French	ASLocalizer.h	/^class French : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::French::French	ASLocalizer.cpp	/^French::French()	\/\/ Française$/;"	f	class:astyle::French	signature:()
astyle::French::French	ASLocalizer.h	/^		French();$/;"	p	class:astyle::French	access:public	signature:()
astyle::German	ASLocalizer.h	/^class German : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::German::German	ASLocalizer.cpp	/^German::German()	\/\/ Deutsch$/;"	f	class:astyle::German	signature:()
astyle::German::German	ASLocalizer.h	/^		German();$/;"	p	class:astyle::German	access:public	signature:()
astyle::Hindi	ASLocalizer.h	/^class Hindi : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Hindi::Hindi	ASLocalizer.cpp	/^Hindi::Hindi()	\/\/ हिन्दी$/;"	f	class:astyle::Hindi	signature:()
astyle::Hindi::Hindi	ASLocalizer.h	/^		Hindi();$/;"	p	class:astyle::Hindi	access:public	signature:()
astyle::INIT_TYPE	astyle.h	/^	INIT_TYPE = 256,			\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
astyle::INTERFACE_TYPE	astyle.h	/^	INTERFACE_TYPE = 8,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
astyle::Italian	ASLocalizer.h	/^class Italian : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Italian::Italian	ASLocalizer.cpp	/^Italian::Italian()	\/\/ Italiano$/;"	f	class:astyle::Italian	signature:()
astyle::Italian::Italian	ASLocalizer.h	/^		Italian();$/;"	p	class:astyle::Italian	access:public	signature:()
astyle::JAVA_TYPE	astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
astyle::Japanese	ASLocalizer.h	/^class Japanese : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Japanese::Japanese	ASLocalizer.cpp	/^Japanese::Japanese()	\/\/ 日本$/;"	f	class:astyle::Japanese	signature:()
astyle::Japanese::Japanese	ASLocalizer.h	/^		Japanese();$/;"	p	class:astyle::Japanese	access:public	signature:()
astyle::Korean	ASLocalizer.h	/^class Korean : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Korean::Korean	ASLocalizer.cpp	/^Korean::Korean()	\/\/ 한국의$/;"	f	class:astyle::Korean	signature:()
astyle::Korean::Korean	ASLocalizer.h	/^		Korean();$/;"	p	class:astyle::Korean	access:public	signature:()
astyle::LINEEND_CR	astyle.h	/^	LINEEND_CR   = LINEEND_MACOLD$/;"	e	enum:astyle::LineEndFormat
astyle::LINEEND_CRLF	astyle.h	/^	LINEEND_CRLF = LINEEND_WINDOWS,$/;"	e	enum:astyle::LineEndFormat
astyle::LINEEND_DEFAULT	astyle.h	/^	LINEEND_DEFAULT,	\/\/ Use line break that matches most of the file$/;"	e	enum:astyle::LineEndFormat
astyle::LINEEND_LF	astyle.h	/^	LINEEND_LF   = LINEEND_LINUX,$/;"	e	enum:astyle::LineEndFormat
astyle::LINEEND_LINUX	astyle.h	/^	LINEEND_LINUX,$/;"	e	enum:astyle::LineEndFormat
astyle::LINEEND_MACOLD	astyle.h	/^	LINEEND_MACOLD,$/;"	e	enum:astyle::LineEndFormat
astyle::LINEEND_WINDOWS	astyle.h	/^	LINEEND_WINDOWS,$/;"	e	enum:astyle::LineEndFormat
astyle::LINUX_MODE	astyle.h	/^	LINUX_MODE,$/;"	e	enum:astyle::BracketMode
astyle::LineEndFormat	astyle.h	/^enum LineEndFormat$/;"	g	namespace:astyle
astyle::MINCOND_END	astyle.h	/^	MINCOND_END$/;"	e	enum:astyle::MinConditional
astyle::MINCOND_ONE	astyle.h	/^	MINCOND_ONE,$/;"	e	enum:astyle::MinConditional
astyle::MINCOND_ONEHALF	astyle.h	/^	MINCOND_ONEHALF,$/;"	e	enum:astyle::MinConditional
astyle::MINCOND_TWO	astyle.h	/^	MINCOND_TWO,$/;"	e	enum:astyle::MinConditional
astyle::MINCOND_ZERO	astyle.h	/^	MINCOND_ZERO,$/;"	e	enum:astyle::MinConditional
astyle::MinConditional	astyle.h	/^enum MinConditional$/;"	g	namespace:astyle
astyle::NAMESPACE_TYPE	astyle.h	/^	NAMESPACE_TYPE = 1,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
astyle::NONE_MODE	astyle.h	/^	NONE_MODE,$/;"	e	enum:astyle::BracketMode
astyle::NULL_TYPE	astyle.h	/^	NULL_TYPE = 0,$/;"	e	enum:astyle::BracketType
astyle::ObjCColonPad	astyle.h	/^enum ObjCColonPad$/;"	g	namespace:astyle
astyle::PTR_ALIGN_MIDDLE	astyle.h	/^	PTR_ALIGN_MIDDLE,$/;"	e	enum:astyle::PointerAlign
astyle::PTR_ALIGN_NAME	astyle.h	/^	PTR_ALIGN_NAME$/;"	e	enum:astyle::PointerAlign
astyle::PTR_ALIGN_NONE	astyle.h	/^	PTR_ALIGN_NONE,$/;"	e	enum:astyle::PointerAlign
astyle::PTR_ALIGN_TYPE	astyle.h	/^	PTR_ALIGN_TYPE,$/;"	e	enum:astyle::PointerAlign
astyle::PointerAlign	astyle.h	/^enum PointerAlign$/;"	g	namespace:astyle
astyle::Polish	ASLocalizer.h	/^class Polish : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Polish::Polish	ASLocalizer.cpp	/^Polish::Polish()	\/\/ Polski$/;"	f	class:astyle::Polish	signature:()
astyle::Polish::Polish	ASLocalizer.h	/^		Polish();$/;"	p	class:astyle::Polish	access:public	signature:()
astyle::Portuguese	ASLocalizer.h	/^class Portuguese : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Portuguese::Portuguese	ASLocalizer.cpp	/^Portuguese::Portuguese()	\/\/ Português$/;"	f	class:astyle::Portuguese	signature:()
astyle::Portuguese::Portuguese	ASLocalizer.h	/^		Portuguese();$/;"	p	class:astyle::Portuguese	access:public	signature:()
astyle::REF_ALIGN_MIDDLE	astyle.h	/^	REF_ALIGN_MIDDLE = PTR_ALIGN_MIDDLE,$/;"	e	enum:astyle::ReferenceAlign
astyle::REF_ALIGN_NAME	astyle.h	/^	REF_ALIGN_NAME = PTR_ALIGN_NAME,$/;"	e	enum:astyle::ReferenceAlign
astyle::REF_ALIGN_NONE	astyle.h	/^	REF_ALIGN_NONE = PTR_ALIGN_NONE,$/;"	e	enum:astyle::ReferenceAlign
astyle::REF_ALIGN_TYPE	astyle.h	/^	REF_ALIGN_TYPE = PTR_ALIGN_TYPE,$/;"	e	enum:astyle::ReferenceAlign
astyle::REF_SAME_AS_PTR	astyle.h	/^	REF_SAME_AS_PTR$/;"	e	enum:astyle::ReferenceAlign
astyle::RUN_IN_MODE	astyle.h	/^	RUN_IN_MODE$/;"	e	enum:astyle::BracketMode
astyle::ReferenceAlign	astyle.h	/^enum ReferenceAlign$/;"	g	namespace:astyle
astyle::Russian	ASLocalizer.h	/^class Russian : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Russian::Russian	ASLocalizer.cpp	/^Russian::Russian()	\/\/ русский$/;"	f	class:astyle::Russian	signature:()
astyle::Russian::Russian	ASLocalizer.h	/^		Russian();$/;"	p	class:astyle::Russian	access:public	signature:()
astyle::SHARP_TYPE	astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
astyle::SINGLE_LINE_TYPE	astyle.h	/^	SINGLE_LINE_TYPE = 2048$/;"	e	enum:astyle::BracketType
astyle::STROUSTRUP_MODE	astyle.h	/^	STROUSTRUP_MODE,$/;"	e	enum:astyle::BracketMode
astyle::STRUCT_TYPE	astyle.h	/^	STRUCT_TYPE = 4,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
astyle::STYLE_1TBS	astyle.h	/^	STYLE_1TBS,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_ALLMAN	astyle.h	/^	STYLE_ALLMAN,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_BANNER	astyle.h	/^	STYLE_BANNER,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_GNU	astyle.h	/^	STYLE_GNU,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_GOOGLE	astyle.h	/^	STYLE_GOOGLE,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_HORSTMANN	astyle.h	/^	STYLE_HORSTMANN,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_JAVA	astyle.h	/^	STYLE_JAVA,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_KR	astyle.h	/^	STYLE_KR,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_LINUX	astyle.h	/^	STYLE_LINUX,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_LISP	astyle.h	/^	STYLE_LISP$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_NONE	astyle.h	/^	STYLE_NONE,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_PICO	astyle.h	/^	STYLE_PICO,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_STROUSTRUP	astyle.h	/^	STYLE_STROUSTRUP,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_VTK	astyle.h	/^	STYLE_VTK,$/;"	e	enum:astyle::FormatStyle
astyle::STYLE_WHITESMITH	astyle.h	/^	STYLE_WHITESMITH,$/;"	e	enum:astyle::FormatStyle
astyle::Spanish	ASLocalizer.h	/^class Spanish : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Spanish::Spanish	ASLocalizer.cpp	/^Spanish::Spanish()	\/\/ Español$/;"	f	class:astyle::Spanish	signature:()
astyle::Spanish::Spanish	ASLocalizer.h	/^		Spanish();$/;"	p	class:astyle::Spanish	access:public	signature:()
astyle::Swedish	ASLocalizer.h	/^class Swedish : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Swedish::Swedish	ASLocalizer.cpp	/^Swedish::Swedish()	\/\/ Svenska$/;"	f	class:astyle::Swedish	signature:()
astyle::Swedish::Swedish	ASLocalizer.h	/^		Swedish();$/;"	p	class:astyle::Swedish	access:public	signature:()
astyle::Translation	ASLocalizer.h	/^class Translation$/;"	c	namespace:astyle
astyle::Translation::Translation	ASLocalizer.h	/^		Translation() {}$/;"	f	class:astyle::Translation	access:public	signature:()
astyle::Translation::addPair	ASLocalizer.cpp	/^void Translation::addPair(const string &english, const wstring &translated)$/;"	f	class:astyle::Translation	signature:(const string &english, const wstring &translated)
astyle::Translation::addPair	ASLocalizer.h	/^		void addPair(const string &english, const wstring &translated);$/;"	p	class:astyle::Translation	access:protected	signature:(const string &english, const wstring &translated)
astyle::Translation::convertToMultiByte	ASLocalizer.cpp	/^string Translation::convertToMultiByte(const wstring &wideStr) const$/;"	f	class:astyle::Translation	signature:(const wstring &wideStr) const
astyle::Translation::convertToMultiByte	ASLocalizer.h	/^		string convertToMultiByte(const wstring &wideStr) const;$/;"	p	class:astyle::Translation	access:public	signature:(const wstring &wideStr) const
astyle::Translation::getTranslationVectorSize	ASLocalizer.cpp	/^size_t Translation::getTranslationVectorSize() const$/;"	f	class:astyle::Translation	signature:() const
astyle::Translation::getTranslationVectorSize	ASLocalizer.h	/^		size_t getTranslationVectorSize() const;$/;"	p	class:astyle::Translation	access:public	signature:() const
astyle::Translation::getWideTranslation	ASLocalizer.cpp	/^bool Translation::getWideTranslation(const string &stringIn, wstring &wideOut) const$/;"	f	class:astyle::Translation	signature:(const string &stringIn, wstring &wideOut) const
astyle::Translation::getWideTranslation	ASLocalizer.h	/^		bool getWideTranslation(const string &stringIn, wstring &wideOut) const;$/;"	p	class:astyle::Translation	access:public	signature:(const string &stringIn, wstring &wideOut) const
astyle::Translation::m_translation	ASLocalizer.h	/^		vector<pair<string, wstring> > m_translation;		\/\/ translation vector$/;"	m	class:astyle::Translation	access:protected
astyle::Translation::translate	ASLocalizer.cpp	/^string &Translation::translate(const string &stringIn) const$/;"	f	class:astyle::Translation	signature:(const string &stringIn) const
astyle::Translation::translate	ASLocalizer.h	/^		string &translate(const string &stringIn) const;$/;"	p	class:astyle::Translation	access:public	signature:(const string &stringIn) const
astyle::Translation::~Translation	ASLocalizer.h	/^		virtual ~Translation() {}$/;"	f	class:astyle::Translation	access:public	signature:()
astyle::UTF_16BE	astyle.h	/^	UTF_16BE,$/;"	e	enum:astyle::FileEncoding
astyle::UTF_16LE	astyle.h	/^	UTF_16LE,     \/\/ Windows default$/;"	e	enum:astyle::FileEncoding
astyle::UTF_32BE	astyle.h	/^	UTF_32BE,$/;"	e	enum:astyle::FileEncoding
astyle::UTF_32LE	astyle.h	/^	UTF_32LE$/;"	e	enum:astyle::FileEncoding
astyle::Ukrainian	ASLocalizer.h	/^class Ukrainian : public Translation$/;"	c	namespace:astyle	inherits:Translation
astyle::Ukrainian::Ukrainian	ASLocalizer.cpp	/^Ukrainian::Ukrainian()	\/\/ Український$/;"	f	class:astyle::Ukrainian	signature:()
astyle::Ukrainian::Ukrainian	ASLocalizer.h	/^		Ukrainian();$/;"	p	class:astyle::Ukrainian	access:public	signature:()
astyle::Utf8_16	astyle_main.h	/^class Utf8_16$/;"	c	namespace:astyle
astyle::Utf8_16::SURROGATE_FIRST_VALUE	astyle_main.h	/^		enum { SURROGATE_FIRST_VALUE = 0x10000 };$/;"	e	enum:astyle::Utf8_16::__anon5
astyle::Utf8_16::SURROGATE_LEAD_FIRST	astyle_main.h	/^		enum { SURROGATE_LEAD_FIRST = 0xD800 };$/;"	e	enum:astyle::Utf8_16::__anon1
astyle::Utf8_16::SURROGATE_LEAD_LAST	astyle_main.h	/^		enum { SURROGATE_LEAD_LAST = 0xDBFF };$/;"	e	enum:astyle::Utf8_16::__anon2
astyle::Utf8_16::SURROGATE_TRAIL_FIRST	astyle_main.h	/^		enum { SURROGATE_TRAIL_FIRST = 0xDC00 };$/;"	e	enum:astyle::Utf8_16::__anon3
astyle::Utf8_16::SURROGATE_TRAIL_LAST	astyle_main.h	/^		enum { SURROGATE_TRAIL_LAST = 0xDFFF };$/;"	e	enum:astyle::Utf8_16::__anon4
astyle::Utf8_16::Utf16LengthFromUtf8	astyle_main.cpp	/^size_t Utf8_16::Utf16LengthFromUtf8(const char* utf8In, size_t len) const$/;"	f	class:astyle::Utf8_16	signature:(const char* utf8In, size_t len) const
astyle::Utf8_16::Utf16LengthFromUtf8	astyle_main.h	/^		size_t Utf16LengthFromUtf8(const char* utf8In, size_t inLen) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(const char* utf8In, size_t inLen) const
astyle::Utf8_16::Utf16ToUtf8	astyle_main.cpp	/^size_t Utf8_16::Utf16ToUtf8(char* utf16In, size_t inLen, bool isBigEndian,$/;"	f	class:astyle::Utf8_16	signature:(char* utf16In, size_t inLen, bool isBigEndian, bool firstBlock, char* utf8Out) const
astyle::Utf8_16::Utf16ToUtf8	astyle_main.h	/^		size_t Utf16ToUtf8(char* utf16In, size_t inLen, bool isBigEndian,$/;"	p	class:astyle::Utf8_16	access:public	signature:(char* utf16In, size_t inLen, bool isBigEndian, bool firstBlock, char* utf8Out) const
astyle::Utf8_16::Utf8LengthFromUtf16	astyle_main.cpp	/^size_t Utf8_16::Utf8LengthFromUtf16(const char* utf16In, size_t inLen, bool isBigEndian) const$/;"	f	class:astyle::Utf8_16	signature:(const char* utf16In, size_t inLen, bool isBigEndian) const
astyle::Utf8_16::Utf8LengthFromUtf16	astyle_main.h	/^		size_t Utf8LengthFromUtf16(const char* utf16In, size_t inLen, bool isBigEndian) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(const char* utf16In, size_t inLen, bool isBigEndian) const
astyle::Utf8_16::Utf8ToUtf16	astyle_main.cpp	/^size_t Utf8_16::Utf8ToUtf16(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const$/;"	f	class:astyle::Utf8_16	signature:(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const
astyle::Utf8_16::Utf8ToUtf16	astyle_main.h	/^		size_t Utf8ToUtf16(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const
astyle::Utf8_16::eFinal	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
astyle::Utf8_16::ePenultimate	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
astyle::Utf8_16::eSecondOf4Bytes	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
astyle::Utf8_16::eStart	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
astyle::Utf8_16::eState	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	g	class:astyle::Utf8_16	access:private
astyle::Utf8_16::getBigEndian	astyle_main.cpp	/^bool Utf8_16::getBigEndian() const$/;"	f	class:astyle::Utf8_16	signature:() const
astyle::Utf8_16::getBigEndian	astyle_main.h	/^		bool   getBigEndian() const;$/;"	p	class:astyle::Utf8_16	access:public	signature:() const
astyle::Utf8_16::swap16bit	astyle_main.cpp	/^int Utf8_16::swap16bit(int value) const$/;"	f	class:astyle::Utf8_16	signature:(int value) const
astyle::Utf8_16::swap16bit	astyle_main.h	/^		int    swap16bit(int value) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(int value) const
astyle::Utf8_16::ubyte	astyle_main.h	/^		typedef unsigned char ubyte;  \/\/ 8 bits$/;"	t	class:astyle::Utf8_16	access:private
astyle::Utf8_16::utf16	astyle_main.h	/^		typedef unsigned short utf16; \/\/ 16 bits$/;"	t	class:astyle::Utf8_16	access:private
astyle::Utf8_16::utf16len	astyle_main.cpp	/^size_t Utf8_16::utf16len(const utf16* utf16In) const$/;"	f	class:astyle::Utf8_16	signature:(const utf16* utf16In) const
astyle::Utf8_16::utf16len	astyle_main.h	/^		size_t utf16len(const utf16* utf16In) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(const utf16* utf16In) const
astyle::Utf8_16::utf8	astyle_main.h	/^		typedef unsigned char utf8;   \/\/ 8 bits$/;"	t	class:astyle::Utf8_16	access:private
astyle::WinLangCode	ASLocalizer.cpp	/^struct WinLangCode$/;"	s	namespace:astyle	file:
astyle::WinLangCode::canonicalLang	ASLocalizer.cpp	/^	char canonicalLang[3];$/;"	m	struct:astyle::WinLangCode	file:	access:public
astyle::WinLangCode::winLang	ASLocalizer.cpp	/^	size_t winLang;$/;"	m	struct:astyle::WinLangCode	file:	access:public
astyle::_err	astyle_main.cpp	/^	ostream* _err = &cerr;           \/\/ direct error messages to cerr$/;"	m	namespace:astyle	file:
astyle::g_console	astyle_main.cpp	/^	ASConsole* g_console = NULL;     \/\/ class to encapsulate console variables$/;"	m	namespace:astyle	file:
astyle::g_env	astyle_main.cpp	/^	JNIEnv*   g_env;$/;"	m	namespace:astyle	file:
astyle::g_fileSeparator	astyle_main.cpp	/^		char g_fileSeparator = '\/';      \/\/ Linux file separator$/;"	m	namespace:astyle	file:
astyle::g_fileSeparator	astyle_main.cpp	/^		char g_fileSeparator = '\\\\';     \/\/ Windows file separator$/;"	m	namespace:astyle	file:
astyle::g_isCaseSensitive	astyle_main.cpp	/^		bool g_isCaseSensitive = false;  \/\/ Windows IS case sensitive$/;"	m	namespace:astyle	file:
astyle::g_isCaseSensitive	astyle_main.cpp	/^		bool g_isCaseSensitive = true;   \/\/ Linux IS NOT case sensitive$/;"	m	namespace:astyle	file:
astyle::g_mid	astyle_main.cpp	/^	jmethodID g_mid;$/;"	m	namespace:astyle	file:
astyle::g_obj	astyle_main.cpp	/^	jobject   g_obj;$/;"	m	namespace:astyle	file:
astyle::g_preprocessorCppExternCBracket	ASBeautifier.cpp	/^static int g_preprocessorCppExternCBracket;$/;"	m	namespace:astyle	file:
astyle::g_version	astyle_main.cpp	/^const char* g_version = "2.05.1";$/;"	m	namespace:astyle	file:
astyle::sortOnLength	ASResource.cpp	/^bool sortOnLength(const string* a, const string* b)$/;"	f	namespace:astyle	signature:(const string* a, const string* b)
astyle::sortOnLength	astyle.h	/^bool sortOnLength(const string* a, const string* b);$/;"	p	namespace:astyle	signature:(const string* a, const string* b)
astyle::sortOnName	ASResource.cpp	/^bool sortOnName(const string* a, const string* b)$/;"	f	namespace:astyle	signature:(const string* a, const string* b)
astyle::sortOnName	astyle.h	/^bool sortOnName(const string* a, const string* b);$/;"	p	namespace:astyle	signature:(const string* a, const string* b)
astyle::wlc	ASLocalizer.cpp	/^static WinLangCode wlc[] =$/;"	m	namespace:astyle	file:
attachClosingBracketMode	astyle.h	/^		bool attachClosingBracketMode;$/;"	m	class:astyle::ASFormatter	access:private
backslashEndsPrevLine	astyle.h	/^		bool backslashEndsPrevLine;$/;"	m	class:astyle::ASBeautifier	access:private
baseFileType	astyle.h	/^		int baseFileType;      \/\/ a value from enum FileType$/;"	m	class:astyle::ASBase	access:private
beautifierFileType	astyle.h	/^		int beautifierFileType;$/;"	m	class:astyle::ASBeautifier	access:private
beautify	ASBeautifier.cpp	/^string ASBeautifier::beautify(const string &originalLine)$/;"	f	class:astyle::ASBeautifier	signature:(const string &originalLine)
beautify	astyle.h	/^		virtual string beautify(const string &line);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(const string &line)
blockCommentNoBeautify	astyle.h	/^		bool blockCommentNoBeautify;$/;"	m	class:astyle::ASBeautifier	access:private
blockCommentNoIndent	astyle.h	/^		bool blockCommentNoIndent;$/;"	m	class:astyle::ASBeautifier	access:private
blockIndent	astyle.h	/^		bool blockIndent;$/;"	m	class:astyle::ASBeautifier	access:private
blockParenDepthStack	astyle.h	/^		vector<int>* blockParenDepthStack;$/;"	m	class:astyle::ASBeautifier	access:private
blockStatementStack	astyle.h	/^		vector<bool>* blockStatementStack;$/;"	m	class:astyle::ASBeautifier	access:private
blockTabCount	astyle.h	/^		int  blockTabCount;$/;"	m	class:astyle::ASBeautifier	access:private
bracketBlockStateStack	astyle.h	/^		vector<bool>* bracketBlockStateStack;$/;"	m	class:astyle::ASBeautifier	access:private
bracketCount	astyle.h	/^		int  bracketCount;$/;"	m	class:astyle::ASEnhancer	access:private
bracketFormatMode	astyle.h	/^		BracketMode bracketFormatMode;$/;"	m	class:astyle::ASFormatter	access:private
bracketIndent	astyle.h	/^		bool bracketIndent;$/;"	m	class:astyle::ASBeautifier	access:private
bracketIndentVtk	astyle.h	/^		bool bracketIndentVtk;$/;"	m	class:astyle::ASBeautifier	access:private
bracketTypeStack	astyle.h	/^		vector<BracketType>* bracketTypeStack;$/;"	m	class:astyle::ASFormatter	access:private
breakCurrentOneLineBlock	astyle.h	/^		bool breakCurrentOneLineBlock;$/;"	m	class:astyle::ASFormatter	access:private
breakLine	ASFormatter.cpp	/^void ASFormatter::breakLine(bool isSplitLine \/*false*\/)$/;"	f	class:astyle::ASFormatter	signature:(bool isSplitLine )
breakLine	astyle.h	/^		void breakLine(bool isSplitLine = false);$/;"	p	class:astyle::ASFormatter	access:private	signature:(bool isSplitLine = false)
buffer	astyle_main.h	/^		string buffer;          \/\/ current input line$/;"	m	class:astyle::ASStreamIterator	access:private
buildAssignmentOperators	ASResource.cpp	/^void ASResource::buildAssignmentOperators(vector<const string*>* assignmentOperators)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* assignmentOperators)
buildAssignmentOperators	astyle.h	/^		void buildAssignmentOperators(vector<const string*>* assignmentOperators);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* assignmentOperators)
buildCastOperators	ASResource.cpp	/^void ASResource::buildCastOperators(vector<const string*>* castOperators)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* castOperators)
buildCastOperators	astyle.h	/^		void buildCastOperators(vector<const string*>* castOperators);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* castOperators)
buildHeaders	ASResource.cpp	/^void ASResource::buildHeaders(vector<const string*>* headers, int fileType, bool beautifier)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* headers, int fileType, bool beautifier)
buildHeaders	astyle.h	/^		void buildHeaders(vector<const string*>* headers, int fileType, bool beautifier = false);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* headers, int fileType, bool beautifier = false)
buildIndentableHeaders	ASResource.cpp	/^void ASResource::buildIndentableHeaders(vector<const string*>* indentableHeaders)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* indentableHeaders)
buildIndentableHeaders	astyle.h	/^		void buildIndentableHeaders(vector<const string*>* indentableHeaders);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* indentableHeaders)
buildIndentableMacros	ASResource.cpp	/^void ASResource::buildIndentableMacros(vector<const pair<const string, const string>* >* indentableMacros)$/;"	f	class:astyle::ASResource	signature:(vector<const pair<const string, const string>* >* indentableMacros)
buildIndentableMacros	astyle.h	/^		void buildIndentableMacros(vector<const pair<const string, const string>* >* indentableMacros);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const pair<const string, const string>* >* indentableMacros)
buildLanguageVectors	ASFormatter.cpp	/^void ASFormatter::buildLanguageVectors()$/;"	f	class:astyle::ASFormatter	signature:()
buildLanguageVectors	astyle.h	/^		void buildLanguageVectors();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
buildNonAssignmentOperators	ASResource.cpp	/^void ASResource::buildNonAssignmentOperators(vector<const string*>* nonAssignmentOperators)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* nonAssignmentOperators)
buildNonAssignmentOperators	astyle.h	/^		void buildNonAssignmentOperators(vector<const string*>* nonAssignmentOperators);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* nonAssignmentOperators)
buildNonParenHeaders	ASResource.cpp	/^void ASResource::buildNonParenHeaders(vector<const string*>* nonParenHeaders, int fileType, bool beautifier)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* nonParenHeaders, int fileType, bool beautifier)
buildNonParenHeaders	astyle.h	/^		void buildNonParenHeaders(vector<const string*>* nonParenHeaders, int fileType, bool beautifier = false);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* nonParenHeaders, int fileType, bool beautifier = false)
buildOperators	ASResource.cpp	/^void ASResource::buildOperators(vector<const string*>* operators, int fileType)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* operators, int fileType)
buildOperators	astyle.h	/^		void buildOperators(vector<const string*>* operators, int fileType);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* operators, int fileType)
buildPreBlockStatements	ASResource.cpp	/^void ASResource::buildPreBlockStatements(vector<const string*>* preBlockStatements, int fileType)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* preBlockStatements, int fileType)
buildPreBlockStatements	astyle.h	/^		void buildPreBlockStatements(vector<const string*>* preBlockStatements, int fileType);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* preBlockStatements, int fileType)
buildPreCommandHeaders	ASResource.cpp	/^void ASResource::buildPreCommandHeaders(vector<const string*>* preCommandHeaders, int fileType)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* preCommandHeaders, int fileType)
buildPreCommandHeaders	astyle.h	/^		void buildPreCommandHeaders(vector<const string*>* preCommandHeaders, int fileType);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* preCommandHeaders, int fileType)
buildPreDefinitionHeaders	ASResource.cpp	/^void ASResource::buildPreDefinitionHeaders(vector<const string*>* preDefinitionHeaders, int fileType)$/;"	f	class:astyle::ASResource	signature:(vector<const string*>* preDefinitionHeaders, int fileType)
buildPreDefinitionHeaders	astyle.h	/^		void buildPreDefinitionHeaders(vector<const string*>* preDefinitionHeaders, int fileType);$/;"	p	class:astyle::ASResource	access:public	signature:(vector<const string*>* preDefinitionHeaders, int fileType)
bypassBrowserOpen	astyle_main.h	/^		bool bypassBrowserOpen;             \/\/ don't open the browser on html options$/;"	m	class:astyle::ASConsole	access:private
canonicalLang	ASLocalizer.cpp	/^	char canonicalLang[3];$/;"	m	struct:astyle::WinLangCode	file:	access:public
caseHeaderFollowsComments	astyle.h	/^		bool caseHeaderFollowsComments;$/;"	m	class:astyle::ASFormatter	access:private
caseIndent	astyle.h	/^		bool caseIndent;$/;"	m	class:astyle::ASBeautifier	access:private
caseIndent	astyle.h	/^		bool caseIndent;$/;"	m	class:astyle::ASEnhancer	access:private
castOperators	astyle.h	/^		vector<const string*>* castOperators;$/;"	m	class:astyle::ASFormatter	access:private
charNum	astyle.h	/^		int  charNum;$/;"	m	class:astyle::ASFormatter	access:private
checkForEmptyLine	astyle_main.h	/^		bool checkForEmptyLine;$/;"	m	class:astyle::ASStreamIterator	access:public
checkForHeaderFollowingComment	ASFormatter.cpp	/^const string* ASFormatter::checkForHeaderFollowingComment(const string &firstLine) const$/;"	f	class:astyle::ASFormatter	signature:(const string &firstLine) const
checkForHeaderFollowingComment	astyle.h	/^		const string* checkForHeaderFollowingComment(const string &firstLine) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &firstLine) const
checkIfTemplateOpener	ASFormatter.cpp	/^void ASFormatter::checkIfTemplateOpener()$/;"	f	class:astyle::ASFormatter	signature:()
checkIfTemplateOpener	astyle.h	/^		void checkIfTemplateOpener();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
checksumIn	astyle.h	/^		size_t checksumIn;$/;"	m	class:astyle::ASFormatter	access:private
checksumOut	astyle.h	/^		size_t checksumOut;$/;"	m	class:astyle::ASFormatter	access:private
classIndent	astyle.h	/^		bool classIndent;$/;"	m	class:astyle::ASBeautifier	access:private
classInitializerIndents	astyle.h	/^		int  classInitializerIndents;$/;"	m	class:astyle::ASBeautifier	access:private
clearFormattedLineSplitPoints	ASFormatter.cpp	/^void ASFormatter::clearFormattedLineSplitPoints()$/;"	f	class:astyle::ASFormatter	signature:()
clearFormattedLineSplitPoints	astyle.h	/^		void clearFormattedLineSplitPoints();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
clearObjCMethodDefinitionAlignment	ASBeautifier.cpp	/^void ASBeautifier::clearObjCMethodDefinitionAlignment()$/;"	f	class:astyle::ASBeautifier	signature:()
clearObjCMethodDefinitionAlignment	astyle.h	/^		void clearObjCMethodDefinitionAlignment();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
code_type	TinyFormat.cpp	/^typedef enum code_type $/;"	g	file:
colonIndentObjCMethodDefinition	astyle.h	/^		int  colonIndentObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
commentAndHeaderFollows	ASFormatter.cpp	/^bool ASFormatter::commentAndHeaderFollows()$/;"	f	class:astyle::ASFormatter	signature:()
commentAndHeaderFollows	astyle.h	/^		bool commentAndHeaderFollows();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
compareToInputBuffer	astyle_main.h	/^		bool compareToInputBuffer(const string &nextLine_) const$/;"	f	class:astyle::ASStreamIterator	access:public	signature:(const string &nextLine_) const
computeChecksumIn	ASFormatter.cpp	/^bool ASFormatter::computeChecksumIn(const string &currentLine_)$/;"	f	class:astyle::ASFormatter	signature:(const string &currentLine_)
computeChecksumIn	astyle.h	/^		bool computeChecksumIn(const string &currentLine_);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &currentLine_)
computeChecksumOut	ASFormatter.cpp	/^bool ASFormatter::computeChecksumOut(const string &beautifiedLine)$/;"	f	class:astyle::ASFormatter	signature:(const string &beautifiedLine)
computeChecksumOut	astyle.h	/^		bool computeChecksumOut(const string &beautifiedLine);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &beautifiedLine)
computeObjCColonAlignment	ASBeautifier.cpp	/^int ASBeautifier::computeObjCColonAlignment(string &line, int colonAlignPosition) const$/;"	f	class:astyle::ASBeautifier	signature:(string &line, int colonAlignPosition) const
computeObjCColonAlignment	astyle.h	/^		int  computeObjCColonAlignment(string &line, int colonAlignPosition) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(string &line, int colonAlignPosition) const
computePreliminaryIndentation	ASBeautifier.cpp	/^void ASBeautifier::computePreliminaryIndentation()$/;"	f	class:astyle::ASBeautifier	signature:()
computePreliminaryIndentation	astyle.h	/^		void computePreliminaryIndentation();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
computePreprocessorIndent	ASBeautifier.cpp	/^pair<int, int> ASBeautifier::computePreprocessorIndent()$/;"	f	class:astyle::ASBeautifier	signature:()
computePreprocessorIndent	astyle.h	/^		pair<int, int> computePreprocessorIndent();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
convertForceTabIndentToSpaces	ASEnhancer.cpp	/^void ASEnhancer::convertForceTabIndentToSpaces(string &line) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line) const
convertForceTabIndentToSpaces	astyle.h	/^		void    convertForceTabIndentToSpaces(string  &line) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line) const
convertLineEnds	astyle_main.cpp	/^void ASConsole::convertLineEnds(ostringstream &out, int lineEnd)$/;"	f	class:astyle::ASConsole	signature:(ostringstream &out, int lineEnd)
convertLineEnds	astyle_main.h	/^		void convertLineEnds(ostringstream &out, int lineEnd);$/;"	p	class:astyle::ASConsole	access:public	signature:(ostringstream &out, int lineEnd)
convertSpaceIndentToForceTab	ASEnhancer.cpp	/^void ASEnhancer::convertSpaceIndentToForceTab(string &line) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line) const
convertSpaceIndentToForceTab	astyle.h	/^		void    convertSpaceIndentToForceTab(string &line) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line) const
convertTabToSpaces	ASBeautifier.cpp	/^int ASBeautifier::convertTabToSpaces(int i, int tabIncrementIn) const$/;"	f	class:astyle::ASBeautifier	signature:(int i, int tabIncrementIn) const
convertTabToSpaces	ASFormatter.cpp	/^void ASFormatter::convertTabToSpaces()$/;"	f	class:astyle::ASFormatter	signature:()
convertTabToSpaces	astyle.h	/^		int  convertTabToSpaces(int i, int tabIncrementIn) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(int i, int tabIncrementIn) const
convertTabToSpaces	astyle.h	/^		void convertTabToSpaces();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
convertToMultiByte	ASLocalizer.cpp	/^string Translation::convertToMultiByte(const wstring &wideStr) const$/;"	f	class:astyle::Translation	signature:(const wstring &wideStr) const
convertToMultiByte	ASLocalizer.h	/^		string convertToMultiByte(const wstring &wideStr) const;$/;"	p	class:astyle::Translation	access:public	signature:(const wstring &wideStr) const
convertUtf16ToUtf8	astyle_main.cpp	/^char* ASLibrary::convertUtf16ToUtf8(const utf16_t* utf16In) const$/;"	f	class:astyle::ASLibrary	signature:(const utf16_t* utf16In) const
convertUtf16ToUtf8	astyle_main.h	/^		virtual char* convertUtf16ToUtf8(const utf16_t* pSourceIn) const;$/;"	p	class:astyle::ASLibrary	access:public	signature:(const utf16_t* pSourceIn) const
convertUtf8ToUtf16	astyle_main.cpp	/^utf16_t* ASLibrary::convertUtf8ToUtf16(const char* utf8In, fpAlloc fpMemoryAlloc) const$/;"	f	class:astyle::ASLibrary	signature:(const char* utf8In, fpAlloc fpMemoryAlloc) const
convertUtf8ToUtf16	astyle_main.h	/^		virtual utf16_t* convertUtf8ToUtf16(const char* utf8In, fpAlloc fpMemoryAlloc) const;$/;"	p	class:astyle::ASLibrary	access:public	signature:(const char* utf8In, fpAlloc fpMemoryAlloc) const
copyTempStacks	ASBeautifier.cpp	/^vector<vector<const string*>*>* ASBeautifier::copyTempStacks(const ASBeautifier &other) const$/;"	f	class:astyle::ASBeautifier	signature:(const ASBeautifier &other) const
copyTempStacks	astyle.h	/^		vector<vector<const string*>*>* copyTempStacks(const ASBeautifier &other) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const ASBeautifier &other) const
correctMixedLineEnds	astyle_main.cpp	/^void ASConsole::correctMixedLineEnds(ostringstream &out)$/;"	f	class:astyle::ASConsole	signature:(ostringstream &out)
correctMixedLineEnds	astyle_main.h	/^		void correctMixedLineEnds(ostringstream &out);$/;"	p	class:astyle::ASConsole	access:private	signature:(ostringstream &out)
currentChar	astyle.h	/^		char currentChar;$/;"	m	class:astyle::ASFormatter	access:private
currentHeader	astyle.h	/^		const string* currentHeader;$/;"	m	class:astyle::ASBeautifier	access:private
currentHeader	astyle.h	/^		const string* currentHeader;$/;"	m	class:astyle::ASFormatter	access:private
currentLine	astyle.h	/^		string currentLine;$/;"	m	class:astyle::ASFormatter	access:private
currentLineBeginsWithBracket	astyle.h	/^		bool currentLineBeginsWithBracket;$/;"	m	class:astyle::ASFormatter	access:private
currentLineFirstBracketNum	astyle.h	/^		size_t currentLineFirstBracketNum;	\/\/ first bracket location on currentLine$/;"	m	class:astyle::ASFormatter	access:private
currentNonLegalCh	astyle.h	/^		char currentNonLegalCh;$/;"	m	class:astyle::ASBeautifier	access:private
currentNonSpaceCh	astyle.h	/^		char currentNonSpaceCh;$/;"	m	class:astyle::ASBeautifier	access:private
defineIndentCount	astyle.h	/^		int  defineIndentCount;$/;"	m	class:astyle::ASBeautifier	access:private
deleteBeautifierContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteBeautifierContainer(vector<ASBeautifier*>* &container)$/;"	f	class:astyle::ASBeautifier	signature:(vector<ASBeautifier*>* &container)
deleteBeautifierContainer	astyle.h	/^		void deleteBeautifierContainer(vector<ASBeautifier*>* &container);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(vector<ASBeautifier*>* &container)
deleteBeautifierVectors	ASBeautifier.cpp	/^void ASBeautifier::deleteBeautifierVectors()$/;"	f	class:astyle::ASBeautifier	signature:()
deleteBeautifierVectors	astyle.h	/^		void deleteBeautifierVectors();$/;"	p	class:astyle::ASBeautifier	access:protected	signature:()
deleteContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteContainer(T &container)$/;"	f	class:astyle::ASBeautifier	signature:(T &container)
deleteContainer	ASFormatter.cpp	/^void ASFormatter::deleteContainer(T &container)$/;"	f	class:astyle::ASFormatter	signature:(T &container)
deleteContainer	ASFormatter.cpp	/^void ASFormatter::deleteContainer(vector<BracketType>* &container)$/;"	f	class:astyle::ASFormatter	signature:(vector<BracketType>* &container)
deleteContainer	astyle.h	/^		template<typename T> void deleteContainer(T &container);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(T &container)
deleteContainer	astyle.h	/^		template<typename T> void deleteContainer(T &container);$/;"	p	class:astyle::ASFormatter	access:private	signature:(T &container)
deleteContainer	astyle.h	/^		void deleteContainer(vector<BracketType>* &container);$/;"	p	class:astyle::ASFormatter	access:private	signature:(vector<BracketType>* &container)
deleteTempStacksContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteTempStacksContainer(vector<vector<const string*>*>* &container)$/;"	f	class:astyle::ASBeautifier	signature:(vector<vector<const string*>*>* &container)
deleteTempStacksContainer	astyle.h	/^		void deleteTempStacksContainer(vector<vector<const string*>*>* &container);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(vector<vector<const string*>*>* &container)
detectEncoding	astyle_main.cpp	/^FileEncoding ASConsole::detectEncoding(const char* data, size_t dataSize) const$/;"	f	class:astyle::ASConsole	signature:(const char* data, size_t dataSize) const
detectEncoding	astyle_main.h	/^		FileEncoding detectEncoding(const char* data, size_t dataSize) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(const char* data, size_t dataSize) const
displayLastError	astyle_main.cpp	/^void ASConsole::displayLastError()$/;"	f	class:astyle::ASConsole	signature:()
displayLastError	astyle_main.h	/^		void displayLastError();$/;"	p	class:astyle::ASConsole	access:private	signature:()
doesLineStartComment	astyle.h	/^		bool doesLineStartComment;$/;"	m	class:astyle::ASFormatter	access:private
eFinal	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
ePenultimate	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
eSecondOf4Bytes	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
eStart	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
eState	astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	g	class:astyle::Utf8_16	access:private
elseHeaderFollowsComments	astyle.h	/^		bool elseHeaderFollowsComments;$/;"	m	class:astyle::ASFormatter	access:private
emptyLineFill	astyle.h	/^		bool emptyLineFill;$/;"	m	class:astyle::ASBeautifier	access:private
emptyLineFill	astyle.h	/^		bool emptyLineFill;$/;"	m	class:astyle::ASEnhancer	access:private
endOfAsmReached	astyle.h	/^		bool endOfAsmReached;$/;"	m	class:astyle::ASFormatter	access:private
endOfCodeReached	astyle.h	/^		bool endOfCodeReached;$/;"	m	class:astyle::ASFormatter	access:private
enhance	ASEnhancer.cpp	/^void ASEnhancer::enhance(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL)$/;"	f	class:astyle::ASEnhancer	signature:(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL)
enhance	astyle.h	/^		void enhance(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL);$/;"	p	class:astyle::ASEnhancer	access:public	signature:(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL)
enhancer	astyle.h	/^		ASEnhancer* enhancer;$/;"	m	class:astyle::ASFormatter	access:private
eolLinux	astyle_main.h	/^		int eolLinux;           \/\/ number of Linux line endings, LF$/;"	m	class:astyle::ASStreamIterator	access:private
eolMacOld	astyle_main.h	/^		int eolMacOld;          \/\/ number of old Mac line endings. CR$/;"	m	class:astyle::ASStreamIterator	access:private
eolWindows	astyle_main.h	/^		int eolWindows;         \/\/ number of Windows line endings, CRLF$/;"	m	class:astyle::ASStreamIterator	access:private
error	astyle_main.cpp	/^void ASConsole::error() const$/;"	f	class:astyle::ASConsole	signature:() const
error	astyle_main.cpp	/^void ASConsole::error(const char* why, const char* what) const$/;"	f	class:astyle::ASConsole	signature:(const char* why, const char* what) const
error	astyle_main.h	/^		void error() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
error	astyle_main.h	/^		void error(const char* why, const char* what) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(const char* why, const char* what) const
eventPreprocDepth	astyle.h	/^		int  eventPreprocDepth;$/;"	m	class:astyle::ASEnhancer	access:private
excludeHitsVector	astyle_main.h	/^		vector<bool>   excludeHitsVector;   \/\/ exclude flags for error reporting$/;"	m	class:astyle::ASConsole	access:private
excludeVector	astyle_main.h	/^		vector<string> excludeVector;       \/\/ exclude from wildcard hits$/;"	m	class:astyle::ASConsole	access:private
extractPreprocessorStatement	ASBeautifier.cpp	/^string ASBeautifier::extractPreprocessorStatement(const string &line) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line) const
extractPreprocessorStatement	astyle.h	/^		string extractPreprocessorStatement(const string &line) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &line) const
fileName	astyle_main.h	/^		vector<string> fileName;            \/\/ files to be processed including path$/;"	m	class:astyle::ASConsole	access:private
fileNameVector	astyle_main.h	/^		vector<string> fileNameVector;      \/\/ file paths and names from the command line$/;"	m	class:astyle::ASConsole	access:private
fileNameVectorIsEmpty	astyle_main.cpp	/^bool ASConsole::fileNameVectorIsEmpty() const$/;"	f	class:astyle::ASConsole	signature:() const
fileNameVectorIsEmpty	astyle_main.h	/^		bool fileNameVectorIsEmpty() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
fileOptionsVector	astyle_main.h	/^		vector<string> fileOptionsVector;   \/\/ options from the options file$/;"	m	class:astyle::ASConsole	access:private
fileType	astyle.h	/^		int  fileType;$/;"	m	class:astyle::ASBeautifier	access:private
filesAreIdentical	astyle_main.h	/^		bool filesAreIdentical;             \/\/ input and output files are identical$/;"	m	class:astyle::ASConsole	access:private
filesFormatted	astyle_main.h	/^		int  filesFormatted;                \/\/ number of files formatted$/;"	m	class:astyle::ASConsole	access:private
filesUnchanged	astyle_main.h	/^		int  filesUnchanged;                \/\/ number of files unchanged$/;"	m	class:astyle::ASConsole	access:private
findCaseColon	ASEnhancer.cpp	/^size_t ASEnhancer::findCaseColon(string &line, size_t caseIndex) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, size_t caseIndex) const
findCaseColon	astyle.h	/^		size_t  findCaseColon(string  &line, size_t caseIndex) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, size_t caseIndex) const
findFormattedLineSplitPoint	ASFormatter.cpp	/^size_t ASFormatter::findFormattedLineSplitPoint() const$/;"	f	class:astyle::ASFormatter	signature:() const
findFormattedLineSplitPoint	astyle.h	/^		size_t findFormattedLineSplitPoint() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
findHeader	ASBeautifier.cpp	/^const string* ASBeautifier::findHeader(const string &line, int i,$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i, const vector<const string*>* possibleHeaders) const
findHeader	astyle.h	/^		const string* findHeader(const string &line, int i,$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &line, int i, const vector<const string*>* possibleHeaders) const
findHeader	astyle.h	/^		const string* findHeader(const vector<const string*>* headers_) {$/;"	f	class:astyle::ASFormatter	access:private	signature:(const vector<const string*>* headers_)
findKeyword	ASResource.cpp	/^bool ASBase::findKeyword(const string &line, int i, const string &keyword) const$/;"	f	class:astyle::ASBase	signature:(const string &line, int i, const string &keyword) const
findKeyword	astyle.h	/^		bool findKeyword(const string &line, int i, const string &keyword) const;$/;"	p	class:astyle::ASBase	access:protected	signature:(const string &line, int i, const string &keyword) const
findNextChar	ASFormatter.cpp	/^size_t ASFormatter::findNextChar(string &line, char searchChar, int searchStart \/*0*\/)$/;"	f	class:astyle::ASFormatter	signature:(string &line, char searchChar, int searchStart )
findNextChar	astyle.h	/^		size_t findNextChar(string &line, char searchChar, int searchStart = 0);$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &line, char searchChar, int searchStart = 0)
findOperator	ASBeautifier.cpp	/^const string* ASBeautifier::findOperator(const string &line, int i,$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i, const vector<const string*>* possibleOperators) const
findOperator	astyle.h	/^		const string* findOperator(const string &line, int i,$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &line, int i, const vector<const string*>* possibleOperators) const
findOperator	astyle.h	/^		const string* findOperator(const vector<const string*>* headers_) {$/;"	f	class:astyle::ASFormatter	access:private	signature:(const vector<const string*>* headers_)
fixOptionVariableConflicts	ASFormatter.cpp	/^void ASFormatter::fixOptionVariableConflicts()$/;"	f	class:astyle::ASFormatter	signature:()
fixOptionVariableConflicts	astyle.h	/^		void fixOptionVariableConflicts();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
forceTab	astyle.h	/^		bool forceTab;$/;"	m	class:astyle::ASEnhancer	access:private
formatArrayBrackets	ASFormatter.cpp	/^void ASFormatter::formatArrayBrackets(BracketType bracketType, bool isOpeningArrayBracket)$/;"	f	class:astyle::ASFormatter	signature:(BracketType bracketType, bool isOpeningArrayBracket)
formatArrayBrackets	astyle.h	/^		void formatArrayBrackets(BracketType bracketType, bool isOpeningArrayBracket);$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType bracketType, bool isOpeningArrayBracket)
formatArrayRunIn	ASFormatter.cpp	/^void ASFormatter::formatArrayRunIn()$/;"	f	class:astyle::ASFormatter	signature:()
formatArrayRunIn	astyle.h	/^		void formatArrayRunIn();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatCinToCout	astyle_main.cpp	/^void ASConsole::formatCinToCout()$/;"	f	class:astyle::ASConsole	signature:()
formatCinToCout	astyle_main.h	/^		void formatCinToCout();$/;"	p	class:astyle::ASConsole	access:public	signature:()
formatClosingBracket	ASFormatter.cpp	/^void ASFormatter::formatClosingBracket(BracketType bracketType)$/;"	f	class:astyle::ASFormatter	signature:(BracketType bracketType)
formatClosingBracket	astyle.h	/^		void formatClosingBracket(BracketType bracketType);$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType bracketType)
formatCommentBody	ASFormatter.cpp	/^void ASFormatter::formatCommentBody()$/;"	f	class:astyle::ASFormatter	signature:()
formatCommentBody	astyle.h	/^		void formatCommentBody();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatCommentCloser	ASFormatter.cpp	/^void ASFormatter::formatCommentCloser()$/;"	f	class:astyle::ASFormatter	signature:()
formatCommentCloser	astyle.h	/^		void formatCommentCloser();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatCommentOpener	ASFormatter.cpp	/^void ASFormatter::formatCommentOpener()$/;"	f	class:astyle::ASFormatter	signature:()
formatCommentOpener	astyle.h	/^		void formatCommentOpener();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatFile	astyle_main.cpp	/^void ASConsole::formatFile(const string &fileName_)$/;"	f	class:astyle::ASConsole	signature:(const string &fileName_)
formatFile	astyle_main.h	/^		void formatFile(const string &fileName_);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &fileName_)
formatLineCommentBody	ASFormatter.cpp	/^void ASFormatter::formatLineCommentBody()$/;"	f	class:astyle::ASFormatter	signature:()
formatLineCommentBody	astyle.h	/^		void formatLineCommentBody();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatLineCommentOpener	ASFormatter.cpp	/^void ASFormatter::formatLineCommentOpener()$/;"	f	class:astyle::ASFormatter	signature:()
formatLineCommentOpener	astyle.h	/^		void formatLineCommentOpener();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatOpeningBracket	ASFormatter.cpp	/^void ASFormatter::formatOpeningBracket(BracketType bracketType)$/;"	f	class:astyle::ASFormatter	signature:(BracketType bracketType)
formatOpeningBracket	astyle.h	/^		void formatOpeningBracket(BracketType bracketType);$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType bracketType)
formatPointerOrReference	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReference(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
formatPointerOrReference	astyle.h	/^		void formatPointerOrReference();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatPointerOrReferenceCast	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceCast(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
formatPointerOrReferenceCast	astyle.h	/^		void formatPointerOrReferenceCast();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatPointerOrReferenceToMiddle	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToMiddle()$/;"	f	class:astyle::ASFormatter	signature:()
formatPointerOrReferenceToMiddle	astyle.h	/^		void formatPointerOrReferenceToMiddle();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatPointerOrReferenceToName	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToName()$/;"	f	class:astyle::ASFormatter	signature:()
formatPointerOrReferenceToName	astyle.h	/^		void formatPointerOrReferenceToName();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatPointerOrReferenceToType	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToType()$/;"	f	class:astyle::ASFormatter	signature:()
formatPointerOrReferenceToType	astyle.h	/^		void formatPointerOrReferenceToType();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatQuoteBody	ASFormatter.cpp	/^void ASFormatter::formatQuoteBody()$/;"	f	class:astyle::ASFormatter	signature:()
formatQuoteBody	astyle.h	/^		void formatQuoteBody();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatQuoteOpener	ASFormatter.cpp	/^void ASFormatter::formatQuoteOpener()$/;"	f	class:astyle::ASFormatter	signature:()
formatQuoteOpener	astyle.h	/^		void formatQuoteOpener();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatRunIn	ASFormatter.cpp	/^void ASFormatter::formatRunIn()$/;"	f	class:astyle::ASFormatter	signature:()
formatRunIn	astyle.h	/^		void formatRunIn();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
formatUtf16	astyle_main.cpp	/^utf16_t* ASLibrary::formatUtf16(const utf16_t* pSourceIn,		\/\/ the source to be formatted$/;"	f	class:astyle::ASLibrary	signature:(const utf16_t* pSourceIn, const utf16_t* pOptions, fpError fpErrorHandler, fpAlloc fpMemoryAlloc) const
formatUtf16	astyle_main.h	/^		utf16_t* formatUtf16(const utf16_t*, const utf16_t*, fpError, fpAlloc) const;$/;"	p	class:astyle::ASLibrary	access:public	signature:(const utf16_t*, const utf16_t*, fpError, fpAlloc) const
formattedLine	astyle.h	/^		string formattedLine;$/;"	m	class:astyle::ASFormatter	access:private
formattedLineCommentNum	astyle.h	/^		size_t formattedLineCommentNum;     \/\/ comment location on formattedLine$/;"	m	class:astyle::ASFormatter	access:private
formatter	astyle_main.h	/^		ASFormatter &formatter;			\/\/ reference to the ASFormatter object$/;"	m	class:astyle::ASOptions	access:private
formatter	astyle_main.h	/^		ASFormatter &formatter;             \/\/ reference to the ASFormatter object$/;"	m	class:astyle::ASConsole	access:private
formatterFileType	astyle.h	/^		int formatterFileType;$/;"	m	class:astyle::ASFormatter	access:private
formattingStyle	astyle.h	/^		FormatStyle formattingStyle;$/;"	m	class:astyle::ASFormatter	access:private
foundCastOperator	astyle.h	/^		bool foundCastOperator;$/;"	m	class:astyle::ASFormatter	access:private
foundClassHeader	astyle.h	/^		bool foundClassHeader;$/;"	m	class:astyle::ASFormatter	access:private
foundClosingHeader	astyle.h	/^		bool foundClosingHeader;$/;"	m	class:astyle::ASFormatter	access:private
foundInterfaceHeader	astyle.h	/^		bool foundInterfaceHeader;$/;"	m	class:astyle::ASFormatter	access:private
foundNamespaceHeader	astyle.h	/^		bool foundNamespaceHeader;$/;"	m	class:astyle::ASFormatter	access:private
foundPreCommandHeader	astyle.h	/^		bool foundPreCommandHeader;$/;"	m	class:astyle::ASBeautifier	access:private
foundPreCommandHeader	astyle.h	/^		bool foundPreCommandHeader;$/;"	m	class:astyle::ASFormatter	access:private
foundPreCommandMacro	astyle.h	/^		bool foundPreCommandMacro;$/;"	m	class:astyle::ASBeautifier	access:private
foundPreCommandMacro	astyle.h	/^		bool foundPreCommandMacro;$/;"	m	class:astyle::ASFormatter	access:private
foundPreDefinitionHeader	astyle.h	/^		bool foundPreDefinitionHeader;$/;"	m	class:astyle::ASFormatter	access:private
foundQuestionMark	astyle.h	/^		bool foundQuestionMark;$/;"	m	class:astyle::ASFormatter	access:private
foundStructHeader	astyle.h	/^		bool foundStructHeader;$/;"	m	class:astyle::ASFormatter	access:private
fpAlloc	astyle_main.h	/^	typedef char* (STDCALL* fpAlloc)(unsigned long memoryNeeded);$/;"	t
fpError	astyle_main.h	/^	typedef void (STDCALL* fpError)(int errorNumber, const char* errorMessage);$/;"	t
g_console	astyle_main.cpp	/^	ASConsole* g_console = NULL;     \/\/ class to encapsulate console variables$/;"	m	namespace:astyle	file:
g_env	astyle_main.cpp	/^	JNIEnv*   g_env;$/;"	m	namespace:astyle	file:
g_fileSeparator	astyle_main.cpp	/^		char g_fileSeparator = '\/';      \/\/ Linux file separator$/;"	m	namespace:astyle	file:
g_fileSeparator	astyle_main.cpp	/^		char g_fileSeparator = '\\\\';     \/\/ Windows file separator$/;"	m	namespace:astyle	file:
g_isCaseSensitive	astyle_main.cpp	/^		bool g_isCaseSensitive = false;  \/\/ Windows IS case sensitive$/;"	m	namespace:astyle	file:
g_isCaseSensitive	astyle_main.cpp	/^		bool g_isCaseSensitive = true;   \/\/ Linux IS NOT case sensitive$/;"	m	namespace:astyle	file:
g_mid	astyle_main.cpp	/^	jmethodID g_mid;$/;"	m	namespace:astyle	file:
g_obj	astyle_main.cpp	/^	jobject   g_obj;$/;"	m	namespace:astyle	file:
g_preprocessorCppExternCBracket	ASBeautifier.cpp	/^static int g_preprocessorCppExternCBracket;$/;"	m	namespace:astyle	file:
g_version	astyle_main.cpp	/^const char* g_version = "2.05.1";$/;"	m	namespace:astyle	file:
getArgvOptions	astyle_main.cpp	/^vector<string> ASConsole::getArgvOptions(int argc, char** argv) const$/;"	f	class:astyle::ASConsole	signature:(int argc, char** argv) const
getArgvOptions	astyle_main.h	/^		vector<string> getArgvOptions(int argc, char** argv) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(int argc, char** argv) const
getBeautifierFileType	ASBeautifier.cpp	/^int ASBeautifier::getBeautifierFileType() const$/;"	f	class:astyle::ASBeautifier	signature:() const
getBeautifierFileType	astyle.h	/^		int  getBeautifierFileType() const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:() const
getBigEndian	astyle_main.cpp	/^bool Utf8_16::getBigEndian() const$/;"	f	class:astyle::Utf8_16	signature:() const
getBigEndian	astyle_main.h	/^		bool   getBigEndian() const;$/;"	p	class:astyle::Utf8_16	access:public	signature:() const
getBlockIndent	ASBeautifier.cpp	/^bool ASBeautifier::getBlockIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getBlockIndent	astyle.h	/^		bool getBlockIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getBracketIndent	ASBeautifier.cpp	/^bool ASBeautifier::getBracketIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getBracketIndent	astyle.h	/^		bool getBracketIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getBracketType	ASFormatter.cpp	/^BracketType ASFormatter::getBracketType()$/;"	f	class:astyle::ASFormatter	signature:()
getBracketType	astyle.h	/^		BracketType getBracketType();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
getCaseIndent	ASBeautifier.cpp	/^bool ASBeautifier::getCaseIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getCaseIndent	astyle.h	/^		bool getCaseIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getChecksumDiff	ASFormatter.cpp	/^int ASFormatter::getChecksumDiff() const$/;"	f	class:astyle::ASFormatter	signature:() const
getChecksumDiff	astyle.h	/^		int  getChecksumDiff() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
getChecksumIn	ASFormatter.cpp	/^size_t ASFormatter::getChecksumIn() const$/;"	f	class:astyle::ASFormatter	signature:() const
getChecksumIn	astyle.h	/^		size_t getChecksumIn() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
getChecksumOut	ASFormatter.cpp	/^size_t ASFormatter::getChecksumOut() const$/;"	f	class:astyle::ASFormatter	signature:() const
getChecksumOut	astyle.h	/^		size_t getChecksumOut() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
getClassIndent	ASBeautifier.cpp	/^bool ASBeautifier::getClassIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getClassIndent	astyle.h	/^		bool getClassIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getCurrentDirectory	astyle_main.cpp	/^string ASConsole::getCurrentDirectory(const string &fileName_) const$/;"	f	class:astyle::ASConsole	signature:(const string &fileName_) const
getCurrentDirectory	astyle_main.h	/^		string getCurrentDirectory(const string &fileName_) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &fileName_) const
getCurrentLineCommentAdjustment	ASFormatter.cpp	/^int ASFormatter::getCurrentLineCommentAdjustment()$/;"	f	class:astyle::ASFormatter	signature:()
getCurrentLineCommentAdjustment	astyle.h	/^		int  getCurrentLineCommentAdjustment();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
getCurrentWord	ASResource.cpp	/^string ASBase::getCurrentWord(const string &line, size_t index) const$/;"	f	class:astyle::ASBase	signature:(const string &line, size_t index) const
getCurrentWord	astyle.h	/^		string getCurrentWord(const string &line, size_t index) const;$/;"	p	class:astyle::ASBase	access:protected	signature:(const string &line, size_t index) const
getEmptyLineFill	ASBeautifier.cpp	/^bool ASBeautifier::getEmptyLineFill(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getEmptyLineFill	astyle.h	/^		bool getEmptyLineFill(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getExcludeHitsVector	astyle_main.cpp	/^vector<bool> ASConsole::getExcludeHitsVector() const$/;"	f	class:astyle::ASConsole	signature:() const
getExcludeHitsVector	astyle_main.h	/^		vector<bool>   getExcludeHitsVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getExcludeVector	astyle_main.cpp	/^vector<string> ASConsole::getExcludeVector() const$/;"	f	class:astyle::ASConsole	signature:() const
getExcludeVector	astyle_main.h	/^		vector<string> getExcludeVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getFileName	astyle_main.cpp	/^vector<string> ASConsole::getFileName() const$/;"	f	class:astyle::ASConsole	signature:() const
getFileName	astyle_main.h	/^		vector<string> getFileName() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getFileNameVector	astyle_main.cpp	/^vector<string> ASConsole::getFileNameVector() const$/;"	f	class:astyle::ASConsole	signature:() const
getFileNameVector	astyle_main.h	/^		vector<string> getFileNameVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getFileNames	astyle_main.cpp	/^void ASConsole::getFileNames(const string &directory, const string &wildcard)$/;"	f	class:astyle::ASConsole	signature:(const string &directory, const string &wildcard)
getFileNames	astyle_main.h	/^		void getFileNames(const string &directory, const string &wildcard);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &directory, const string &wildcard)
getFileOptionsVector	astyle_main.cpp	/^vector<string> ASConsole::getFileOptionsVector() const$/;"	f	class:astyle::ASConsole	signature:() const
getFileOptionsVector	astyle_main.h	/^		vector<string> getFileOptionsVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getFilePaths	astyle_main.cpp	/^void ASConsole::getFilePaths(string &filePath)$/;"	f	class:astyle::ASConsole	signature:(string &filePath)
getFilePaths	astyle_main.h	/^		void getFilePaths(string &filePath);$/;"	p	class:astyle::ASConsole	access:private	signature:(string &filePath)
getFileType	ASBeautifier.cpp	/^int ASBeautifier::getFileType() const$/;"	f	class:astyle::ASBeautifier	signature:() const
getFileType	astyle.h	/^		int  getFileType() const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:() const
getFilesAreIdentical	astyle_main.cpp	/^bool ASConsole::getFilesAreIdentical() const$/;"	f	class:astyle::ASConsole	signature:() const
getFilesAreIdentical	astyle_main.h	/^		bool getFilesAreIdentical() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getFilesFormatted	astyle_main.cpp	/^int ASConsole::getFilesFormatted() const$/;"	f	class:astyle::ASConsole	signature:() const
getFilesFormatted	astyle_main.h	/^		int  getFilesFormatted() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getFollowingOperator	ASFormatter.cpp	/^const string* ASFormatter::getFollowingOperator() const$/;"	f	class:astyle::ASFormatter	signature:() const
getFollowingOperator	astyle.h	/^		const string* getFollowingOperator() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
getForceTabIndentation	ASBeautifier.cpp	/^bool ASBeautifier::getForceTabIndentation(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getForceTabIndentation	astyle.h	/^		bool getForceTabIndentation(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getFormatterFileType	ASFormatter.cpp	/^int ASFormatter::getFormatterFileType() const$/;"	f	class:astyle::ASFormatter	signature:() const
getFormatterFileType	astyle.h	/^		int  getFormatterFileType() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
getIgnoreExcludeErrors	astyle_main.cpp	/^bool ASConsole::getIgnoreExcludeErrors() const$/;"	f	class:astyle::ASConsole	signature:() const
getIgnoreExcludeErrors	astyle_main.h	/^		bool getIgnoreExcludeErrors() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getIgnoreExcludeErrorsDisplay	astyle_main.cpp	/^bool ASConsole::getIgnoreExcludeErrorsDisplay() const$/;"	f	class:astyle::ASConsole	signature:() const
getIgnoreExcludeErrorsDisplay	astyle_main.h	/^		bool getIgnoreExcludeErrorsDisplay() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getInStatementIndentAssign	ASBeautifier.cpp	/^int ASBeautifier::getInStatementIndentAssign(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, size_t currPos) const
getInStatementIndentAssign	astyle.h	/^		int  getInStatementIndentAssign(const string &line, size_t currPos) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, size_t currPos) const
getInStatementIndentComma	ASBeautifier.cpp	/^int ASBeautifier::getInStatementIndentComma(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, size_t currPos) const
getInStatementIndentComma	astyle.h	/^		int  getInStatementIndentComma(const string &line, size_t currPos) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, size_t currPos) const
getIndentLength	ASBeautifier.cpp	/^int ASBeautifier::getIndentLength(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getIndentLength	astyle.h	/^		int  getIndentLength(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getIndentString	ASBeautifier.cpp	/^string ASBeautifier::getIndentString(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getIndentString	astyle.h	/^		string getIndentString(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getIndentedLineReturn	ASBeautifier.cpp	/^string &ASBeautifier::getIndentedLineReturn(string &newLine, const string &originalLine) const$/;"	f	class:astyle::ASBeautifier	signature:(string &newLine, const string &originalLine) const
getIndentedLineReturn	astyle.h	/^		string &getIndentedLineReturn(string &newLine, const string &originalLine) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(string &newLine, const string &originalLine) const
getIsDryRun	astyle_main.cpp	/^bool ASConsole::getIsDryRun() const$/;"	f	class:astyle::ASConsole	signature:() const
getIsDryRun	astyle_main.h	/^		bool getIsDryRun() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getIsFormattedOnly	astyle_main.cpp	/^bool ASConsole::getIsFormattedOnly() const$/;"	f	class:astyle::ASConsole	signature:() const
getIsFormattedOnly	astyle_main.h	/^		bool getIsFormattedOnly() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getIsLineReady	ASFormatter.cpp	/^bool ASFormatter::getIsLineReady() const$/;"	f	class:astyle::ASFormatter	signature:() const
getIsLineReady	astyle.h	/^		bool getIsLineReady() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
getIsQuiet	astyle_main.cpp	/^bool ASConsole::getIsQuiet() const$/;"	f	class:astyle::ASConsole	signature:() const
getIsQuiet	astyle_main.h	/^		bool getIsQuiet() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getIsRecursive	astyle_main.cpp	/^bool ASConsole::getIsRecursive() const$/;"	f	class:astyle::ASConsole	signature:() const
getIsRecursive	astyle_main.h	/^		bool getIsRecursive() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getIsVerbose	astyle_main.cpp	/^bool ASConsole::getIsVerbose() const$/;"	f	class:astyle::ASConsole	signature:() const
getIsVerbose	astyle_main.h	/^		bool getIsVerbose() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getLanguageID	ASLocalizer.cpp	/^string ASLocalizer::getLanguageID() const$/;"	f	class:astyle::ASLocalizer	signature:() const
getLanguageID	ASLocalizer.h	/^		string getLanguageID() const;$/;"	p	class:astyle::ASLocalizer	access:public	signature:() const
getLanguageID	astyle_main.cpp	/^string ASConsole::getLanguageID() const$/;"	f	class:astyle::ASConsole	signature:() const
getLanguageID	astyle_main.h	/^		string getLanguageID() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getLineEndChange	astyle_main.cpp	/^bool ASStreamIterator<T>::getLineEndChange(int lineEndFormat) const$/;"	f	class:astyle::ASStreamIterator	signature:(int lineEndFormat) const
getLineEndChange	astyle_main.h	/^		bool getLineEndChange(int lineEndFormat) const;$/;"	p	class:astyle::ASStreamIterator	access:public	signature:(int lineEndFormat) const
getLineEndFormat	ASFormatter.cpp	/^LineEndFormat ASFormatter::getLineEndFormat() const$/;"	f	class:astyle::ASFormatter	signature:() const
getLineEndFormat	astyle.h	/^		LineEndFormat getLineEndFormat() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
getLineEndsMixed	astyle_main.cpp	/^bool ASConsole::getLineEndsMixed() const$/;"	f	class:astyle::ASConsole	signature:() const
getLineEndsMixed	astyle_main.h	/^		bool getLineEndsMixed() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getModeManuallySet	ASBeautifier.cpp	/^bool ASBeautifier::getModeManuallySet() const$/;"	f	class:astyle::ASBeautifier	signature:() const
getModeManuallySet	astyle.h	/^		bool getModeManuallySet(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getModifierIndent	ASBeautifier.cpp	/^bool ASBeautifier::getModifierIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getModifierIndent	astyle.h	/^		bool getModifierIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getNamespaceIndent	ASBeautifier.cpp	/^bool ASBeautifier::getNamespaceIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getNamespaceIndent	astyle.h	/^		bool getNamespaceIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getNextChar	ASFormatter.cpp	/^bool ASFormatter::getNextChar()$/;"	f	class:astyle::ASFormatter	signature:()
getNextChar	astyle.h	/^		bool getNextChar();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
getNextLine	ASFormatter.cpp	/^bool ASFormatter::getNextLine(bool emptyLineWasDeleted \/*false*\/)$/;"	f	class:astyle::ASFormatter	signature:(bool emptyLineWasDeleted )
getNextLine	astyle.h	/^		bool getNextLine(bool emptyLineWasDeleted = false);$/;"	p	class:astyle::ASFormatter	access:private	signature:(bool emptyLineWasDeleted = false)
getNextLineCommentAdjustment	ASFormatter.cpp	/^int ASFormatter::getNextLineCommentAdjustment()$/;"	f	class:astyle::ASFormatter	signature:()
getNextLineCommentAdjustment	astyle.h	/^		int  getNextLineCommentAdjustment();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
getNextProgramCharDistance	ASBeautifier.cpp	/^int ASBeautifier::getNextProgramCharDistance(const string &line, int i) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i) const
getNextProgramCharDistance	astyle.h	/^		int  getNextProgramCharDistance(const string &line, int i) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &line, int i) const
getNextWord	ASBeautifier.cpp	/^string ASBeautifier::getNextWord(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, size_t currPos) const
getNextWord	astyle.h	/^		string getNextWord(const string &line, size_t currPos) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(const string &line, size_t currPos) const
getNoBackup	astyle_main.cpp	/^bool ASConsole::getNoBackup() const$/;"	f	class:astyle::ASConsole	signature:() const
getNoBackup	astyle_main.h	/^		bool getNoBackup() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, const char* groupingArg, const char* separator) const$/;"	f	class:astyle::ASConsole	signature:(int num, const char* groupingArg, const char* separator) const
getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, size_t lcid) const$/;"	f	class:astyle::ASConsole	signature:(int num, size_t lcid) const
getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, size_t) const$/;"	f	class:astyle::ASConsole	signature:(int num, size_t) const
getNumberFormat	astyle_main.h	/^		string getNumberFormat(int num, const char* groupingArg, const char* separator) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(int num, const char* groupingArg, const char* separator) const
getNumberFormat	astyle_main.h	/^		string getNumberFormat(int num, size_t = 0) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(int num, size_t = 0) const
getOptionErrors	astyle_main.cpp	/^string ASOptions::getOptionErrors() const$/;"	f	class:astyle::ASOptions	signature:() const
getOptionErrors	astyle_main.h	/^		string getOptionErrors() const;$/;"	p	class:astyle::ASOptions	access:public	signature:() const
getOptionsFileName	astyle_main.cpp	/^string ASConsole::getOptionsFileName() const$/;"	f	class:astyle::ASConsole	signature:() const
getOptionsFileName	astyle_main.h	/^		string getOptionsFileName() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getOptionsVector	astyle_main.cpp	/^vector<string> ASConsole::getOptionsVector() const$/;"	f	class:astyle::ASConsole	signature:() const
getOptionsVector	astyle_main.h	/^		vector<string> getOptionsVector() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getOrigSuffix	astyle_main.cpp	/^string ASConsole::getOrigSuffix() const$/;"	f	class:astyle::ASConsole	signature:() const
getOrigSuffix	astyle_main.h	/^		string getOrigSuffix() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getOutputEOL	astyle_main.h	/^		const char* getOutputEOL() const { return outputEOL; }$/;"	f	class:astyle::ASStreamIterator	access:public	signature:() const
getParam	astyle_main.cpp	/^string ASConsole::getParam(const string &arg, const char* op)$/;"	f	class:astyle::ASConsole	signature:(const string &arg, const char* op)
getParam	astyle_main.cpp	/^string ASOptions::getParam(const string &arg, const char* op)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* op)
getParam	astyle_main.cpp	/^string ASOptions::getParam(const string &arg, const char* op1, const char* op2)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* op1, const char* op2)
getParam	astyle_main.h	/^		string getParam(const string &arg, const char* op);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &arg, const char* op)
getParam	astyle_main.h	/^		string getParam(const string &arg, const char* op);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* op)
getParam	astyle_main.h	/^		string getParam(const string &arg, const char* op1, const char* op2);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* op1, const char* op2)
getPreprocDefineIndent	ASBeautifier.cpp	/^bool ASBeautifier::getPreprocDefineIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getPreprocDefineIndent	astyle.h	/^		bool getPreprocDefineIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getPreserveDate	astyle_main.cpp	/^bool ASConsole::getPreserveDate() const$/;"	f	class:astyle::ASConsole	signature:() const
getPreserveDate	astyle_main.h	/^		bool getPreserveDate() const;$/;"	p	class:astyle::ASConsole	access:public	signature:() const
getPreviousWord	ASFormatter.cpp	/^string ASFormatter::getPreviousWord(const string &line, int currPos) const$/;"	f	class:astyle::ASFormatter	signature:(const string &line, int currPos) const
getPreviousWord	astyle.h	/^		string getPreviousWord(const string &line, int currPos) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &line, int currPos) const
getStreamLength	astyle.h	/^		virtual int getStreamLength() const = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:() const
getStreamLength	astyle_main.cpp	/^int ASStreamIterator<T>::getStreamLength() const$/;"	f	class:astyle::ASStreamIterator	signature:() const
getStreamLength	astyle_main.h	/^		int  getStreamLength() const;$/;"	p	class:astyle::ASStreamIterator	access:public	signature:() const
getSwitchIndent	ASBeautifier.cpp	/^bool ASBeautifier::getSwitchIndent(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getSwitchIndent	astyle.h	/^		bool getSwitchIndent(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getTabLength	ASBeautifier.cpp	/^int ASBeautifier::getTabLength(void) const$/;"	f	class:astyle::ASBeautifier	signature:(void) const
getTabLength	astyle.h	/^		int  getTabLength(void) const;$/;"	p	class:astyle::ASBeautifier	access:public	signature:(void) const
getTranslationClass	ASLocalizer.cpp	/^const Translation* ASLocalizer::getTranslationClass() const$/;"	f	class:astyle::ASLocalizer	signature:() const
getTranslationClass	ASLocalizer.h	/^		const Translation* getTranslationClass() const;$/;"	p	class:astyle::ASLocalizer	access:public	signature:() const
getTranslationVectorSize	ASLocalizer.cpp	/^size_t Translation::getTranslationVectorSize() const$/;"	f	class:astyle::Translation	signature:() const
getTranslationVectorSize	ASLocalizer.h	/^		size_t getTranslationVectorSize() const;$/;"	p	class:astyle::Translation	access:public	signature:() const
getWideTranslation	ASLocalizer.cpp	/^bool Translation::getWideTranslation(const string &stringIn, wstring &wideOut) const$/;"	f	class:astyle::Translation	signature:(const string &stringIn, wstring &wideOut) const
getWideTranslation	ASLocalizer.h	/^		bool getWideTranslation(const string &stringIn, wstring &wideOut) const;$/;"	p	class:astyle::Translation	access:public	signature:(const string &stringIn, wstring &wideOut) const
goForward	ASFormatter.cpp	/^void ASFormatter::goForward(int i)$/;"	f	class:astyle::ASFormatter	signature:(int i)
goForward	astyle.h	/^		void goForward(int i);$/;"	p	class:astyle::ASFormatter	access:private	signature:(int i)
hasMoreLines	ASFormatter.cpp	/^bool ASFormatter::hasMoreLines() const$/;"	f	class:astyle::ASFormatter	signature:() const
hasMoreLines	astyle.h	/^		virtual bool hasMoreLines() const = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:() const
hasMoreLines	astyle.h	/^		virtual bool hasMoreLines() const;$/;"	p	class:astyle::ASFormatter	access:public	signature:() const
hasMoreLines	astyle_main.h	/^		bool hasMoreLines() const { return !inStream->eof(); }$/;"	f	class:astyle::ASStreamIterator	access:public	signature:() const
hasWildcard	astyle_main.h	/^		bool hasWildcard;                   \/\/ file name includes a wildcard$/;"	m	class:astyle::ASConsole	access:private
haveLineContinuationChar	astyle.h	/^		bool haveLineContinuationChar;$/;"	m	class:astyle::ASBeautifier	access:private
haveLineContinuationChar	astyle.h	/^		bool haveLineContinuationChar;$/;"	m	class:astyle::ASFormatter	access:private
headerStack	astyle.h	/^		vector<const string*>* headerStack;$/;"	m	class:astyle::ASBeautifier	access:private
headers	astyle.h	/^		vector<const string*>* headers;$/;"	m	class:astyle::ASBeautifier	access:private
headers	astyle.h	/^		vector<const string*>* headers;$/;"	m	class:astyle::ASFormatter	access:private
horstmannIndentChars	astyle.h	/^		int  horstmannIndentChars;$/;"	m	class:astyle::ASFormatter	access:private
horstmannIndentInStatement	astyle.h	/^		int  horstmannIndentInStatement;$/;"	m	class:astyle::ASBeautifier	access:protected
ignoreExcludeErrors	astyle_main.h	/^		bool ignoreExcludeErrors;           \/\/ don't abort on unmatched excludes$/;"	m	class:astyle::ASConsole	access:private
ignoreExcludeErrorsDisplay	astyle_main.h	/^		bool ignoreExcludeErrorsDisplay;    \/\/ don't display unmatched excludes$/;"	m	class:astyle::ASConsole	access:private
importOptions	astyle_main.cpp	/^void ASOptions::importOptions(istream &in, vector<string> &optionsVector)$/;"	f	class:astyle::ASOptions	signature:(istream &in, vector<string> &optionsVector)
importOptions	astyle_main.h	/^		void importOptions(istream &in, vector<string> &optionsVector);$/;"	p	class:astyle::ASOptions	access:public	signature:(istream &in, vector<string> &optionsVector)
inLineNumber	astyle.h	/^		int  inLineNumber;$/;"	m	class:astyle::ASBeautifier	access:protected
inStatementIndentStack	astyle.h	/^		vector<int>* inStatementIndentStack;$/;"	m	class:astyle::ASBeautifier	access:private
inStatementIndentStackSizeStack	astyle.h	/^		vector<int>* inStatementIndentStackSizeStack;$/;"	m	class:astyle::ASBeautifier	access:private
inStream	astyle_main.h	/^		T* inStream;            \/\/ pointer to the input stream$/;"	m	class:astyle::ASStreamIterator	access:private
indentCount	astyle.h	/^		int  indentCount;$/;"	m	class:astyle::ASBeautifier	access:private
indentLength	astyle.h	/^		int  indentLength;$/;"	m	class:astyle::ASBeautifier	access:private
indentLength	astyle.h	/^		int  indentLength;$/;"	m	class:astyle::ASEnhancer	access:private
indentLine	ASEnhancer.cpp	/^int ASEnhancer::indentLine(string &line, int indent) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, int indent) const
indentLine	astyle.h	/^		int     indentLine(string  &line, int indent) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, int indent) const
indentString	astyle.h	/^		string indentString;$/;"	m	class:astyle::ASBeautifier	access:private
indentableHeaders	astyle.h	/^		vector<const string*>* indentableHeaders;$/;"	m	class:astyle::ASBeautifier	access:private
indentableMacros	astyle.h	/^		vector<const pair<const string, const string>* >* indentableMacros;	\/\/ for ASEnhancer$/;"	m	class:astyle::ASFormatter	access:private
indentableMacros	astyle.h	/^		vector<const pair<const string, const string>* >* indentableMacros;$/;"	m	class:astyle::ASEnhancer	access:private
indexOf	ASBeautifier.cpp	/^int ASBeautifier::indexOf(vector<const string*> &container, const string* element) const$/;"	f	class:astyle::ASBeautifier	signature:(vector<const string*> &container, const string* element) const
indexOf	astyle.h	/^		int  indexOf(vector<const string*> &container, const string* element) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(vector<const string*> &container, const string* element) const
init	ASBeautifier.cpp	/^void ASBeautifier::init(ASSourceIterator* iter)$/;"	f	class:astyle::ASBeautifier	signature:(ASSourceIterator* iter)
init	ASEnhancer.cpp	/^void ASEnhancer::init(int  _fileType,$/;"	f	class:astyle::ASEnhancer	signature:(int _fileType, int _indentLength, int _tabLength, bool _useTabs, bool _forceTab, bool _namespaceIndent, bool _caseIndent, bool _preprocBlockIndent, bool _preprocDefineIndent, bool _emptyLineFill, vector<const pair<const string, const string>* >* _indentableMacros)
init	ASFormatter.cpp	/^void ASFormatter::init(ASSourceIterator* si)$/;"	f	class:astyle::ASFormatter	signature:(ASSourceIterator* si)
init	astyle.h	/^		virtual void init(ASSourceIterator* iter);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(ASSourceIterator* iter)
init	astyle.h	/^		virtual void init(ASSourceIterator* iter);$/;"	p	class:astyle::ASFormatter	access:public	signature:(ASSourceIterator* iter)
init	astyle.h	/^		void init(int fileTypeArg) { baseFileType = fileTypeArg; }$/;"	f	class:astyle::ASBase	access:protected	signature:(int fileTypeArg)
init	astyle.h	/^		void init(int, int, int, bool, bool, bool, bool, bool, bool, bool,$/;"	p	class:astyle::ASEnhancer	access:public	signature:(int, int, int, bool, bool, bool, bool, bool, bool, bool, vector<const pair<const string, const string>* >*)
initContainer	ASBeautifier.cpp	/^void ASBeautifier::initContainer(T &container, T value)$/;"	f	class:astyle::ASBeautifier	signature:(T &container, T value)
initContainer	ASFormatter.cpp	/^void ASFormatter::initContainer(T &container, T value)$/;"	f	class:astyle::ASFormatter	signature:(T &container, T value)
initContainer	ASFormatter.cpp	/^void ASFormatter::initContainer(vector<BracketType>* &container, vector<BracketType>* value)$/;"	f	class:astyle::ASFormatter	signature:(vector<BracketType>* &container, vector<BracketType>* value)
initContainer	astyle.h	/^		template<typename T> void initContainer(T &container, T value);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(T &container, T value)
initContainer	astyle.h	/^		template<typename T> void initContainer(T &container, T value);$/;"	p	class:astyle::ASFormatter	access:private	signature:(T &container, T value)
initContainer	astyle.h	/^		void initContainer(vector<BracketType>* &container, vector<BracketType>* value);$/;"	p	class:astyle::ASFormatter	access:private	signature:(vector<BracketType>* &container, vector<BracketType>* value)
initNewLine	ASFormatter.cpp	/^void ASFormatter::initNewLine()$/;"	f	class:astyle::ASFormatter	signature:()
initNewLine	astyle.h	/^		void initNewLine();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
initTempStacksContainer	ASBeautifier.cpp	/^void ASBeautifier::initTempStacksContainer(vector<vector<const string*>*>* &container,$/;"	f	class:astyle::ASBeautifier	signature:(vector<vector<const string*>*>* &container, vector<vector<const string*>*>* value)
initTempStacksContainer	astyle.h	/^		void initTempStacksContainer(vector<vector<const string*>*>* &container,$/;"	p	class:astyle::ASBeautifier	access:private	signature:(vector<vector<const string*>*>* &container, vector<vector<const string*>*>* value)
initVectors	ASBeautifier.cpp	/^void ASBeautifier::initVectors()$/;"	f	class:astyle::ASBeautifier	signature:()
initVectors	astyle.h	/^		void initVectors();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
initializeOutputEOL	astyle_main.cpp	/^void ASConsole::initializeOutputEOL(LineEndFormat lineEndFormat)$/;"	f	class:astyle::ASConsole	signature:(LineEndFormat lineEndFormat)
initializeOutputEOL	astyle_main.h	/^		void initializeOutputEOL(LineEndFormat lineEndFormat);$/;"	p	class:astyle::ASConsole	access:private	signature:(LineEndFormat lineEndFormat)
isAppendPostBlockEmptyLineRequested	astyle.h	/^		bool isAppendPostBlockEmptyLineRequested;$/;"	m	class:astyle::ASFormatter	access:private
isArrayOperator	ASFormatter.cpp	/^bool ASFormatter::isArrayOperator() const$/;"	f	class:astyle::ASFormatter	signature:() const
isArrayOperator	astyle.h	/^		bool isArrayOperator() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isBeforeAnyComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeAnyComment() const$/;"	f	class:astyle::ASFormatter	signature:() const
isBeforeAnyComment	astyle.h	/^		bool isBeforeAnyComment() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isBeforeAnyLineEndComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeAnyLineEndComment(int startPos) const$/;"	f	class:astyle::ASFormatter	signature:(int startPos) const
isBeforeAnyLineEndComment	astyle.h	/^		bool isBeforeAnyLineEndComment(int startPos) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(int startPos) const
isBeforeComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeComment() const$/;"	f	class:astyle::ASFormatter	signature:() const
isBeforeComment	astyle.h	/^		bool isBeforeComment() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isBeforeMultipleLineEndComments	ASFormatter.cpp	/^bool ASFormatter::isBeforeMultipleLineEndComments(int startPos) const$/;"	f	class:astyle::ASFormatter	signature:(int startPos) const
isBeforeMultipleLineEndComments	astyle.h	/^		bool isBeforeMultipleLineEndComments(int startPos) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(int startPos) const
isBeginDeclareSectionSQL	ASEnhancer.cpp	/^bool ASEnhancer::isBeginDeclareSectionSQL(string &line, size_t index) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, size_t index) const
isBeginDeclareSectionSQL	astyle.h	/^		bool    isBeginDeclareSectionSQL(string  &line, size_t index) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, size_t index) const
isBracketType	ASFormatter.cpp	/^bool ASFormatter::isBracketType(BracketType a, BracketType b) const$/;"	f	class:astyle::ASFormatter	signature:(BracketType a, BracketType b) const
isBracketType	astyle.h	/^		bool isBracketType(BracketType a, BracketType b) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType a, BracketType b) const
isCStyle	astyle.h	/^		bool isCStyle() const { return (baseFileType == C_TYPE); }$/;"	f	class:astyle::ASBase	access:protected	signature:() const
isCaseHeaderCommentIndent	astyle.h	/^		bool isCaseHeaderCommentIndent;$/;"	m	class:astyle::ASBeautifier	access:protected
isCharImmediatelyPostCloseBlock	astyle.h	/^		bool isCharImmediatelyPostCloseBlock;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostComment	astyle.h	/^		bool isCharImmediatelyPostComment;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostLineComment	astyle.h	/^		bool isCharImmediatelyPostLineComment;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostNonInStmt	astyle.h	/^		bool isCharImmediatelyPostNonInStmt;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostOpenBlock	astyle.h	/^		bool isCharImmediatelyPostOpenBlock;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostOperator	astyle.h	/^		bool isCharImmediatelyPostOperator;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostPointerOrReference	astyle.h	/^		bool isCharImmediatelyPostPointerOrReference;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostReturn	astyle.h	/^		bool isCharImmediatelyPostReturn;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostTemplate	astyle.h	/^		bool isCharImmediatelyPostTemplate;$/;"	m	class:astyle::ASFormatter	access:private
isCharImmediatelyPostThrow	astyle.h	/^		bool isCharImmediatelyPostThrow;$/;"	m	class:astyle::ASFormatter	access:private
isCharPotentialHeader	astyle.h	/^		bool isCharPotentialHeader(const string &line, size_t i) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(const string &line, size_t i) const
isCharPotentialOperator	astyle.h	/^		bool isCharPotentialOperator(char ch) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(char ch) const
isClassInitializer	ASFormatter.cpp	/^bool ASFormatter::isClassInitializer() const$/;"	f	class:astyle::ASFormatter	signature:() const
isClassInitializer	astyle.h	/^		bool isClassInitializer() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isClosingHeader	ASFormatter.cpp	/^bool ASFormatter::isClosingHeader(const string* header) const$/;"	f	class:astyle::ASFormatter	signature:(const string* header) const
isClosingHeader	astyle.h	/^		bool isClosingHeader(const string* header) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string* header) const
isCurrentBracketBroken	ASFormatter.cpp	/^bool ASFormatter::isCurrentBracketBroken() const$/;"	f	class:astyle::ASFormatter	signature:() const
isCurrentBracketBroken	astyle.h	/^		bool isCurrentBracketBroken() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isDereferenceOrAddressOf	ASFormatter.cpp	/^bool ASFormatter::isDereferenceOrAddressOf() const$/;"	f	class:astyle::ASFormatter	signature:() const
isDereferenceOrAddressOf	astyle.h	/^		bool isDereferenceOrAddressOf() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isDigit	astyle.h	/^		bool isDigit(char ch) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(char ch) const
isDryRun	astyle_main.h	/^		bool isDryRun;                      \/\/ dry-run option$/;"	m	class:astyle::ASConsole	access:private
isElseHeaderIndent	astyle.h	/^		bool isElseHeaderIndent;$/;"	m	class:astyle::ASBeautifier	access:protected
isEmptyLine	ASFormatter.cpp	/^bool ASFormatter::isEmptyLine(const string &line) const$/;"	f	class:astyle::ASFormatter	signature:(const string &line) const
isEmptyLine	astyle.h	/^		bool isEmptyLine(const string &line) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &line) const
isEndDeclareSectionSQL	ASEnhancer.cpp	/^bool ASEnhancer::isEndDeclareSectionSQL(string &line, size_t index) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, size_t index) const
isEndDeclareSectionSQL	astyle.h	/^		bool    isEndDeclareSectionSQL(string  &line, size_t index) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, size_t index) const
isExecSQL	ASFormatter.cpp	/^bool ASFormatter::isExecSQL(string  &line, size_t index) const$/;"	f	class:astyle::ASFormatter	signature:(string &line, size_t index) const
isExecSQL	astyle.h	/^		bool isExecSQL(string &line, size_t index) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &line, size_t index) const
isExternC	ASFormatter.cpp	/^bool ASFormatter::isExternC() const$/;"	f	class:astyle::ASFormatter	signature:() const
isExternC	astyle.h	/^		bool isExternC() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isFirstPreprocConditional	astyle.h	/^		bool isFirstPreprocConditional;$/;"	m	class:astyle::ASFormatter	access:private
isFormattedOnly	astyle_main.h	/^		bool isFormattedOnly;               \/\/ formatted lines only option$/;"	m	class:astyle::ASConsole	access:private
isFormattingModeOff	astyle.h	/^		bool isFormattingModeOff;$/;"	m	class:astyle::ASFormatter	access:private
isHeaderInMultiStatementLine	astyle.h	/^		bool isHeaderInMultiStatementLine;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostCast	ASFormatter.cpp	/^bool ASFormatter::isImmediatelyPostCast() const$/;"	f	class:astyle::ASFormatter	signature:() const
isImmediatelyPostCast	astyle.h	/^		bool isImmediatelyPostCast() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isImmediatelyPostComment	astyle.h	/^		bool isImmediatelyPostComment;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostCommentOnly	astyle.h	/^		bool isImmediatelyPostCommentOnly;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostEmptyBlock	astyle.h	/^		bool isImmediatelyPostEmptyBlock;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostEmptyLine	astyle.h	/^		bool isImmediatelyPostEmptyLine;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostHeader	astyle.h	/^		bool isImmediatelyPostHeader;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostLineComment	astyle.h	/^		bool isImmediatelyPostLineComment;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostNonInStmt	astyle.h	/^		bool isImmediatelyPostNonInStmt;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostObjCMethodDefinition	astyle.h	/^		bool isImmediatelyPostObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
isImmediatelyPostOperator	astyle.h	/^		bool isImmediatelyPostOperator;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostPointerOrReference	astyle.h	/^		bool isImmediatelyPostPointerOrReference;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostPreprocessor	astyle.h	/^		bool isImmediatelyPostPreprocessor;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostReturn	astyle.h	/^		bool isImmediatelyPostReturn;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostTemplate	astyle.h	/^		bool isImmediatelyPostTemplate;$/;"	m	class:astyle::ASFormatter	access:private
isImmediatelyPostThrow	astyle.h	/^		bool isImmediatelyPostThrow;$/;"	m	class:astyle::ASFormatter	access:private
isInAsm	astyle.h	/^		bool isInAsm;$/;"	m	class:astyle::ASBeautifier	access:private
isInAsm	astyle.h	/^		bool isInAsm;$/;"	m	class:astyle::ASFormatter	access:private
isInAsmBlock	astyle.h	/^		bool isInAsmBlock;$/;"	m	class:astyle::ASBeautifier	access:private
isInAsmBlock	astyle.h	/^		bool isInAsmBlock;$/;"	m	class:astyle::ASFormatter	access:private
isInAsmOneLine	astyle.h	/^		bool isInAsmOneLine;$/;"	m	class:astyle::ASBeautifier	access:private
isInAsmOneLine	astyle.h	/^		bool isInAsmOneLine;$/;"	m	class:astyle::ASFormatter	access:private
isInBeautifySQL	astyle.h	/^		bool isInBeautifySQL;$/;"	m	class:astyle::ASBeautifier	access:protected
isInCase	astyle.h	/^		bool isInCase;$/;"	m	class:astyle::ASBeautifier	access:private
isInCase	astyle.h	/^		bool isInCase;$/;"	m	class:astyle::ASFormatter	access:private
isInClass	astyle.h	/^		bool isInClass;					\/\/ is in a class after the opening bracket$/;"	m	class:astyle::ASBeautifier	access:private
isInClassHeader	astyle.h	/^		bool isInClassHeader;			\/\/ is in a class before the opening bracket$/;"	m	class:astyle::ASBeautifier	access:private
isInClassHeaderTab	astyle.h	/^		bool isInClassHeaderTab;		\/\/ is in an indentable class header line$/;"	m	class:astyle::ASBeautifier	access:private
isInClassInitializer	astyle.h	/^		bool isInClassInitializer;		\/\/ is in a class after the ':' initializer$/;"	m	class:astyle::ASBeautifier	access:private
isInClassInitializer	astyle.h	/^		bool isInClassInitializer;$/;"	m	class:astyle::ASFormatter	access:private
isInComment	astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASBeautifier	access:private
isInComment	astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASEnhancer	access:private
isInComment	astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASFormatter	access:private
isInCommentStartLine	astyle.h	/^		bool isInCommentStartLine;$/;"	m	class:astyle::ASFormatter	access:private
isInConditional	astyle.h	/^		bool isInConditional;$/;"	m	class:astyle::ASBeautifier	access:private
isInDeclareSection	astyle.h	/^		bool isInDeclareSection;                \/\/ need to indent a declare section$/;"	m	class:astyle::ASEnhancer	access:private
isInDefine	astyle.h	/^		bool isInDefine;$/;"	m	class:astyle::ASBeautifier	access:private
isInDefineDefinition	astyle.h	/^		bool isInDefineDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
isInEnum	astyle.h	/^		bool isInEnum;$/;"	m	class:astyle::ASBeautifier	access:private
isInEnum	astyle.h	/^		bool isInEnum;$/;"	m	class:astyle::ASFormatter	access:private
isInEnumTypeID	astyle.h	/^		bool isInEnumTypeID;$/;"	m	class:astyle::ASBeautifier	access:private
isInEventTable	astyle.h	/^		bool isInEventTable;                    \/\/ need to indent an event table$/;"	m	class:astyle::ASEnhancer	access:private
isInExecSQL	astyle.h	/^		bool isInExecSQL;$/;"	m	class:astyle::ASFormatter	access:private
isInExponent	ASFormatter.cpp	/^bool ASFormatter::isInExponent() const$/;"	f	class:astyle::ASFormatter	signature:() const
isInExponent	astyle.h	/^		bool isInExponent() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isInExternC	astyle.h	/^		bool isInExternC;$/;"	m	class:astyle::ASBeautifier	access:protected
isInHeader	astyle.h	/^		bool isInHeader;$/;"	m	class:astyle::ASBeautifier	access:private
isInHeader	astyle.h	/^		bool isInHeader;$/;"	m	class:astyle::ASFormatter	access:private
isInHorstmannComment	astyle.h	/^		bool isInHorstmannComment;$/;"	m	class:astyle::ASBeautifier	access:private
isInHorstmannRunIn	astyle.h	/^		bool isInHorstmannRunIn;$/;"	m	class:astyle::ASFormatter	access:private
isInIndentablePreproc	astyle.h	/^		bool isInIndentablePreproc;$/;"	m	class:astyle::ASBeautifier	access:protected
isInIndentablePreprocBlock	astyle.h	/^		bool isInIndentablePreprocBlock;$/;"	m	class:astyle::ASBeautifier	access:private
isInIndentableStruct	astyle.h	/^		bool isInIndentableStruct;$/;"	m	class:astyle::ASBeautifier	access:protected
isInLet	astyle.h	/^		bool isInLet;$/;"	m	class:astyle::ASBeautifier	access:private
isInLineBreak	astyle.h	/^		bool isInLineBreak;$/;"	m	class:astyle::ASFormatter	access:private
isInLineComment	astyle.h	/^		bool isInLineComment;$/;"	m	class:astyle::ASFormatter	access:private
isInObjCInterface	astyle.h	/^		bool isInObjCInterface;$/;"	m	class:astyle::ASBeautifier	access:private
isInObjCInterface	astyle.h	/^		bool isInObjCInterface;$/;"	m	class:astyle::ASFormatter	access:private
isInObjCMethodDefinition	astyle.h	/^		bool isInObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
isInObjCMethodDefinition	astyle.h	/^		bool isInObjCMethodDefinition;$/;"	m	class:astyle::ASFormatter	access:private
isInObjCSelector	astyle.h	/^		bool isInObjCSelector;$/;"	m	class:astyle::ASFormatter	access:private
isInPotentialCalculation	astyle.h	/^		bool isInPotentialCalculation;$/;"	m	class:astyle::ASFormatter	access:private
isInPreprocessor	astyle.h	/^		bool isInPreprocessor;$/;"	m	class:astyle::ASFormatter	access:private
isInPreprocessorBeautify	astyle.h	/^		bool isInPreprocessorBeautify;$/;"	m	class:astyle::ASFormatter	access:private
isInPreprocessorComment	astyle.h	/^		bool isInPreprocessorComment;$/;"	m	class:astyle::ASBeautifier	access:private
isInPreprocessorUnterminatedComment	ASBeautifier.cpp	/^bool ASBeautifier::isInPreprocessorUnterminatedComment(const string &line)$/;"	f	class:astyle::ASBeautifier	signature:(const string &line)
isInPreprocessorUnterminatedComment	astyle.h	/^		bool isInPreprocessorUnterminatedComment(const string &line);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line)
isInQuestion	astyle.h	/^		bool isInQuestion;$/;"	m	class:astyle::ASBeautifier	access:private
isInQuote	astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASBeautifier	access:private
isInQuote	astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASEnhancer	access:private
isInQuote	astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASFormatter	access:private
isInQuoteContinuation	astyle.h	/^		bool isInQuoteContinuation;$/;"	m	class:astyle::ASFormatter	access:private
isInStatement	astyle.h	/^		bool isInStatement;$/;"	m	class:astyle::ASBeautifier	access:private
isInSwitch	astyle.h	/^		bool isInSwitch;$/;"	m	class:astyle::ASBeautifier	access:private
isInSwitchStatement	ASFormatter.cpp	/^bool ASFormatter::isInSwitchStatement() const$/;"	f	class:astyle::ASFormatter	signature:() const
isInSwitchStatement	astyle.h	/^		bool isInSwitchStatement() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isInTemplate	astyle.h	/^		bool isInTemplate;$/;"	m	class:astyle::ASBeautifier	access:private
isInTemplate	astyle.h	/^		bool isInTemplate;$/;"	m	class:astyle::ASFormatter	access:private
isInVerbatimQuote	astyle.h	/^		bool isInVerbatimQuote;$/;"	m	class:astyle::ASBeautifier	access:private
isInVerbatimQuote	astyle.h	/^		bool isInVerbatimQuote;$/;"	m	class:astyle::ASFormatter	access:private
isIndentModeOff	astyle.h	/^		bool isIndentModeOff;$/;"	m	class:astyle::ASBeautifier	access:private
isIndentablePreprocessorBlock	ASFormatter.cpp	/^bool ASFormatter::isIndentablePreprocessorBlock(string &firstLine, size_t index)$/;"	f	class:astyle::ASFormatter	signature:(string &firstLine, size_t index)
isIndentablePreprocessorBlock	astyle.h	/^		bool isIndentablePreprocessorBlock(string &firstLine, size_t index);$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &firstLine, size_t index)
isIndentableProprocessor	astyle.h	/^		bool isIndentableProprocessor;$/;"	m	class:astyle::ASFormatter	access:private
isIndentableProprocessorBlock	astyle.h	/^		bool isIndentableProprocessorBlock;$/;"	m	class:astyle::ASFormatter	access:private
isIndentedPreprocessor	ASBeautifier.cpp	/^bool ASBeautifier::isIndentedPreprocessor(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, size_t currPos) const
isIndentedPreprocessor	astyle.h	/^		bool isIndentedPreprocessor(const string &line, size_t currPos) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, size_t currPos) const
isJavaStaticConstructor	astyle.h	/^		bool isJavaStaticConstructor;$/;"	m	class:astyle::ASFormatter	access:private
isJavaStyle	astyle.h	/^		bool isJavaStyle() const { return (baseFileType == JAVA_TYPE); }$/;"	f	class:astyle::ASBase	access:protected	signature:() const
isLegalNameChar	astyle.h	/^		bool isLegalNameChar(char ch) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(char ch) const
isLineBreakBeforeClosingHeader	ASFormatter.cpp	/^void ASFormatter::isLineBreakBeforeClosingHeader()$/;"	f	class:astyle::ASFormatter	signature:()
isLineBreakBeforeClosingHeader	astyle.h	/^		void isLineBreakBeforeClosingHeader();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
isLineEndComment	ASBeautifier.cpp	/^bool ASBeautifier::isLineEndComment(const string &line, int startPos) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int startPos) const
isLineEndComment	astyle.h	/^		bool isLineEndComment(const string &line, int startPos) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, int startPos) const
isLineReady	astyle.h	/^		bool isLineReady;$/;"	m	class:astyle::ASFormatter	access:private
isModeManuallySet	astyle.h	/^		bool isModeManuallySet;$/;"	m	class:astyle::ASBeautifier	access:private
isNextCharOpeningBracket	ASFormatter.cpp	/^bool ASFormatter::isNextCharOpeningBracket(int startChar) const$/;"	f	class:astyle::ASFormatter	signature:(int startChar) const
isNextCharOpeningBracket	astyle.h	/^		bool isNextCharOpeningBracket(int startChar) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(int startChar) const
isNextWordSharpNonParenHeader	ASFormatter.cpp	/^bool ASFormatter::isNextWordSharpNonParenHeader(int startChar) const$/;"	f	class:astyle::ASFormatter	signature:(int startChar) const
isNextWordSharpNonParenHeader	astyle.h	/^		bool isNextWordSharpNonParenHeader(int startChar) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(int startChar) const
isNonInStatementArray	astyle.h	/^		bool isNonInStatementArray;$/;"	m	class:astyle::ASBeautifier	access:protected
isNonInStatementArrayBracket	ASFormatter.cpp	/^bool ASFormatter::isNonInStatementArrayBracket() const$/;"	f	class:astyle::ASFormatter	signature:() const
isNonInStatementArrayBracket	astyle.h	/^		bool isNonInStatementArrayBracket() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isNonParenHeader	astyle.h	/^		bool isNonParenHeader;$/;"	m	class:astyle::ASFormatter	access:private
isOkToBreakBlock	ASFormatter.cpp	/^bool ASFormatter::isOkToBreakBlock(BracketType bracketType) const$/;"	f	class:astyle::ASFormatter	signature:(BracketType bracketType) const
isOkToBreakBlock	astyle.h	/^		bool isOkToBreakBlock(BracketType bracketType) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(BracketType bracketType) const
isOkToSplitFormattedLine	ASFormatter.cpp	/^bool ASFormatter::isOkToSplitFormattedLine()$/;"	f	class:astyle::ASFormatter	signature:()
isOkToSplitFormattedLine	astyle.h	/^		bool isOkToSplitFormattedLine();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
isOneLineBlockReached	ASEnhancer.cpp	/^bool ASEnhancer::isOneLineBlockReached(string &line, int startChar) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, int startChar) const
isOneLineBlockReached	ASFormatter.cpp	/^int ASFormatter::isOneLineBlockReached(string &line, int startChar) const$/;"	f	class:astyle::ASFormatter	signature:(string &line, int startChar) const
isOneLineBlockReached	astyle.h	/^		bool    isOneLineBlockReached(string &line, int startChar) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, int startChar) const
isOneLineBlockReached	astyle.h	/^		int  isOneLineBlockReached(string &line, int startChar) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &line, int startChar) const
isOperatorPaddingDisabled	ASFormatter.cpp	/^bool ASFormatter::isOperatorPaddingDisabled() const$/;"	f	class:astyle::ASFormatter	signature:() const
isOperatorPaddingDisabled	astyle.h	/^		bool isOperatorPaddingDisabled() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isOption	astyle_main.cpp	/^bool ASConsole::isOption(const string &arg, const char* a, const char* b)$/;"	f	class:astyle::ASConsole	signature:(const string &arg, const char* a, const char* b)
isOption	astyle_main.cpp	/^bool ASConsole::isOption(const string &arg, const char* op)$/;"	f	class:astyle::ASConsole	signature:(const string &arg, const char* op)
isOption	astyle_main.cpp	/^bool ASOptions::isOption(const string &arg, const char* op)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* op)
isOption	astyle_main.cpp	/^bool ASOptions::isOption(const string &arg, const char* op1, const char* op2)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* op1, const char* op2)
isOption	astyle_main.h	/^		bool isOption(const string &arg, const char* op);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &arg, const char* op)
isOption	astyle_main.h	/^		bool isOption(const string &arg, const char* op);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* op)
isOption	astyle_main.h	/^		bool isOption(const string &arg, const char* op1, const char* op2);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &arg, const char* op1, const char* op2)
isOption	astyle_main.h	/^		bool isOption(const string &arg, const char* op1, const char* op2);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* op1, const char* op2)
isOptionError	astyle_main.cpp	/^void ASOptions::isOptionError(const string &arg, const string &errorInfo)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const string &errorInfo)
isOptionError	astyle_main.h	/^		void isOptionError(const string &arg, const string &errorInfo);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const string &errorInfo)
isParamOption	astyle_main.cpp	/^bool ASConsole::isParamOption(const string &arg, const char* option)$/;"	f	class:astyle::ASConsole	signature:(const string &arg, const char* option)
isParamOption	astyle_main.cpp	/^bool ASOptions::isParamOption(const string &arg, const char* option)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* option)
isParamOption	astyle_main.cpp	/^bool ASOptions::isParamOption(const string &arg, const char* option1, const char* option2)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const char* option1, const char* option2)
isParamOption	astyle_main.h	/^		bool isParamOption(const string &arg, const char* option);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &arg, const char* option)
isParamOption	astyle_main.h	/^		bool isParamOption(const string &arg, const char* option);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* option)
isParamOption	astyle_main.h	/^		bool isParamOption(const string &arg, const char* option1, const char* option2);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const char* option1, const char* option2)
isPathExclued	astyle_main.cpp	/^bool ASConsole::isPathExclued(const string &subPath)$/;"	f	class:astyle::ASConsole	signature:(const string &subPath)
isPathExclued	astyle_main.h	/^		bool isPathExclued(const string &subPath);$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &subPath)
isPointerOrReference	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReference() const$/;"	f	class:astyle::ASFormatter	signature:() const
isPointerOrReference	astyle.h	/^		bool isPointerOrReference() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isPointerOrReferenceCentered	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReferenceCentered() const$/;"	f	class:astyle::ASFormatter	signature:() const
isPointerOrReferenceCentered	astyle.h	/^		bool isPointerOrReferenceCentered() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isPointerOrReferenceVariable	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReferenceVariable(string &word) const$/;"	f	class:astyle::ASFormatter	signature:(string &word) const
isPointerOrReferenceVariable	astyle.h	/^		bool isPointerOrReferenceVariable(string &word) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &word) const
isPrependPostBlockEmptyLineRequested	astyle.h	/^		bool isPrependPostBlockEmptyLineRequested;$/;"	m	class:astyle::ASFormatter	access:private
isPreprocessorConditionalCplusplus	ASBeautifier.cpp	/^bool ASBeautifier::isPreprocessorConditionalCplusplus(const string &line) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line) const
isPreprocessorConditionalCplusplus	astyle.h	/^		bool isPreprocessorConditionalCplusplus(const string &line) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line) const
isPreviousBracketBlockRelated	astyle.h	/^		bool isPreviousBracketBlockRelated;$/;"	m	class:astyle::ASFormatter	access:private
isPreviousCharPostComment	astyle.h	/^		bool isPreviousCharPostComment;$/;"	m	class:astyle::ASFormatter	access:private
isQuiet	astyle_main.h	/^		bool isQuiet;                       \/\/ quiet option$/;"	m	class:astyle::ASConsole	access:private
isRecursive	astyle_main.h	/^		bool isRecursive;                   \/\/ recursive option$/;"	m	class:astyle::ASConsole	access:private
isSequenceReached	astyle.h	/^		bool isSequenceReached(const char* sequence) const {$/;"	f	class:astyle::ASFormatter	access:private	signature:(const char* sequence) const
isSharpAccessor	astyle.h	/^		bool isSharpAccessor;$/;"	m	class:astyle::ASBeautifier	access:protected
isSharpDelegate	astyle.h	/^		bool isSharpDelegate;$/;"	m	class:astyle::ASBeautifier	access:protected
isSharpStyle	astyle.h	/^		bool isSharpStyle() const { return (baseFileType == SHARP_TYPE); }$/;"	f	class:astyle::ASBase	access:protected	signature:() const
isSharpStyleWithParen	ASFormatter.cpp	/^bool ASFormatter::isSharpStyleWithParen(const string* header) const$/;"	f	class:astyle::ASFormatter	signature:(const string* header) const
isSharpStyleWithParen	astyle.h	/^		bool isSharpStyleWithParen(const string* header) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string* header) const
isSpecialChar	astyle.h	/^		bool isSpecialChar;$/;"	m	class:astyle::ASFormatter	access:private
isStructAccessModified	ASFormatter.cpp	/^bool ASFormatter::isStructAccessModified(string &firstLine, size_t index) const$/;"	f	class:astyle::ASFormatter	signature:(string &firstLine, size_t index) const
isStructAccessModified	astyle.h	/^		bool isStructAccessModified(string &firstLine, size_t index) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(string &firstLine, size_t index) const
isUnaryOperator	ASFormatter.cpp	/^bool ASFormatter::isUnaryOperator() const$/;"	f	class:astyle::ASFormatter	signature:() const
isUnaryOperator	astyle.h	/^		bool isUnaryOperator() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isUniformInitializerBracket	ASFormatter.cpp	/^bool ASFormatter::isUniformInitializerBracket() const$/;"	f	class:astyle::ASFormatter	signature:() const
isUniformInitializerBracket	astyle.h	/^		bool isUniformInitializerBracket() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
isVerbose	astyle_main.h	/^		bool isVerbose;                     \/\/ verbose option$/;"	m	class:astyle::ASConsole	access:private
isVirgin	astyle.h	/^		bool isVirgin;$/;"	m	class:astyle::ASFormatter	access:private
isWhiteSpace	astyle.h	/^		bool isWhiteSpace(char ch) const { return (ch == ' ' || ch == '\\t'); }$/;"	f	class:astyle::ASBase	access:protected	signature:(char ch) const
javaErrorHandler	astyle_main.cpp	/^void STDCALL javaErrorHandler(int errorNumber, const char* errorMessage)$/;"	f	signature:(int errorNumber, const char* errorMessage)
javaErrorHandler	astyle_main.h	/^void  STDCALL javaErrorHandler(int errorNumber, const char* errorMessage);$/;"	p	signature:(int errorNumber, const char* errorMessage)
javaMemoryAlloc	astyle_main.cpp	/^char* STDCALL javaMemoryAlloc(unsigned long memoryNeeded)$/;"	f	signature:(unsigned long memoryNeeded)
javaMemoryAlloc	astyle_main.h	/^char* STDCALL javaMemoryAlloc(unsigned long memoryNeeded);$/;"	p	signature:(unsigned long memoryNeeded)
labelIndent	astyle.h	/^		bool labelIndent;$/;"	m	class:astyle::ASBeautifier	access:private
lastLineHeader	astyle.h	/^		const string* lastLineHeader;$/;"	m	class:astyle::ASBeautifier	access:private
launchDefaultBrowser	astyle_main.cpp	/^void ASConsole::launchDefaultBrowser(const char* filePathIn \/*NULL*\/) const$/;"	f	class:astyle::ASConsole	signature:(const char* filePathIn ) const
launchDefaultBrowser	astyle_main.h	/^		void launchDefaultBrowser(const char* filePathIn = NULL) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* filePathIn = NULL) const
leadingSpaces	astyle.h	/^		size_t leadingSpaces;$/;"	m	class:astyle::ASFormatter	access:private
lineBeginsWithCloseBracket	astyle.h	/^		bool lineBeginsWithCloseBracket;$/;"	m	class:astyle::ASBeautifier	access:private
lineBeginsWithComma	astyle.h	/^		bool lineBeginsWithComma;$/;"	m	class:astyle::ASBeautifier	access:private
lineBeginsWithOpenBracket	astyle.h	/^		bool lineBeginsWithOpenBracket;$/;"	m	class:astyle::ASBeautifier	access:private
lineClosingBlocksNum	astyle.h	/^		int  lineClosingBlocksNum;$/;"	m	class:astyle::ASBeautifier	access:private
lineCommentNoBeautify	astyle.h	/^		bool lineCommentNoBeautify;$/;"	m	class:astyle::ASBeautifier	access:protected
lineCommentNoIndent	astyle.h	/^		bool lineCommentNoIndent;$/;"	m	class:astyle::ASFormatter	access:private
lineEnd	astyle.h	/^		LineEndFormat lineEnd;$/;"	m	class:astyle::ASFormatter	access:private
lineEndsInCommentOnly	astyle.h	/^		bool lineEndsInCommentOnly;$/;"	m	class:astyle::ASFormatter	access:private
lineEndsMixed	astyle_main.h	/^		bool lineEndsMixed;                 \/\/ output has mixed line ends$/;"	m	class:astyle::ASConsole	access:private
lineIsCommentOnly	astyle.h	/^		bool lineIsCommentOnly;$/;"	m	class:astyle::ASBeautifier	access:private
lineIsCommentOnly	astyle.h	/^		bool lineIsCommentOnly;$/;"	m	class:astyle::ASFormatter	access:private
lineIsEmpty	astyle.h	/^		bool lineIsEmpty;$/;"	m	class:astyle::ASFormatter	access:private
lineIsLineCommentOnly	astyle.h	/^		bool lineIsLineCommentOnly;$/;"	m	class:astyle::ASBeautifier	access:private
lineIsLineCommentOnly	astyle.h	/^		bool lineIsLineCommentOnly;$/;"	m	class:astyle::ASFormatter	access:private
lineNumber	astyle.h	/^		int  lineNumber;$/;"	m	class:astyle::ASEnhancer	access:private
lineOpeningBlocksNum	astyle.h	/^		int  lineOpeningBlocksNum;$/;"	m	class:astyle::ASBeautifier	access:private
lineOpensWithComment	astyle.h	/^		bool lineOpensWithComment;$/;"	m	class:astyle::ASBeautifier	access:private
lineOpensWithLineComment	astyle.h	/^		bool lineOpensWithLineComment;$/;"	m	class:astyle::ASBeautifier	access:private
lineStartsInComment	astyle.h	/^		bool lineStartsInComment;$/;"	m	class:astyle::ASBeautifier	access:private
linesOut	astyle_main.h	/^		int  linesOut;                      \/\/ number of output lines$/;"	m	class:astyle::ASConsole	access:private
localizer	astyle_main.h	/^		ASLocalizer localizer;              \/\/ ASLocalizer object$/;"	m	class:astyle::ASConsole	access:private
lookingForCaseBracket	astyle.h	/^		bool lookingForCaseBracket;$/;"	m	class:astyle::ASEnhancer	access:private
m_langID	ASLocalizer.h	/^		string m_langID;				\/\/ language identifier from the locale$/;"	m	class:astyle::ASLocalizer	access:private
m_lcid	ASLocalizer.h	/^		size_t m_lcid;					\/\/ LCID of the user locale (Windows only)$/;"	m	class:astyle::ASLocalizer	access:private
m_localeName	ASLocalizer.h	/^		string m_localeName;			\/\/ name of the current locale (Linux only)$/;"	m	class:astyle::ASLocalizer	access:private
m_strInput	TinyFormat.cpp	/^	std::string m_strInput;$/;"	m	class:CInputOutputConfig	file:	access:public
m_strOutput	TinyFormat.cpp	/^	std::string m_strOutput;$/;"	m	class:CInputOutputConfig	file:	access:public
m_subLangID	ASLocalizer.h	/^		string m_subLangID;				\/\/ sub language identifier, if needed$/;"	m	class:astyle::ASLocalizer	access:private
m_translation	ASLocalizer.h	/^		Translation* m_translation;		\/\/ pointer to a polymorphic Translation class$/;"	m	class:astyle::ASLocalizer	access:private
m_translation	ASLocalizer.h	/^		vector<pair<string, wstring> > m_translation;		\/\/ translation vector$/;"	m	class:astyle::Translation	access:protected
main	TinyFormat.cpp	/^int main(int argc,char* argv[])$/;"	f	signature:(int argc,char* argv[])
main	astyle_main.cpp	/^int main(int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
mainDirectoryLength	astyle_main.h	/^		size_t mainDirectoryLength;         \/\/ directory length to be excluded in displays$/;"	m	class:astyle::ASConsole	access:private
maxAndOr	astyle.h	/^		size_t maxAndOr;		\/\/ probably an 'if' statement$/;"	m	class:astyle::ASFormatter	access:private
maxAndOrPending	astyle.h	/^		size_t maxAndOrPending;$/;"	m	class:astyle::ASFormatter	access:private
maxCodeLength	astyle.h	/^		size_t maxCodeLength;$/;"	m	class:astyle::ASFormatter	access:private
maxComma	astyle.h	/^		size_t maxComma;$/;"	m	class:astyle::ASFormatter	access:private
maxCommaPending	astyle.h	/^		size_t maxCommaPending;$/;"	m	class:astyle::ASFormatter	access:private
maxInStatementIndent	astyle.h	/^		int  maxInStatementIndent;$/;"	m	class:astyle::ASBeautifier	access:private
maxParen	astyle.h	/^		size_t maxParen;$/;"	m	class:astyle::ASFormatter	access:private
maxParenPending	astyle.h	/^		size_t maxParenPending;$/;"	m	class:astyle::ASFormatter	access:private
maxSemi	astyle.h	/^		size_t maxSemi;			\/\/ probably a 'for' statement$/;"	m	class:astyle::ASFormatter	access:private
maxSemiPending	astyle.h	/^		size_t maxSemiPending;$/;"	m	class:astyle::ASFormatter	access:private
maxWhiteSpace	astyle.h	/^		size_t maxWhiteSpace;$/;"	m	class:astyle::ASFormatter	access:private
maxWhiteSpacePending	astyle.h	/^		size_t maxWhiteSpacePending;$/;"	m	class:astyle::ASFormatter	access:private
minConditionalIndent	astyle.h	/^		int  minConditionalIndent;$/;"	m	class:astyle::ASBeautifier	access:private
minConditionalOption	astyle.h	/^		int  minConditionalOption;$/;"	m	class:astyle::ASBeautifier	access:private
modifierIndent	astyle.h	/^		bool modifierIndent;$/;"	m	class:astyle::ASBeautifier	access:private
namespaceIndent	astyle.h	/^		bool namespaceIndent;$/;"	m	class:astyle::ASBeautifier	access:private
namespaceIndent	astyle.h	/^		bool namespaceIndent;$/;"	m	class:astyle::ASEnhancer	access:private
needHeaderOpeningBracket	astyle.h	/^		bool needHeaderOpeningBracket;$/;"	m	class:astyle::ASFormatter	access:private
nextLine	ASFormatter.cpp	/^string ASFormatter::nextLine()$/;"	f	class:astyle::ASFormatter	signature:()
nextLine	astyle.h	/^		virtual string nextLine();$/;"	p	class:astyle::ASFormatter	access:public	signature:()
nextLine	astyle.h	/^		virtual string nextLine(bool emptyLineWasDeleted = false) = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:(bool emptyLineWasDeleted = false)
nextLine	astyle_main.cpp	/^string ASStreamIterator<T>::nextLine(bool emptyLineWasDeleted)$/;"	f	class:astyle::ASStreamIterator	signature:(bool emptyLineWasDeleted)
nextLine	astyle_main.h	/^		string nextLine(bool emptyLineWasDeleted);$/;"	p	class:astyle::ASStreamIterator	access:public	signature:(bool emptyLineWasDeleted)
nextLineIsDeclareIndent	astyle.h	/^		bool nextLineIsDeclareIndent;           \/\/ begin declare section indent is reached$/;"	m	class:astyle::ASEnhancer	access:private
nextLineIsEventIndent	astyle.h	/^		bool nextLineIsEventIndent;             \/\/ begin event table indent is reached$/;"	m	class:astyle::ASEnhancer	access:private
nextLineSpacePadNum	astyle.h	/^		int  nextLineSpacePadNum;$/;"	m	class:astyle::ASFormatter	access:private
noBackup	astyle_main.h	/^		bool noBackup;                      \/\/ suffix=none option$/;"	m	class:astyle::ASConsole	access:private
noTrimCommentContinuation	astyle.h	/^		bool noTrimCommentContinuation;$/;"	m	class:astyle::ASFormatter	access:private
nonAssignmentOperators	astyle.h	/^		vector<const string*>* nonAssignmentOperators;$/;"	m	class:astyle::ASBeautifier	access:private
nonInStatementBracket	astyle.h	/^		int  nonInStatementBracket;$/;"	m	class:astyle::ASBeautifier	access:protected
nonParenHeaders	astyle.h	/^		vector<const string*>* nonParenHeaders;$/;"	m	class:astyle::ASBeautifier	access:private
nonParenHeaders	astyle.h	/^		vector<const string*>* nonParenHeaders;$/;"	m	class:astyle::ASFormatter	access:private
objCColonPadMode	astyle.h	/^		ObjCColonPad objCColonPadMode;$/;"	m	class:astyle::ASFormatter	access:private
operator =	astyle.h	/^		ASBeautifier &operator=(ASBeautifier &);       \/\/ not to be implemented$/;"	p	class:astyle::ASBeautifier	access:private	signature:(ASBeautifier &)
operator =	astyle.h	/^		ASFormatter &operator=(ASFormatter &);      \/\/ assignment operator not to be implemented$/;"	p	class:astyle::ASFormatter	access:private	signature:(ASFormatter &)
operator =	astyle_main.h	/^		ASConsole &operator=(ASConsole &);         \/\/ not to be implemented$/;"	p	class:astyle::ASConsole	access:private	signature:(ASConsole &)
operator =	astyle_main.h	/^		ASOptions &operator=(ASOptions &);         \/\/ not to be implemented$/;"	p	class:astyle::ASOptions	access:private	signature:(ASOptions &)
operator =	astyle_main.h	/^		ASStreamIterator &operator=(ASStreamIterator &);      \/\/ assignment operator not to be implemented$/;"	p	class:astyle::ASStreamIterator	access:private	signature:(ASStreamIterator &)
operators	astyle.h	/^		vector<const string*>* operators;$/;"	m	class:astyle::ASFormatter	access:private
optionErrors	astyle_main.h	/^		stringstream optionErrors;		\/\/ option error messages$/;"	m	class:astyle::ASOptions	access:private
optionsFileName	astyle_main.h	/^		string optionsFileName;             \/\/ file path and name of the options file to use$/;"	m	class:astyle::ASConsole	access:private
optionsFileRequired	astyle_main.h	/^		bool optionsFileRequired;           \/\/ options= option$/;"	m	class:astyle::ASConsole	access:private
optionsVector	astyle_main.h	/^		vector<string> optionsVector;       \/\/ options from the command line$/;"	m	class:astyle::ASConsole	access:private
origSuffix	astyle_main.h	/^		string origSuffix;                  \/\/ suffix= option$/;"	m	class:astyle::ASConsole	access:private
outputEOL	astyle_main.h	/^		char outputEOL[4];                  \/\/ current line end$/;"	m	class:astyle::ASConsole	access:private
outputEOL	astyle_main.h	/^		char outputEOL[4];      \/\/ next output end of line char$/;"	m	class:astyle::ASStreamIterator	access:private
padObjCMethodColon	ASFormatter.cpp	/^void ASFormatter::padObjCMethodColon()$/;"	f	class:astyle::ASFormatter	signature:()
padObjCMethodColon	astyle.h	/^		void padObjCMethodColon();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
padOperators	ASFormatter.cpp	/^void ASFormatter::padOperators(const string* newOperator)$/;"	f	class:astyle::ASFormatter	signature:(const string* newOperator)
padOperators	astyle.h	/^		void padOperators(const string* newOperator);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string* newOperator)
padParens	ASFormatter.cpp	/^void ASFormatter::padParens(void)$/;"	f	class:astyle::ASFormatter	signature:(void)
padParens	astyle.h	/^		void padParens();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
parenDepth	astyle.h	/^		int  parenDepth;$/;"	m	class:astyle::ASBeautifier	access:private
parenIndentStack	astyle.h	/^		vector<int>* parenIndentStack;$/;"	m	class:astyle::ASBeautifier	access:private
parenStack	astyle.h	/^		vector<int>* parenStack;$/;"	m	class:astyle::ASFormatter	access:private
parenStatementStack	astyle.h	/^		vector<bool>* parenStatementStack;$/;"	m	class:astyle::ASBeautifier	access:private
parseCurrentLine	ASBeautifier.cpp	/^void ASBeautifier::parseCurrentLine(const string &line)$/;"	f	class:astyle::ASBeautifier	signature:(const string &line)
parseCurrentLine	ASEnhancer.cpp	/^void ASEnhancer::parseCurrentLine(string &line, bool isInPreprocessor, bool isInSQL)$/;"	f	class:astyle::ASEnhancer	signature:(string &line, bool isInPreprocessor, bool isInSQL)
parseCurrentLine	astyle.h	/^		void    parseCurrentLine(string &line, bool isInPreprocessor, bool isInSQL);$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, bool isInPreprocessor, bool isInSQL)
parseCurrentLine	astyle.h	/^		void parseCurrentLine(const string &line);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line)
parseOption	astyle_main.cpp	/^void ASOptions::parseOption(const string &arg, const string &errorInfo)$/;"	f	class:astyle::ASOptions	signature:(const string &arg, const string &errorInfo)
parseOption	astyle_main.h	/^		void parseOption(const string &arg, const string &errorInfo);$/;"	p	class:astyle::ASOptions	access:private	signature:(const string &arg, const string &errorInfo)
parseOptions	astyle_main.cpp	/^bool ASOptions::parseOptions(vector<string> &optionsVector, const string &errorInfo)$/;"	f	class:astyle::ASOptions	signature:(vector<string> &optionsVector, const string &errorInfo)
parseOptions	astyle_main.h	/^		bool parseOptions(vector<string> &optionsVector, const string &errorInfo);$/;"	p	class:astyle::ASOptions	access:public	signature:(vector<string> &optionsVector, const string &errorInfo)
passedColon	astyle.h	/^		bool passedColon;$/;"	m	class:astyle::ASFormatter	access:private
passedSemicolon	astyle.h	/^		bool passedSemicolon;$/;"	m	class:astyle::ASFormatter	access:private
peekNextChar	ASFormatter.cpp	/^char ASFormatter::peekNextChar() const$/;"	f	class:astyle::ASFormatter	signature:() const
peekNextChar	astyle.h	/^		char peekNextChar() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
peekNextChar	astyle.h	/^		char peekNextChar(const string &line, int i) const {$/;"	f	class:astyle::ASBase	access:protected	signature:(const string &line, int i) const
peekNextLine	astyle.h	/^		virtual string peekNextLine() = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:()
peekNextLine	astyle_main.cpp	/^string ASStreamIterator<T>::peekNextLine()$/;"	f	class:astyle::ASStreamIterator	signature:()
peekNextLine	astyle_main.h	/^		string peekNextLine();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
peekNextText	ASFormatter.cpp	/^string ASFormatter::peekNextText(const string &firstLine, bool endOnEmptyLine \/*false*\/, bool shouldReset \/*false*\/) const$/;"	f	class:astyle::ASFormatter	signature:(const string &firstLine, bool endOnEmptyLine , bool shouldReset ) const
peekNextText	astyle.h	/^		string peekNextText(const string &firstLine, bool endOnEmptyLine = false, bool shouldReset = false) const;$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &firstLine, bool endOnEmptyLine = false, bool shouldReset = false) const
peekReset	astyle.h	/^		virtual void peekReset() = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:()
peekReset	astyle_main.cpp	/^void ASStreamIterator<T>::peekReset()$/;"	f	class:astyle::ASStreamIterator	signature:()
peekReset	astyle_main.h	/^		void peekReset();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
peekStart	astyle_main.h	/^		streamoff peekStart;    \/\/ starting position for peekNextLine$/;"	m	class:astyle::ASStreamIterator	access:private
pointerAlignment	astyle.h	/^		PointerAlign pointerAlignment;$/;"	m	class:astyle::ASFormatter	access:private
pointerSymbolFollows	ASFormatter.cpp	/^bool ASFormatter::pointerSymbolFollows() const$/;"	f	class:astyle::ASFormatter	signature:() const
pointerSymbolFollows	astyle.h	/^		bool pointerSymbolFollows() const;$/;"	p	class:astyle::ASFormatter	access:private	signature:() const
popLastInStatementIndent	ASBeautifier.cpp	/^void ASBeautifier::popLastInStatementIndent()$/;"	f	class:astyle::ASBeautifier	signature:()
popLastInStatementIndent	astyle.h	/^		void popLastInStatementIndent();$/;"	p	class:astyle::ASBeautifier	access:private	signature:()
preBlockStatements	astyle.h	/^		vector<const string*>* preBlockStatements;$/;"	m	class:astyle::ASBeautifier	access:private
preBracketHeaderStack	astyle.h	/^		vector<const string*>* preBracketHeaderStack;$/;"	m	class:astyle::ASFormatter	access:private
preCommandHeaders	astyle.h	/^		vector<const string*>* preCommandHeaders;$/;"	m	class:astyle::ASBeautifier	access:private
preCommandHeaders	astyle.h	/^		vector<const string*>* preCommandHeaders;$/;"	m	class:astyle::ASFormatter	access:private
preDefinitionHeaders	astyle.h	/^		vector<const string*>* preDefinitionHeaders;$/;"	m	class:astyle::ASFormatter	access:private
preLineWS	ASBeautifier.cpp	/^string ASBeautifier::preLineWS(int lineIndentCount, int lineSpaceIndentCount) const$/;"	f	class:astyle::ASBeautifier	signature:(int lineIndentCount, int lineSpaceIndentCount) const
preLineWS	astyle.h	/^		string preLineWS(int lineIndentCount, int lineSpaceIndentCount) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(int lineIndentCount, int lineSpaceIndentCount) const
prependEmptyLine	astyle.h	/^		bool prependEmptyLine;$/;"	m	class:astyle::ASFormatter	access:private
preprocBlockEnd	astyle.h	/^		streamoff preprocBlockEnd;$/;"	m	class:astyle::ASFormatter	access:private
preprocBlockIndent	astyle.h	/^		bool preprocBlockIndent;$/;"	m	class:astyle::ASEnhancer	access:private
preprocBlockIndent	astyle.h	/^		int  preprocBlockIndent;$/;"	m	class:astyle::ASBeautifier	access:private
preprocBracketTypeStackSize	astyle.h	/^		int  preprocBracketTypeStackSize;$/;"	m	class:astyle::ASFormatter	access:private
preprocDefineIndent	astyle.h	/^		bool preprocDefineIndent;$/;"	m	class:astyle::ASEnhancer	access:private
preprocIndentStack	astyle.h	/^		vector<pair<int, int> >* preprocIndentStack;$/;"	m	class:astyle::ASBeautifier	access:private
preserveDate	astyle_main.h	/^		bool preserveDate;                  \/\/ preserve-date option$/;"	m	class:astyle::ASConsole	access:private
prevBuffer	astyle_main.h	/^		string prevBuffer;      \/\/ previous input line$/;"	m	class:astyle::ASStreamIterator	access:private
prevEOL	astyle_main.h	/^		char prevEOL[4];                    \/\/ previous line end$/;"	m	class:astyle::ASConsole	access:private
prevFinalLineIndentCount	astyle.h	/^		int  prevFinalLineIndentCount;$/;"	m	class:astyle::ASBeautifier	access:private
prevFinalLineSpaceIndentCount	astyle.h	/^		int  prevFinalLineSpaceIndentCount;$/;"	m	class:astyle::ASBeautifier	access:private
prevLineDeleted	astyle_main.h	/^		bool prevLineDeleted;   \/\/ the previous input line was deleted$/;"	m	class:astyle::ASStreamIterator	access:private
prevNonLegalCh	astyle.h	/^		char prevNonLegalCh;$/;"	m	class:astyle::ASBeautifier	access:private
prevNonSpaceCh	astyle.h	/^		char prevNonSpaceCh;$/;"	m	class:astyle::ASBeautifier	access:private
previousBracketType	astyle.h	/^		BracketType previousBracketType;$/;"	m	class:astyle::ASFormatter	access:private
previousChar	astyle.h	/^		char previousChar;$/;"	m	class:astyle::ASFormatter	access:private
previousCommandChar	astyle.h	/^		char previousCommandChar;$/;"	m	class:astyle::ASFormatter	access:private
previousLastLineHeader	astyle.h	/^		const string* previousLastLineHeader;$/;"	m	class:astyle::ASBeautifier	access:private
previousLineProbationTab	astyle.h	/^		bool previousLineProbationTab;$/;"	m	class:astyle::ASBeautifier	access:private
previousNonWSChar	astyle.h	/^		char previousNonWSChar;$/;"	m	class:astyle::ASFormatter	access:private
previousOperator	astyle.h	/^		const string* previousOperator;    \/\/ used ONLY by pad-oper$/;"	m	class:astyle::ASFormatter	access:private
previousReadyFormattedLineLength	astyle.h	/^		size_t previousReadyFormattedLineLength;$/;"	m	class:astyle::ASFormatter	access:private
printHelp	astyle_main.cpp	/^void ASConsole::printHelp() const$/;"	f	class:astyle::ASConsole	signature:() const
printHelp	astyle_main.h	/^		void printHelp() const;$/;"	p	class:astyle::ASConsole	access:private	signature:() const
printMsg	astyle_main.cpp	/^void ASConsole::printMsg(const char* msg, const string &data) const$/;"	f	class:astyle::ASConsole	signature:(const char* msg, const string &data) const
printMsg	astyle_main.h	/^		void printMsg(const char* msg, const string &data) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* msg, const string &data) const
printSeparatingLine	astyle_main.cpp	/^void ASConsole::printSeparatingLine() const$/;"	f	class:astyle::ASConsole	signature:() const
printSeparatingLine	astyle_main.h	/^		void printSeparatingLine() const;$/;"	p	class:astyle::ASConsole	access:private	signature:() const
printVerboseHeader	astyle_main.cpp	/^void ASConsole::printVerboseHeader() const$/;"	f	class:astyle::ASConsole	signature:() const
printVerboseHeader	astyle_main.h	/^		void printVerboseHeader() const;$/;"	p	class:astyle::ASConsole	access:private	signature:() const
printVerboseStats	astyle_main.cpp	/^void ASConsole::printVerboseStats(clock_t startTime) const$/;"	f	class:astyle::ASConsole	signature:(clock_t startTime) const
printVerboseStats	astyle_main.h	/^		void printVerboseStats(clock_t startTime) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(clock_t startTime) const
probationHeader	astyle.h	/^		const string* probationHeader;$/;"	m	class:astyle::ASBeautifier	access:private
processFiles	astyle_main.cpp	/^void ASConsole::processFiles()$/;"	f	class:astyle::ASConsole	signature:()
processFiles	astyle_main.h	/^		void processFiles();$/;"	p	class:astyle::ASConsole	access:public	signature:()
processOptions	astyle_main.cpp	/^void ASConsole::processOptions(vector<string> &argvOptions)$/;"	f	class:astyle::ASConsole	signature:(vector<string> &argvOptions)
processOptions	astyle_main.h	/^		void processOptions(vector<string> &argvOptions);$/;"	p	class:astyle::ASConsole	access:public	signature:(vector<string> &argvOptions)
processPreprocessor	ASBeautifier.cpp	/^void ASBeautifier::processPreprocessor(const string &preproc, const string &line)$/;"	f	class:astyle::ASBeautifier	signature:(const string &preproc, const string &line)
processPreprocessor	ASFormatter.cpp	/^void ASFormatter::processPreprocessor()$/;"	f	class:astyle::ASFormatter	signature:()
processPreprocessor	astyle.h	/^		void processPreprocessor();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
processPreprocessor	astyle.h	/^		void processPreprocessor(const string &preproc, const string &line);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &preproc, const string &line)
processSwitchBlock	ASEnhancer.cpp	/^size_t ASEnhancer::processSwitchBlock(string &line, size_t index)$/;"	f	class:astyle::ASEnhancer	signature:(string &line, size_t index)
processSwitchBlock	astyle.h	/^		size_t  processSwitchBlock(string  &line, size_t index);$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, size_t index)
processedFirstConditional	astyle.h	/^		bool processedFirstConditional;$/;"	m	class:astyle::ASFormatter	access:private
questionMarkStack	astyle.h	/^		vector<bool>* questionMarkStack;$/;"	m	class:astyle::ASFormatter	access:private
quoteChar	astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASBeautifier	access:private
quoteChar	astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASEnhancer	access:private
quoteChar	astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASFormatter	access:private
readFile	astyle_main.cpp	/^FileEncoding ASConsole::readFile(const string &fileName_, stringstream &in) const$/;"	f	class:astyle::ASConsole	signature:(const string &fileName_, stringstream &in) const
readFile	astyle_main.h	/^		FileEncoding readFile(const string &fileName_, stringstream &in) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &fileName_, stringstream &in) const
readyFormattedLine	astyle.h	/^		string readyFormattedLine;$/;"	m	class:astyle::ASFormatter	access:private
referenceAlignment	astyle.h	/^		ReferenceAlign referenceAlignment;$/;"	m	class:astyle::ASFormatter	access:private
registerInStatementIndent	ASBeautifier.cpp	/^void ASBeautifier::registerInStatementIndent(const string &line, int i, int spaceTabCount_,$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i, int spaceTabCount_, int tabIncrementIn, int minIndent, bool updateParenStack)
registerInStatementIndent	astyle.h	/^		void registerInStatementIndent(const string &line, int i, int spaceIndentCount,$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, int i, int spaceIndentCount, int tabIncrementIn, int minIndent, bool updateParenStack)
registerInStatementIndentColon	ASBeautifier.cpp	/^void ASBeautifier::registerInStatementIndentColon(const string &line, int i, int tabIncrementIn)$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int i, int tabIncrementIn)
registerInStatementIndentColon	astyle.h	/^		void registerInStatementIndentColon(const string &line, int i, int tabIncrementIn);$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, int i, int tabIncrementIn)
removeBracketsFromStatement	ASFormatter.cpp	/^bool ASFormatter::removeBracketsFromStatement()$/;"	f	class:astyle::ASFormatter	signature:()
removeBracketsFromStatement	astyle.h	/^		bool removeBracketsFromStatement();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
removeFile	astyle_main.cpp	/^void ASConsole::removeFile(const char* fileName_, const char* errMsg) const$/;"	f	class:astyle::ASConsole	signature:(const char* fileName_, const char* errMsg) const
removeFile	astyle_main.h	/^		void removeFile(const char* fileName_, const char* errMsg) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* fileName_, const char* errMsg) const
renameFile	astyle_main.cpp	/^void ASConsole::renameFile(const char* oldFileName, const char* newFileName, const char* errMsg) const$/;"	f	class:astyle::ASConsole	signature:(const char* oldFileName, const char* newFileName, const char* errMsg) const
renameFile	astyle_main.h	/^		void renameFile(const char* oldFileName, const char* newFileName, const char* errMsg) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* oldFileName, const char* newFileName, const char* errMsg) const
resetEndOfStatement	ASFormatter.cpp	/^void ASFormatter::resetEndOfStatement()$/;"	f	class:astyle::ASFormatter	signature:()
resetEndOfStatement	astyle.h	/^		void resetEndOfStatement();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
rtrim	ASBeautifier.cpp	/^string ASBeautifier::rtrim(const string &str) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &str) const
rtrim	astyle.h	/^		string rtrim(const string &str) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &str) const
s_strErr	CFCppTidy.cpp	/^static std::string s_strErr;$/;"	v	file:
saveLastInputLine	astyle_main.cpp	/^void ASStreamIterator<T>::saveLastInputLine()$/;"	f	class:astyle::ASStreamIterator	signature:()
saveLastInputLine	astyle_main.h	/^		void saveLastInputLine();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
setAddBracketsMode	ASFormatter.cpp	/^void ASFormatter::setAddBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setAddBracketsMode	astyle.h	/^		void setAddBracketsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setAddOneLineBracketsMode	ASFormatter.cpp	/^void ASFormatter::setAddOneLineBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setAddOneLineBracketsMode	astyle.h	/^		void setAddOneLineBracketsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setAlignMethodColon	ASBeautifier.cpp	/^void ASBeautifier::setAlignMethodColon(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setAlignMethodColon	astyle.h	/^		void setAlignMethodColon(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setAttachClass	ASFormatter.cpp	/^void ASFormatter::setAttachClass(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setAttachClass	astyle.h	/^		void setAttachClass(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setAttachClosingBracketMode	ASFormatter.cpp	/^void ASFormatter::setAttachClosingBracketMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setAttachClosingBracketMode	astyle.h	/^		void setAttachClosingBracketMode(bool state);$/;"	p	class:astyle::ASFormatter	access:private	signature:(bool state)
setAttachExternC	ASFormatter.cpp	/^void ASFormatter::setAttachExternC(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setAttachExternC	astyle.h	/^		void setAttachExternC(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setAttachInline	ASFormatter.cpp	/^void ASFormatter::setAttachInline(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setAttachInline	astyle.h	/^		void setAttachInline(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setAttachNamespace	ASFormatter.cpp	/^void ASFormatter::setAttachNamespace(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setAttachNamespace	astyle.h	/^		void setAttachNamespace(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setBlockIndent	ASBeautifier.cpp	/^void ASBeautifier::setBlockIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setBlockIndent	astyle.h	/^		void setBlockIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(bool state)
setBracketFormatMode	ASFormatter.cpp	/^void ASFormatter::setBracketFormatMode(BracketMode mode)$/;"	f	class:astyle::ASFormatter	signature:(BracketMode mode)
setBracketFormatMode	astyle.h	/^		void setBracketFormatMode(BracketMode mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(BracketMode mode)
setBracketIndent	ASBeautifier.cpp	/^void ASBeautifier::setBracketIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setBracketIndent	astyle.h	/^		void setBracketIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(bool state)
setBracketIndentVtk	ASBeautifier.cpp	/^void ASBeautifier::setBracketIndentVtk(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setBracketIndentVtk	astyle.h	/^		void setBracketIndentVtk(bool state);$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(bool state)
setBreakAfterMode	ASFormatter.cpp	/^void ASFormatter::setBreakAfterMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setBreakAfterMode	astyle.h	/^		void setBreakAfterMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setBreakBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setBreakBlocksMode	astyle.h	/^		void setBreakBlocksMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setBreakBlocksVariables	astyle.h	/^		void setBreakBlocksVariables();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
setBreakClosingHeaderBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setBreakClosingHeaderBlocksMode	astyle.h	/^		void setBreakClosingHeaderBlocksMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setBreakClosingHeaderBracketsMode	ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setBreakClosingHeaderBracketsMode	astyle.h	/^		void setBreakClosingHeaderBracketsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setBreakElseIfsMode	ASFormatter.cpp	/^void ASFormatter::setBreakElseIfsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setBreakElseIfsMode	astyle.h	/^		void setBreakElseIfsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setBreakOneLineBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakOneLineBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setBreakOneLineBlocksMode	astyle.h	/^		void setBreakOneLineBlocksMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setBypassBrowserOpen	astyle_main.cpp	/^void ASConsole::setBypassBrowserOpen(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setBypassBrowserOpen	astyle_main.h	/^		void setBypassBrowserOpen(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setCStyle	ASBeautifier.cpp	/^void ASBeautifier::setCStyle()$/;"	f	class:astyle::ASBeautifier	signature:()
setCStyle	astyle.h	/^		void setCStyle();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
setCaseIndent	ASBeautifier.cpp	/^void ASBeautifier::setCaseIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setCaseIndent	astyle.h	/^		void setCaseIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setClassIndent	ASBeautifier.cpp	/^void ASBeautifier::setClassIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setClassIndent	astyle.h	/^		void setClassIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setCloseTemplatesMode	ASFormatter.cpp	/^void ASFormatter::setCloseTemplatesMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setCloseTemplatesMode	astyle.h	/^		void setCloseTemplatesMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setDefaultTabLength	ASBeautifier.cpp	/^void ASBeautifier::setDefaultTabLength()$/;"	f	class:astyle::ASBeautifier	signature:()
setDefaultTabLength	astyle.h	/^		void setDefaultTabLength();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
setDeleteEmptyLinesMode	ASFormatter.cpp	/^void ASFormatter::setDeleteEmptyLinesMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setDeleteEmptyLinesMode	astyle.h	/^		void setDeleteEmptyLinesMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setEmptyLineFill	ASBeautifier.cpp	/^void ASBeautifier::setEmptyLineFill(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setEmptyLineFill	astyle.h	/^		void setEmptyLineFill(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setForceTabXIndentation	ASBeautifier.cpp	/^void ASBeautifier::setForceTabXIndentation(int length)$/;"	f	class:astyle::ASBeautifier	signature:(int length)
setForceTabXIndentation	astyle.h	/^		void setForceTabXIndentation(int length);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int length)
setFormattingStyle	ASFormatter.cpp	/^void ASFormatter::setFormattingStyle(FormatStyle style)$/;"	f	class:astyle::ASFormatter	signature:(FormatStyle style)
setFormattingStyle	astyle.h	/^		void setFormattingStyle(FormatStyle style);$/;"	p	class:astyle::ASFormatter	access:public	signature:(FormatStyle style)
setIgnoreExcludeErrors	astyle_main.cpp	/^void ASConsole::setIgnoreExcludeErrors(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setIgnoreExcludeErrors	astyle_main.h	/^		void setIgnoreExcludeErrors(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setIgnoreExcludeErrorsAndDisplay	astyle_main.cpp	/^void ASConsole::setIgnoreExcludeErrorsAndDisplay(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setIgnoreExcludeErrorsAndDisplay	astyle_main.h	/^		void setIgnoreExcludeErrorsAndDisplay(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setIndentCol1CommentsMode	ASFormatter.cpp	/^void ASFormatter::setIndentCol1CommentsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setIndentCol1CommentsMode	astyle.h	/^		void setIndentCol1CommentsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setIsDryRun	astyle_main.cpp	/^void ASConsole::setIsDryRun(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setIsDryRun	astyle_main.h	/^		void setIsDryRun(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setIsFormattedOnly	astyle_main.cpp	/^void ASConsole::setIsFormattedOnly(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setIsFormattedOnly	astyle_main.h	/^		void setIsFormattedOnly(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setIsQuiet	astyle_main.cpp	/^void ASConsole::setIsQuiet(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setIsQuiet	astyle_main.h	/^		void setIsQuiet(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setIsRecursive	astyle_main.cpp	/^void ASConsole::setIsRecursive(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setIsRecursive	astyle_main.h	/^		void setIsRecursive(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setIsVerbose	astyle_main.cpp	/^void ASConsole::setIsVerbose(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setIsVerbose	astyle_main.h	/^		void setIsVerbose(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setJavaStyle	ASBeautifier.cpp	/^void ASBeautifier::setJavaStyle()$/;"	f	class:astyle::ASBeautifier	signature:()
setJavaStyle	astyle.h	/^		void setJavaStyle();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
setLabelIndent	ASBeautifier.cpp	/^void ASBeautifier::setLabelIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setLabelIndent	astyle.h	/^		void setLabelIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setLanguageFromLCID	ASLocalizer.cpp	/^void ASLocalizer::setLanguageFromLCID(size_t lcid)$/;"	f	class:astyle::ASLocalizer	signature:(size_t lcid)
setLanguageFromLCID	ASLocalizer.h	/^		void setLanguageFromLCID(size_t lcid);$/;"	p	class:astyle::ASLocalizer	access:public	signature:(size_t lcid)
setLanguageFromName	ASLocalizer.cpp	/^void ASLocalizer::setLanguageFromName(const char* langID)$/;"	f	class:astyle::ASLocalizer	signature:(const char* langID)
setLanguageFromName	ASLocalizer.h	/^		void setLanguageFromName(const char* langID);$/;"	p	class:astyle::ASLocalizer	access:public	signature:(const char* langID)
setLineEndFormat	ASFormatter.cpp	/^void ASFormatter::setLineEndFormat(LineEndFormat fmt)$/;"	f	class:astyle::ASFormatter	signature:(LineEndFormat fmt)
setLineEndFormat	astyle.h	/^		void setLineEndFormat(LineEndFormat fmt);$/;"	p	class:astyle::ASFormatter	access:public	signature:(LineEndFormat fmt)
setMaxCodeLength	ASFormatter.cpp	/^void ASFormatter::setMaxCodeLength(int max)$/;"	f	class:astyle::ASFormatter	signature:(int max)
setMaxCodeLength	astyle.h	/^		void setMaxCodeLength(int max);$/;"	p	class:astyle::ASFormatter	access:public	signature:(int max)
setMaxInStatementIndentLength	ASBeautifier.cpp	/^void ASBeautifier::setMaxInStatementIndentLength(int max)$/;"	f	class:astyle::ASBeautifier	signature:(int max)
setMaxInStatementIndentLength	astyle.h	/^		void setMaxInStatementIndentLength(int max);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int max)
setMethodPrefixPaddingMode	ASFormatter.cpp	/^void ASFormatter::setMethodPrefixPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setMethodPrefixPaddingMode	astyle.h	/^		void setMethodPrefixPaddingMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setMethodPrefixUnPaddingMode	ASFormatter.cpp	/^void ASFormatter::setMethodPrefixUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setMethodPrefixUnPaddingMode	astyle.h	/^		void setMethodPrefixUnPaddingMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setMinConditionalIndentLength	ASBeautifier.cpp	/^void ASBeautifier::setMinConditionalIndentLength()$/;"	f	class:astyle::ASBeautifier	signature:()
setMinConditionalIndentLength	astyle.h	/^		void setMinConditionalIndentLength();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
setMinConditionalIndentOption	ASBeautifier.cpp	/^void ASBeautifier::setMinConditionalIndentOption(int min)$/;"	f	class:astyle::ASBeautifier	signature:(int min)
setMinConditionalIndentOption	astyle.h	/^		void setMinConditionalIndentOption(int min);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int min)
setModeManuallySet	ASBeautifier.cpp	/^void ASBeautifier::setModeManuallySet(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setModeManuallySet	astyle.h	/^		void setModeManuallySet(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setModifierIndent	ASBeautifier.cpp	/^void ASBeautifier::setModifierIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setModifierIndent	astyle.h	/^		void setModifierIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setNamespaceIndent	ASBeautifier.cpp	/^void ASBeautifier::setNamespaceIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setNamespaceIndent	astyle.h	/^		void setNamespaceIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setNoBackup	astyle_main.cpp	/^void ASConsole::setNoBackup(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setNoBackup	astyle_main.h	/^		void setNoBackup(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setObjCColonPaddingMode	ASFormatter.cpp	/^void ASFormatter::setObjCColonPaddingMode(ObjCColonPad mode)$/;"	f	class:astyle::ASFormatter	signature:(ObjCColonPad mode)
setObjCColonPaddingMode	astyle.h	/^		void setObjCColonPaddingMode(ObjCColonPad mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(ObjCColonPad mode)
setOperatorPaddingMode	ASFormatter.cpp	/^void ASFormatter::setOperatorPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setOperatorPaddingMode	astyle.h	/^		void setOperatorPaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
setOptionsFileName	astyle_main.cpp	/^void ASConsole::setOptionsFileName(string name)$/;"	f	class:astyle::ASConsole	signature:(string name)
setOptionsFileName	astyle_main.h	/^		void setOptionsFileName(string name);$/;"	p	class:astyle::ASConsole	access:public	signature:(string name)
setOrigSuffix	astyle_main.cpp	/^void ASConsole::setOrigSuffix(string suffix)$/;"	f	class:astyle::ASConsole	signature:(string suffix)
setOrigSuffix	astyle_main.h	/^		void setOrigSuffix(string suffix);$/;"	p	class:astyle::ASConsole	access:public	signature:(string suffix)
setOutputEOL	astyle_main.cpp	/^void ASConsole::setOutputEOL(LineEndFormat lineEndFormat, const char* currentEOL)$/;"	f	class:astyle::ASConsole	signature:(LineEndFormat lineEndFormat, const char* currentEOL)
setOutputEOL	astyle_main.h	/^		void setOutputEOL(LineEndFormat lineEndFormat, const char* currentEOL);$/;"	p	class:astyle::ASConsole	access:private	signature:(LineEndFormat lineEndFormat, const char* currentEOL)
setParensFirstPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensFirstPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setParensFirstPaddingMode	astyle.h	/^		void setParensFirstPaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
setParensHeaderPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensHeaderPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setParensHeaderPaddingMode	astyle.h	/^		void setParensHeaderPaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
setParensInsidePaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensInsidePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setParensInsidePaddingMode	astyle.h	/^		void setParensInsidePaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
setParensOutsidePaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensOutsidePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setParensOutsidePaddingMode	astyle.h	/^		void setParensOutsidePaddingMode(bool mode);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool mode)
setParensUnPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setParensUnPaddingMode	astyle.h	/^		void setParensUnPaddingMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setPointerAlignment	ASFormatter.cpp	/^void ASFormatter::setPointerAlignment(PointerAlign alignment)$/;"	f	class:astyle::ASFormatter	signature:(PointerAlign alignment)
setPointerAlignment	astyle.h	/^		void setPointerAlignment(PointerAlign alignment);$/;"	p	class:astyle::ASFormatter	access:public	signature:(PointerAlign alignment)
setPreprocBlockIndent	ASFormatter.cpp	/^void ASFormatter::setPreprocBlockIndent(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setPreprocBlockIndent	astyle.h	/^		void setPreprocBlockIndent(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setPreprocConditionalIndent	ASBeautifier.cpp	/^void ASBeautifier::setPreprocConditionalIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setPreprocConditionalIndent	astyle.h	/^		void setPreprocConditionalIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setPreprocDefineIndent	ASBeautifier.cpp	/^void ASBeautifier::setPreprocDefineIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setPreprocDefineIndent	astyle.h	/^		void setPreprocDefineIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setPreserveDate	astyle_main.cpp	/^void ASConsole::setPreserveDate(bool state)$/;"	f	class:astyle::ASConsole	signature:(bool state)
setPreserveDate	astyle_main.h	/^		void setPreserveDate(bool state);$/;"	p	class:astyle::ASConsole	access:public	signature:(bool state)
setReferenceAlignment	ASFormatter.cpp	/^void ASFormatter::setReferenceAlignment(ReferenceAlign alignment)$/;"	f	class:astyle::ASFormatter	signature:(ReferenceAlign alignment)
setReferenceAlignment	astyle.h	/^		void setReferenceAlignment(ReferenceAlign alignment);$/;"	p	class:astyle::ASFormatter	access:public	signature:(ReferenceAlign alignment)
setRemoveBracketsMode	ASFormatter.cpp	/^void ASFormatter::setRemoveBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setRemoveBracketsMode	astyle.h	/^		void setRemoveBracketsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setSharpStyle	ASBeautifier.cpp	/^void ASBeautifier::setSharpStyle()$/;"	f	class:astyle::ASBeautifier	signature:()
setSharpStyle	astyle.h	/^		void setSharpStyle();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
setSingleStatementsMode	ASFormatter.cpp	/^void ASFormatter::setSingleStatementsMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setSingleStatementsMode	astyle.h	/^		void setSingleStatementsMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setSpaceIndentation	ASBeautifier.cpp	/^void ASBeautifier::setSpaceIndentation(int length)$/;"	f	class:astyle::ASBeautifier	signature:(int length)
setSpaceIndentation	astyle.h	/^		void setSpaceIndentation(int length = 4);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int length = 4)
setStripCommentPrefix	ASFormatter.cpp	/^void ASFormatter::setStripCommentPrefix(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setStripCommentPrefix	astyle.h	/^		void setStripCommentPrefix(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setSwitchIndent	ASBeautifier.cpp	/^void ASBeautifier::setSwitchIndent(bool state)$/;"	f	class:astyle::ASBeautifier	signature:(bool state)
setSwitchIndent	astyle.h	/^		void setSwitchIndent(bool state);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(bool state)
setTabIndentation	ASBeautifier.cpp	/^void ASBeautifier::setTabIndentation(int length, bool forceTabs)$/;"	f	class:astyle::ASBeautifier	signature:(int length, bool forceTabs)
setTabIndentation	astyle.h	/^		void setTabIndentation(int length = 4, bool forceTabs = false);$/;"	p	class:astyle::ASBeautifier	access:public	signature:(int length = 4, bool forceTabs = false)
setTabSpaceConversionMode	ASFormatter.cpp	/^void ASFormatter::setTabSpaceConversionMode(bool state)$/;"	f	class:astyle::ASFormatter	signature:(bool state)
setTabSpaceConversionMode	astyle.h	/^		void setTabSpaceConversionMode(bool state);$/;"	p	class:astyle::ASFormatter	access:public	signature:(bool state)
setTranslationClass	ASLocalizer.cpp	/^void ASLocalizer::setTranslationClass()$/;"	f	class:astyle::ASLocalizer	signature:()
setTranslationClass	ASLocalizer.h	/^		void setTranslationClass();$/;"	p	class:astyle::ASLocalizer	access:private	signature:()
settext	ASLocalizer.cpp	/^const char* ASLocalizer::settext(const char* textIn) const$/;"	f	class:astyle::ASLocalizer	signature:(const char* textIn) const
settext	ASLocalizer.h	/^		const char* settext(const char* textIn) const;$/;"	p	class:astyle::ASLocalizer	access:public	signature:(const char* textIn) const
shouldAddBrackets	astyle.h	/^		bool shouldAddBrackets;$/;"	m	class:astyle::ASFormatter	access:private
shouldAddOneLineBrackets	astyle.h	/^		bool shouldAddOneLineBrackets;$/;"	m	class:astyle::ASFormatter	access:private
shouldAlignMethodColon	astyle.h	/^		bool shouldAlignMethodColon;$/;"	m	class:astyle::ASBeautifier	access:private
shouldAttachClass	astyle.h	/^		bool shouldAttachClass;$/;"	m	class:astyle::ASFormatter	access:private
shouldAttachExternC	astyle.h	/^		bool shouldAttachExternC;$/;"	m	class:astyle::ASFormatter	access:private
shouldAttachInline	astyle.h	/^		bool shouldAttachInline;$/;"	m	class:astyle::ASFormatter	access:private
shouldAttachNamespace	astyle.h	/^		bool shouldAttachNamespace;$/;"	m	class:astyle::ASFormatter	access:private
shouldBreakBlocks	astyle.h	/^		bool shouldBreakBlocks;$/;"	m	class:astyle::ASFormatter	access:private
shouldBreakClosingHeaderBlocks	astyle.h	/^		bool shouldBreakClosingHeaderBlocks;$/;"	m	class:astyle::ASFormatter	access:private
shouldBreakClosingHeaderBrackets	astyle.h	/^		bool shouldBreakClosingHeaderBrackets;$/;"	m	class:astyle::ASFormatter	access:private
shouldBreakElseIfs	astyle.h	/^		bool shouldBreakElseIfs;$/;"	m	class:astyle::ASFormatter	access:private
shouldBreakLineAfterLogical	astyle.h	/^		bool shouldBreakLineAfterLogical;$/;"	m	class:astyle::ASFormatter	access:private
shouldBreakLineAtNextChar	astyle.h	/^		bool shouldBreakLineAtNextChar;$/;"	m	class:astyle::ASFormatter	access:private
shouldBreakOneLineBlocks	astyle.h	/^		bool shouldBreakOneLineBlocks;$/;"	m	class:astyle::ASFormatter	access:private
shouldBreakOneLineStatements	astyle.h	/^		bool shouldBreakOneLineStatements;$/;"	m	class:astyle::ASFormatter	access:private
shouldCloseTemplates	astyle.h	/^		bool shouldCloseTemplates;$/;"	m	class:astyle::ASFormatter	access:private
shouldConvertTabs	astyle.h	/^		bool shouldConvertTabs;$/;"	m	class:astyle::ASFormatter	access:private
shouldDeleteEmptyLines	astyle.h	/^		bool shouldDeleteEmptyLines;$/;"	m	class:astyle::ASFormatter	access:private
shouldForceTabIndentation	astyle.h	/^		bool shouldForceTabIndentation;$/;"	m	class:astyle::ASBeautifier	access:private
shouldIndentBrackettedLine	astyle.h	/^		bool shouldIndentBrackettedLine;$/;"	m	class:astyle::ASBeautifier	access:private
shouldIndentCol1Comments	astyle.h	/^		bool shouldIndentCol1Comments;$/;"	m	class:astyle::ASFormatter	access:private
shouldIndentPreprocBlock	astyle.h	/^		bool shouldIndentPreprocBlock;$/;"	m	class:astyle::ASFormatter	access:private
shouldIndentPreprocConditional	astyle.h	/^		bool shouldIndentPreprocConditional;$/;"	m	class:astyle::ASBeautifier	access:private
shouldIndentPreprocDefine	astyle.h	/^		bool shouldIndentPreprocDefine;$/;"	m	class:astyle::ASBeautifier	access:private
shouldKeepLineUnbroken	astyle.h	/^		bool shouldKeepLineUnbroken;$/;"	m	class:astyle::ASFormatter	access:private
shouldPadFirstParen	astyle.h	/^		bool shouldPadFirstParen;$/;"	m	class:astyle::ASFormatter	access:private
shouldPadHeader	astyle.h	/^		bool shouldPadHeader;$/;"	m	class:astyle::ASFormatter	access:private
shouldPadMethodColon	astyle.h	/^		bool shouldPadMethodColon;$/;"	m	class:astyle::ASFormatter	access:private
shouldPadMethodPrefix	astyle.h	/^		bool shouldPadMethodPrefix;$/;"	m	class:astyle::ASFormatter	access:private
shouldPadOperators	astyle.h	/^		bool shouldPadOperators;$/;"	m	class:astyle::ASFormatter	access:private
shouldPadParensInside	astyle.h	/^		bool shouldPadParensInside;$/;"	m	class:astyle::ASFormatter	access:private
shouldPadParensOutside	astyle.h	/^		bool shouldPadParensOutside;$/;"	m	class:astyle::ASFormatter	access:private
shouldRemoveBrackets	astyle.h	/^		bool shouldRemoveBrackets;$/;"	m	class:astyle::ASFormatter	access:private
shouldRemoveNextClosingBracket	astyle.h	/^		bool shouldRemoveNextClosingBracket;$/;"	m	class:astyle::ASFormatter	access:private
shouldReparseCurrentChar	astyle.h	/^		bool shouldReparseCurrentChar;$/;"	m	class:astyle::ASFormatter	access:private
shouldStripCommentPrefix	astyle.h	/^		bool shouldStripCommentPrefix;$/;"	m	class:astyle::ASFormatter	access:private
shouldUnPadMethodPrefix	astyle.h	/^		bool shouldUnPadMethodPrefix;$/;"	m	class:astyle::ASFormatter	access:private
shouldUnPadParens	astyle.h	/^		bool shouldUnPadParens;$/;"	m	class:astyle::ASFormatter	access:private
shouldUnindentComment	astyle.h	/^		bool shouldUnindentComment;$/;"	m	class:astyle::ASEnhancer	access:private
shouldUnindentLine	astyle.h	/^		bool shouldUnindentLine;$/;"	m	class:astyle::ASEnhancer	access:private
sleep	astyle_main.cpp	/^void ASConsole::sleep(int seconds) const$/;"	f	class:astyle::ASConsole	signature:(int seconds) const
sleep	astyle_main.h	/^		void sleep(int seconds) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(int seconds) const
sortOnLength	ASResource.cpp	/^bool sortOnLength(const string* a, const string* b)$/;"	f	namespace:astyle	signature:(const string* a, const string* b)
sortOnLength	astyle.h	/^bool sortOnLength(const string* a, const string* b);$/;"	p	namespace:astyle	signature:(const string* a, const string* b)
sortOnName	ASResource.cpp	/^bool sortOnName(const string* a, const string* b)$/;"	f	namespace:astyle	signature:(const string* a, const string* b)
sortOnName	astyle.h	/^bool sortOnName(const string* a, const string* b);$/;"	p	namespace:astyle	signature:(const string* a, const string* b)
sourceIterator	astyle.h	/^		ASSourceIterator* sourceIterator;$/;"	m	class:astyle::ASBeautifier	access:private
sourceIterator	astyle.h	/^		ASSourceIterator* sourceIterator;$/;"	m	class:astyle::ASFormatter	access:private
spaceIndentCount	astyle.h	/^		int  spaceIndentCount;$/;"	m	class:astyle::ASBeautifier	access:private
spaceIndentObjCMethodDefinition	astyle.h	/^		int  spaceIndentObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier	access:private
spacePadNum	astyle.h	/^		int  spacePadNum;$/;"	m	class:astyle::ASFormatter	access:private
squareBracketCount	astyle.h	/^		int  squareBracketCount;$/;"	m	class:astyle::ASBeautifier	access:private
squareBracketCount	astyle.h	/^		int  squareBracketCount;$/;"	m	class:astyle::ASFormatter	access:private
standardizePath	astyle_main.cpp	/^void ASConsole::standardizePath(string &path, bool removeBeginningSeparator \/*false*\/) const$/;"	f	class:astyle::ASConsole	signature:(string &path, bool removeBeginningSeparator ) const
standardizePath	astyle_main.h	/^		void standardizePath(string &path, bool removeBeginningSeparator = false) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(string &path, bool removeBeginningSeparator = false) const
statementEndsWithComma	ASBeautifier.cpp	/^bool ASBeautifier::statementEndsWithComma(const string &line, int index) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &line, int index) const
statementEndsWithComma	astyle.h	/^		bool statementEndsWithComma(const string &line, int index) const;$/;"	p	class:astyle::ASBeautifier	access:private	signature:(const string &line, int index) const
streamLength	astyle_main.h	/^		streamoff streamLength; \/\/ length of the input file stream$/;"	m	class:astyle::ASStreamIterator	access:private
stringEndsWith	astyle_main.cpp	/^bool ASConsole::stringEndsWith(const string &str, const string &suffix) const$/;"	f	class:astyle::ASConsole	signature:(const string &str, const string &suffix) const
stringEndsWith	astyle_main.h	/^		bool stringEndsWith(const string &str, const string &suffix) const;$/;"	p	class:astyle::ASConsole	access:public	signature:(const string &str, const string &suffix) const
stripCommentPrefix	ASFormatter.cpp	/^void ASFormatter::stripCommentPrefix()$/;"	f	class:astyle::ASFormatter	signature:()
stripCommentPrefix	astyle.h	/^		void stripCommentPrefix();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
structStack	astyle.h	/^		vector<bool>* structStack;$/;"	m	class:astyle::ASFormatter	access:private
sw	astyle.h	/^		switchVariables sw;                      \/\/ switch variables struct$/;"	m	class:astyle::ASEnhancer	access:private
swap16bit	astyle_main.cpp	/^int Utf8_16::swap16bit(int value) const$/;"	f	class:astyle::Utf8_16	signature:(int value) const
swap16bit	astyle_main.h	/^		int    swap16bit(int value) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(int value) const
switchBracketCount	astyle.h	/^			int  switchBracketCount;$/;"	m	struct:astyle::ASEnhancer::switchVariables	access:public
switchDepth	astyle.h	/^		int  switchDepth;$/;"	m	class:astyle::ASEnhancer	access:private
switchIndent	astyle.h	/^		bool switchIndent;$/;"	m	class:astyle::ASBeautifier	access:private
switchStack	astyle.h	/^		vector<switchVariables> switchStack;     \/\/ stack vector of switch variables$/;"	m	class:astyle::ASEnhancer	access:private
switchVariables	astyle.h	/^		struct switchVariables$/;"	s	class:astyle::ASEnhancer	access:private
tabIncrementIn	astyle.h	/^		int  tabIncrementIn;$/;"	m	class:astyle::ASFormatter	access:private
tabLength	astyle.h	/^		int  tabLength;$/;"	m	class:astyle::ASBeautifier	access:private
tabLength	astyle.h	/^		int  tabLength;$/;"	m	class:astyle::ASEnhancer	access:private
targetDirectory	astyle_main.h	/^		string targetDirectory;             \/\/ path to the directory being processed$/;"	m	class:astyle::ASConsole	access:private
targetFilename	astyle_main.h	/^		string targetFilename;              \/\/ file name being processed$/;"	m	class:astyle::ASConsole	access:private
tellg	astyle.h	/^		virtual streamoff tellg() = 0;$/;"	p	class:astyle::ASSourceIterator	access:public	signature:()
tellg	astyle_main.cpp	/^streamoff ASStreamIterator<T>::tellg()$/;"	f	class:astyle::ASStreamIterator	signature:()
tellg	astyle_main.h	/^		streamoff tellg();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
tempMemoryAllocation	astyle_main.cpp	/^char* STDCALL ASLibrary::tempMemoryAllocation(unsigned long memoryNeeded)$/;"	f	class:astyle::ASLibrary	signature:(unsigned long memoryNeeded)
tempMemoryAllocation	astyle_main.h	/^		static char* STDCALL tempMemoryAllocation(unsigned long memoryNeeded);$/;"	p	class:astyle::ASLibrary	access:private	signature:(unsigned long memoryNeeded)
tempStacks	astyle.h	/^		vector<vector<const string*>* >* tempStacks;$/;"	m	class:astyle::ASBeautifier	access:private
templateDepth	astyle.h	/^		int  templateDepth;$/;"	m	class:astyle::ASBeautifier	access:private
templateDepth	astyle.h	/^		int  templateDepth;$/;"	m	class:astyle::ASFormatter	access:private
testForTimeToSplitFormattedLine	ASFormatter.cpp	/^void ASFormatter::testForTimeToSplitFormattedLine()$/;"	f	class:astyle::ASFormatter	signature:()
testForTimeToSplitFormattedLine	astyle.h	/^		void testForTimeToSplitFormattedLine();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
tidy	CFBaseTidy.h	/^	void* tidy;$/;"	m	class:CCFBaseTidy	access:protected
translate	ASLocalizer.cpp	/^string &Translation::translate(const string &stringIn) const$/;"	f	class:astyle::Translation	signature:(const string &stringIn) const
translate	ASLocalizer.h	/^		string &translate(const string &stringIn) const;$/;"	p	class:astyle::Translation	access:public	signature:(const string &stringIn) const
trim	ASBeautifier.cpp	/^string ASBeautifier::trim(const string &str) const$/;"	f	class:astyle::ASBeautifier	signature:(const string &str) const
trim	astyle.h	/^		string trim(const string &str) const;$/;"	p	class:astyle::ASBeautifier	access:protected	signature:(const string &str) const
trimContinuationLine	ASFormatter.cpp	/^void ASFormatter::trimContinuationLine()$/;"	f	class:astyle::ASFormatter	signature:()
trimContinuationLine	astyle.h	/^		void trimContinuationLine();$/;"	p	class:astyle::ASFormatter	access:private	signature:()
ubyte	astyle_main.h	/^		typedef unsigned char ubyte;  \/\/ 8 bits$/;"	t	class:astyle::Utf8_16	access:private
unindentCase	astyle.h	/^			bool unindentCase;$/;"	m	struct:astyle::ASEnhancer::switchVariables	access:public
unindentDepth	astyle.h	/^			int  unindentDepth;$/;"	m	struct:astyle::ASEnhancer::switchVariables	access:public
unindentLine	ASEnhancer.cpp	/^int ASEnhancer::unindentLine(string &line, int unindent) const$/;"	f	class:astyle::ASEnhancer	signature:(string &line, int unindent) const
unindentLine	astyle.h	/^		int     unindentLine(string  &line, int unindent) const;$/;"	p	class:astyle::ASEnhancer	access:private	signature:(string &line, int unindent) const
unindentNextLine	astyle.h	/^		bool unindentNextLine;$/;"	m	class:astyle::ASEnhancer	access:private
updateExcludeVector	astyle_main.cpp	/^void ASConsole::updateExcludeVector(string suffixParam)$/;"	f	class:astyle::ASConsole	signature:(string suffixParam)
updateExcludeVector	astyle_main.h	/^		void updateExcludeVector(string suffixParam);$/;"	p	class:astyle::ASConsole	access:public	signature:(string suffixParam)
updateFormattedLineSplitPoints	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPoints(char appendedChar)$/;"	f	class:astyle::ASFormatter	signature:(char appendedChar)
updateFormattedLineSplitPoints	astyle.h	/^		void updateFormattedLineSplitPoints(char appendedChar);$/;"	p	class:astyle::ASFormatter	access:private	signature:(char appendedChar)
updateFormattedLineSplitPointsOperator	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPointsOperator(const string &sequence)$/;"	f	class:astyle::ASFormatter	signature:(const string &sequence)
updateFormattedLineSplitPointsOperator	astyle.h	/^		void updateFormattedLineSplitPointsOperator(const string &sequence);$/;"	p	class:astyle::ASFormatter	access:private	signature:(const string &sequence)
updateFormattedLineSplitPointsPointerOrReference	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPointsPointerOrReference(size_t index)$/;"	f	class:astyle::ASFormatter	signature:(size_t index)
updateFormattedLineSplitPointsPointerOrReference	astyle.h	/^		void updateFormattedLineSplitPointsPointerOrReference(size_t index);$/;"	p	class:astyle::ASFormatter	access:private	signature:(size_t index)
useAscii	astyle_main.h	/^		bool useAscii;                      \/\/ ascii option$/;"	m	class:astyle::ASConsole	access:private
useTabs	astyle.h	/^		bool useTabs;$/;"	m	class:astyle::ASEnhancer	access:private
utf16	astyle_main.h	/^		typedef unsigned short utf16; \/\/ 16 bits$/;"	t	class:astyle::Utf8_16	access:private
utf16_t	astyle_main.h	/^	typedef unsigned short utf16_t;$/;"	t
utf16len	astyle_main.cpp	/^size_t Utf8_16::utf16len(const utf16* utf16In) const$/;"	f	class:astyle::Utf8_16	signature:(const utf16* utf16In) const
utf16len	astyle_main.h	/^		size_t utf16len(const utf16* utf16In) const;$/;"	p	class:astyle::Utf8_16	access:public	signature:(const utf16* utf16In) const
utf8	astyle_main.h	/^		typedef unsigned char utf8;   \/\/ 8 bits$/;"	t	class:astyle::Utf8_16	access:private
utf8_16	astyle_main.h	/^		Utf8_16 utf8_16;                    \/\/ utf8\/16 conversion methods$/;"	m	class:astyle::ASConsole	access:private
utf8_16	astyle_main.h	/^		Utf8_16 utf8_16;            \/\/ utf8\/16 conversion methods$/;"	m	class:astyle::ASLibrary	access:private
verbatimDelimiter	astyle.h	/^		string verbatimDelimiter;$/;"	m	class:astyle::ASBeautifier	access:private
verbatimDelimiter	astyle.h	/^		string verbatimDelimiter;$/;"	m	class:astyle::ASFormatter	access:private
waitForRemove	astyle_main.cpp	/^int ASConsole::waitForRemove(const char* newFileName) const$/;"	f	class:astyle::ASConsole	signature:(const char* newFileName) const
waitForRemove	astyle_main.h	/^		int  waitForRemove(const char* oldFileName) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* oldFileName) const
waitingBeautifierStack	astyle.h	/^		vector<ASBeautifier*>* waitingBeautifierStack;$/;"	m	class:astyle::ASBeautifier	access:private
waitingBeautifierStackLengthStack	astyle.h	/^		vector<int>* waitingBeautifierStackLengthStack;$/;"	m	class:astyle::ASBeautifier	access:private
wildcmp	astyle_main.cpp	/^int ASConsole::wildcmp(const char* wild, const char* data) const$/;"	f	class:astyle::ASConsole	signature:(const char* wild, const char* data) const
wildcmp	astyle_main.h	/^		int  wildcmp(const char* wild, const char* data) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const char* wild, const char* data) const
winLang	ASLocalizer.cpp	/^	size_t winLang;$/;"	m	struct:astyle::WinLangCode	file:	access:public
wlc	ASLocalizer.cpp	/^static WinLangCode wlc[] =$/;"	m	namespace:astyle	file:
writeFile	astyle_main.cpp	/^void ASConsole::writeFile(const string &fileName_, FileEncoding encoding, ostringstream &out) const$/;"	f	class:astyle::ASConsole	signature:(const string &fileName_, FileEncoding encoding, ostringstream &out) const
writeFile	astyle_main.h	/^		void writeFile(const string &fileName_, FileEncoding encoding, ostringstream &out) const;$/;"	p	class:astyle::ASConsole	access:private	signature:(const string &fileName_, FileEncoding encoding, ostringstream &out) const
~ASBase	astyle.h	/^		virtual ~ASBase() {}$/;"	f	class:astyle::ASBase	access:protected	signature:()
~ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::~ASBeautifier()$/;"	f	class:astyle::ASBeautifier	signature:()
~ASBeautifier	astyle.h	/^		virtual ~ASBeautifier();$/;"	p	class:astyle::ASBeautifier	access:public	signature:()
~ASEnhancer	ASEnhancer.cpp	/^ASEnhancer::~ASEnhancer()$/;"	f	class:astyle::ASEnhancer	signature:()
~ASEnhancer	astyle.h	/^		virtual ~ASEnhancer();$/;"	p	class:astyle::ASEnhancer	access:public	signature:()
~ASFormatter	ASFormatter.cpp	/^ASFormatter::~ASFormatter()$/;"	f	class:astyle::ASFormatter	signature:()
~ASFormatter	astyle.h	/^		virtual ~ASFormatter();$/;"	p	class:astyle::ASFormatter	access:public	signature:()
~ASLibrary	astyle_main.h	/^		virtual ~ASLibrary() {}$/;"	f	class:astyle::ASLibrary	access:public	signature:()
~ASLocalizer	ASLocalizer.cpp	/^ASLocalizer::~ASLocalizer()$/;"	f	class:astyle::ASLocalizer	signature:()
~ASLocalizer	ASLocalizer.h	/^		virtual ~ASLocalizer();$/;"	p	class:astyle::ASLocalizer	access:public	signature:()
~ASResource	astyle.h	/^		virtual ~ASResource() {}$/;"	f	class:astyle::ASResource	access:public	signature:()
~ASSourceIterator	astyle.h	/^		virtual ~ASSourceIterator() {}$/;"	f	class:astyle::ASSourceIterator	access:public	signature:()
~ASStreamIterator	astyle_main.cpp	/^ASStreamIterator<T>::~ASStreamIterator()$/;"	f	class:astyle::ASStreamIterator	signature:()
~ASStreamIterator	astyle_main.h	/^		virtual ~ASStreamIterator();$/;"	p	class:astyle::ASStreamIterator	access:public	signature:()
~CCFBaseTidy	CFBaseTidy.cpp	/^CCFBaseTidy::~CCFBaseTidy()$/;"	f	class:CCFBaseTidy	signature:()
~CCFBaseTidy	CFBaseTidy.h	/^	virtual ~CCFBaseTidy();$/;"	p	class:CCFBaseTidy	access:public	signature:()
~CCFCppTidy	CFCppTidy.cpp	/^CCFCppTidy::~CCFCppTidy(void)$/;"	f	class:CCFCppTidy	signature:(void)
~CCFCppTidy	CFCppTidy.h	/^	~CCFCppTidy();$/;"	p	class:CCFCppTidy	access:public	signature:()
~Translation	ASLocalizer.h	/^		virtual ~Translation() {}$/;"	f	class:astyle::Translation	access:public	signature:()
